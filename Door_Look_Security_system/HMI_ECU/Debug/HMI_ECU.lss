
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000027a4  00002838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800196  00800196  0000296e  2**0
                  ALLOC
  3 .stab         000026e8  00000000  00000000  00002970  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e5  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000613d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000627d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a88b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 0b 	call	0x1730	; 0x1730 <main>
      8a:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Routine>:
 * 			No inputs
 *
 * 	returns:
 * 		no returns(void)
 */
void Timer1_Routine(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	oneMinuteCounter++;		/*Need 28 interrupts TO COUNT ONE MINUTE , 2 SEC / INTERRUPT*/
     b4e:	80 91 96 01 	lds	r24, 0x0196
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 96 01 	sts	0x0196, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <sendNewPassword>:


void sendNewPassword(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	a7 97       	sbiw	r28, 0x27	; 39
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	uint8 First_Password[PASSWORD_SIZE] , Second_Password[PASSWORD_SIZE];
	uint8 Password_Check_flag=1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	8d 8f       	std	Y+29, r24	; 0x1d
     b76:	20 c1       	rjmp	.+576    	; 0xdb8 <sendNewPassword+0x25a>

	while(Password_Check_flag)
	{
		LCD_clearScreen();
     b78:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
		LCD_displayString("Please Enter New Password");
     b7c:	80 e6       	ldi	r24, 0x60	; 96
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
		LCD_goToRowColumn(1,0);
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
		getPassword(First_Password , PASSWORD_SIZE);
     b8c:	ce 01       	movw	r24, r28
     b8e:	4e 96       	adiw	r24, 0x1e	; 30
     b90:	65 e0       	ldi	r22, 0x05	; 5
     b92:	0e 94 8c 0a 	call	0x1518	; 0x1518 <getPassword>
		sendPassword(First_Password , PASSWORD_SIZE);
     b96:	ce 01       	movw	r24, r28
     b98:	4e 96       	adiw	r24, 0x1e	; 30
     b9a:	65 e0       	ldi	r22, 0x05	; 5
     b9c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <sendPassword>

		LCD_clearScreen();
     ba0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
		LCD_displayString("Please Re-enter New Password");
     ba4:	8a e7       	ldi	r24, 0x7A	; 122
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
		LCD_goToRowColumn(1,0);
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
		getPassword(Second_Password , PASSWORD_SIZE);
     bb4:	ce 01       	movw	r24, r28
     bb6:	83 96       	adiw	r24, 0x23	; 35
     bb8:	65 e0       	ldi	r22, 0x05	; 5
     bba:	0e 94 8c 0a 	call	0x1518	; 0x1518 <getPassword>
		sendPassword(Second_Password , PASSWORD_SIZE);
     bbe:	ce 01       	movw	r24, r28
     bc0:	83 96       	adiw	r24, 0x23	; 35
     bc2:	65 e0       	ldi	r22, 0x05	; 5
     bc4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <sendPassword>

		Password_Check_flag=UART_receiveByte();
     bc8:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
     bcc:	8d 8f       	std	Y+29, r24	; 0x1d
		if(Password_Check_flag)
     bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bd0:	88 23       	and	r24, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <sendNewPassword+0x78>
     bd4:	79 c0       	rjmp	.+242    	; 0xcc8 <sendNewPassword+0x16a>
		{
			LCD_clearScreen();
     bd6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
			LCD_displayString("Password not matched, try again");
     bda:	87 e9       	ldi	r24, 0x97	; 151
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	aa e7       	ldi	r26, 0x7A	; 122
     be8:	b4 e4       	ldi	r27, 0x44	; 68
     bea:	89 8f       	std	Y+25, r24	; 0x19
     bec:	9a 8f       	std	Y+26, r25	; 0x1a
     bee:	ab 8f       	std	Y+27, r26	; 0x1b
     bf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bf2:	69 8d       	ldd	r22, Y+25	; 0x19
     bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4a ef       	ldi	r20, 0xFA	; 250
     c00:	54 e4       	ldi	r21, 0x44	; 68
     c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	8d 8b       	std	Y+21, r24	; 0x15
     c0c:	9e 8b       	std	Y+22, r25	; 0x16
     c0e:	af 8b       	std	Y+23, r26	; 0x17
     c10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c12:	6d 89       	ldd	r22, Y+21	; 0x15
     c14:	7e 89       	ldd	r23, Y+22	; 0x16
     c16:	8f 89       	ldd	r24, Y+23	; 0x17
     c18:	98 8d       	ldd	r25, Y+24	; 0x18
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e8       	ldi	r20, 0x80	; 128
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c26:	88 23       	and	r24, r24
     c28:	2c f4       	brge	.+10     	; 0xc34 <sendNewPassword+0xd6>
		__ticks = 1;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9c 8b       	std	Y+20, r25	; 0x14
     c30:	8b 8b       	std	Y+19, r24	; 0x13
     c32:	3f c0       	rjmp	.+126    	; 0xcb2 <sendNewPassword+0x154>
	else if (__tmp > 65535)
     c34:	6d 89       	ldd	r22, Y+21	; 0x15
     c36:	7e 89       	ldd	r23, Y+22	; 0x16
     c38:	8f 89       	ldd	r24, Y+23	; 0x17
     c3a:	98 8d       	ldd	r25, Y+24	; 0x18
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	3f ef       	ldi	r19, 0xFF	; 255
     c40:	4f e7       	ldi	r20, 0x7F	; 127
     c42:	57 e4       	ldi	r21, 0x47	; 71
     c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c48:	18 16       	cp	r1, r24
     c4a:	4c f5       	brge	.+82     	; 0xc9e <sendNewPassword+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4c:	69 8d       	ldd	r22, Y+25	; 0x19
     c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e2       	ldi	r20, 0x20	; 32
     c5a:	51 e4       	ldi	r21, 0x41	; 65
     c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	bc 01       	movw	r22, r24
     c66:	cd 01       	movw	r24, r26
     c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	9c 8b       	std	Y+20, r25	; 0x14
     c72:	8b 8b       	std	Y+19, r24	; 0x13
     c74:	0f c0       	rjmp	.+30     	; 0xc94 <sendNewPassword+0x136>
     c76:	88 ec       	ldi	r24, 0xC8	; 200
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	9a 8b       	std	Y+18, r25	; 0x12
     c7c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c7e:	89 89       	ldd	r24, Y+17	; 0x11
     c80:	9a 89       	ldd	r25, Y+18	; 0x12
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <sendNewPassword+0x124>
     c86:	9a 8b       	std	Y+18, r25	; 0x12
     c88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8a:	8b 89       	ldd	r24, Y+19	; 0x13
     c8c:	9c 89       	ldd	r25, Y+20	; 0x14
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	9c 8b       	std	Y+20, r25	; 0x14
     c92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c94:	8b 89       	ldd	r24, Y+19	; 0x13
     c96:	9c 89       	ldd	r25, Y+20	; 0x14
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	69 f7       	brne	.-38     	; 0xc76 <sendNewPassword+0x118>
     c9c:	8d c0       	rjmp	.+282    	; 0xdb8 <sendNewPassword+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9e:	6d 89       	ldd	r22, Y+21	; 0x15
     ca0:	7e 89       	ldd	r23, Y+22	; 0x16
     ca2:	8f 89       	ldd	r24, Y+23	; 0x17
     ca4:	98 8d       	ldd	r25, Y+24	; 0x18
     ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	9c 8b       	std	Y+20, r25	; 0x14
     cb0:	8b 8b       	std	Y+19, r24	; 0x13
     cb2:	8b 89       	ldd	r24, Y+19	; 0x13
     cb4:	9c 89       	ldd	r25, Y+20	; 0x14
     cb6:	98 8b       	std	Y+16, r25	; 0x10
     cb8:	8f 87       	std	Y+15, r24	; 0x0f
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	98 89       	ldd	r25, Y+16	; 0x10
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <sendNewPassword+0x160>
     cc2:	98 8b       	std	Y+16, r25	; 0x10
     cc4:	8f 87       	std	Y+15, r24	; 0x0f
     cc6:	78 c0       	rjmp	.+240    	; 0xdb8 <sendNewPassword+0x25a>
			_delay_ms(1000);
		}
		else
		{
			LCD_clearScreen();
     cc8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
			LCD_displayString("PASSWORD SAVED");
     ccc:	87 eb       	ldi	r24, 0xB7	; 183
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	aa e7       	ldi	r26, 0x7A	; 122
     cda:	b4 e4       	ldi	r27, 0x44	; 68
     cdc:	8b 87       	std	Y+11, r24	; 0x0b
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	ad 87       	std	Y+13, r26	; 0x0d
     ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cea:	9e 85       	ldd	r25, Y+14	; 0x0e
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a ef       	ldi	r20, 0xFA	; 250
     cf2:	54 e4       	ldi	r21, 0x44	; 68
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	8f 83       	std	Y+7, r24	; 0x07
     cfe:	98 87       	std	Y+8, r25	; 0x08
     d00:	a9 87       	std	Y+9, r26	; 0x09
     d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d04:	6f 81       	ldd	r22, Y+7	; 0x07
     d06:	78 85       	ldd	r23, Y+8	; 0x08
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d18:	88 23       	and	r24, r24
     d1a:	2c f4       	brge	.+10     	; 0xd26 <sendNewPassword+0x1c8>
		__ticks = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	8d 83       	std	Y+5, r24	; 0x05
     d24:	3f c0       	rjmp	.+126    	; 0xda4 <sendNewPassword+0x246>
	else if (__tmp > 65535)
     d26:	6f 81       	ldd	r22, Y+7	; 0x07
     d28:	78 85       	ldd	r23, Y+8	; 0x08
     d2a:	89 85       	ldd	r24, Y+9	; 0x09
     d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	4c f5       	brge	.+82     	; 0xd90 <sendNewPassword+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d40:	7c 85       	ldd	r23, Y+12	; 0x0c
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <sendNewPassword+0x228>
     d68:	88 ec       	ldi	r24, 0xC8	; 200
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <sendNewPassword+0x216>
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f7       	brne	.-38     	; 0xd68 <sendNewPassword+0x20a>
     d8e:	14 c0       	rjmp	.+40     	; 0xdb8 <sendNewPassword+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d90:	6f 81       	ldd	r22, Y+7	; 0x07
     d92:	78 85       	ldd	r23, Y+8	; 0x08
     d94:	89 85       	ldd	r24, Y+9	; 0x09
     d96:	9a 85       	ldd	r25, Y+10	; 0x0a
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <sendNewPassword+0x252>
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
void sendNewPassword(void)
{
	uint8 First_Password[PASSWORD_SIZE] , Second_Password[PASSWORD_SIZE];
	uint8 Password_Check_flag=1;

	while(Password_Check_flag)
     db8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dba:	88 23       	and	r24, r24
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <sendNewPassword+0x262>
     dbe:	dc ce       	rjmp	.-584    	; 0xb78 <sendNewPassword+0x1a>
			LCD_clearScreen();
			LCD_displayString("PASSWORD SAVED");
			_delay_ms(1000);
		}
	}
}
     dc0:	a7 96       	adiw	r28, 0x27	; 39
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <userInteractions>:

void userInteractions(void)
{
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	cf 54       	subi	r28, 0x4F	; 79
     de0:	d0 40       	sbci	r29, 0x00	; 0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
	uint8 Old_Password[PASSWORD_SIZE];
	uint8 userChoice , Control_ECU_Choice , passwordErrorCounter , Flag=1;
     dec:	fe 01       	movw	r30, r28
     dee:	e9 5b       	subi	r30, 0xB9	; 185
     df0:	ff 4f       	sbci	r31, 0xFF	; 255
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	80 83       	st	Z, r24
	LCD_clearScreen();
     df6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
	LCD_displayString("System Options");
     dfa:	86 ec       	ldi	r24, 0xC6	; 198
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
     e02:	fe 01       	movw	r30, r28
     e04:	ed 5b       	subi	r30, 0xBD	; 189
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	aa e7       	ldi	r26, 0x7A	; 122
     e0e:	b4 e4       	ldi	r27, 0x44	; 68
     e10:	80 83       	st	Z, r24
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	a2 83       	std	Z+2, r26	; 0x02
     e16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e18:	8e 01       	movw	r16, r28
     e1a:	01 5c       	subi	r16, 0xC1	; 193
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	fe 01       	movw	r30, r28
     e20:	ed 5b       	subi	r30, 0xBD	; 189
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	4a ef       	ldi	r20, 0xFA	; 250
     e32:	54 e4       	ldi	r21, 0x44	; 68
     e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	f8 01       	movw	r30, r16
     e3e:	80 83       	st	Z, r24
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	a2 83       	std	Z+2, r26	; 0x02
     e44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e46:	fe 01       	movw	r30, r28
     e48:	ff 96       	adiw	r30, 0x3f	; 63
     e4a:	60 81       	ld	r22, Z
     e4c:	71 81       	ldd	r23, Z+1	; 0x01
     e4e:	82 81       	ldd	r24, Z+2	; 0x02
     e50:	93 81       	ldd	r25, Z+3	; 0x03
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e8       	ldi	r20, 0x80	; 128
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5e:	88 23       	and	r24, r24
     e60:	2c f4       	brge	.+10     	; 0xe6c <userInteractions+0x9a>
		__ticks = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9e af       	std	Y+62, r25	; 0x3e
     e68:	8d af       	std	Y+61, r24	; 0x3d
     e6a:	46 c0       	rjmp	.+140    	; 0xef8 <userInteractions+0x126>
	else if (__tmp > 65535)
     e6c:	fe 01       	movw	r30, r28
     e6e:	ff 96       	adiw	r30, 0x3f	; 63
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	3f ef       	ldi	r19, 0xFF	; 255
     e7c:	4f e7       	ldi	r20, 0x7F	; 127
     e7e:	57 e4       	ldi	r21, 0x47	; 71
     e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e84:	18 16       	cp	r1, r24
     e86:	64 f5       	brge	.+88     	; 0xee0 <userInteractions+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e88:	fe 01       	movw	r30, r28
     e8a:	ed 5b       	subi	r30, 0xBD	; 189
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e af       	std	Y+62, r25	; 0x3e
     eb4:	8d af       	std	Y+61, r24	; 0x3d
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <userInteractions+0x104>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c af       	std	Y+60, r25	; 0x3c
     ebe:	8b af       	std	Y+59, r24	; 0x3b
     ec0:	8b ad       	ldd	r24, Y+59	; 0x3b
     ec2:	9c ad       	ldd	r25, Y+60	; 0x3c
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <userInteractions+0xf2>
     ec8:	9c af       	std	Y+60, r25	; 0x3c
     eca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8d ad       	ldd	r24, Y+61	; 0x3d
     ece:	9e ad       	ldd	r25, Y+62	; 0x3e
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9e af       	std	Y+62, r25	; 0x3e
     ed4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8d ad       	ldd	r24, Y+61	; 0x3d
     ed8:	9e ad       	ldd	r25, Y+62	; 0x3e
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <userInteractions+0xe6>
     ede:	16 c0       	rjmp	.+44     	; 0xf0c <userInteractions+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	fe 01       	movw	r30, r28
     ee2:	ff 96       	adiw	r30, 0x3f	; 63
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9e af       	std	Y+62, r25	; 0x3e
     ef6:	8d af       	std	Y+61, r24	; 0x3d
     ef8:	8d ad       	ldd	r24, Y+61	; 0x3d
     efa:	9e ad       	ldd	r25, Y+62	; 0x3e
     efc:	9a af       	std	Y+58, r25	; 0x3a
     efe:	89 af       	std	Y+57, r24	; 0x39
     f00:	89 ad       	ldd	r24, Y+57	; 0x39
     f02:	9a ad       	ldd	r25, Y+58	; 0x3a
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <userInteractions+0x132>
     f08:	9a af       	std	Y+58, r25	; 0x3a
     f0a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	LCD_clearScreen();
     f0c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
	LCD_displayString(" * : Open The Door");
     f10:	85 ed       	ldi	r24, 0xD5	; 213
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
	LCD_displayString(" # : Change Password");
     f20:	88 ee       	ldi	r24, 0xE8	; 232
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>

	userChoice=KEYBAD_GetPressedKey();
     f28:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <KEYBAD_GetPressedKey>
     f2c:	fe 01       	movw	r30, r28
     f2e:	e6 5b       	subi	r30, 0xB6	; 182
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 83       	st	Z, r24
	stop();
     f34:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <stop>

	if(userChoice=='*')
     f38:	fe 01       	movw	r30, r28
     f3a:	e6 5b       	subi	r30, 0xB6	; 182
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	8a 32       	cpi	r24, 0x2A	; 42
     f42:	09 f0       	breq	.+2      	; 0xf46 <userInteractions+0x174>
     f44:	b6 c1       	rjmp	.+876    	; 0x12b2 <userInteractions+0x4e0>
	{
		UART_sendByte(HMI_SEND_OPTIONS);
     f46:	84 ea       	ldi	r24, 0xA4	; 164
     f48:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
		UART_sendByte(SEND_OLD_PASSWORD);
     f4c:	85 ea       	ldi	r24, 0xA5	; 165
     f4e:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
		LCD_clearScreen();
     f52:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
		LCD_displayString("Enter The Password");
     f56:	8d ef       	ldi	r24, 0xFD	; 253
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
		LCD_goToRowColumn(1,0);
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
		getPassword(Old_Password , PASSWORD_SIZE);
     f66:	ce 01       	movw	r24, r28
     f68:	85 5b       	subi	r24, 0xB5	; 181
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	65 e0       	ldi	r22, 0x05	; 5
     f6e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <getPassword>
		sendPassword(Old_Password , PASSWORD_SIZE);
     f72:	ce 01       	movw	r24, r28
     f74:	85 5b       	subi	r24, 0xB5	; 181
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	65 e0       	ldi	r22, 0x05	; 5
     f7a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <sendPassword>

		while(UART_receiveByte() != CONTROL_SEND_OPTIONS);
     f7e:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
     f82:	87 3a       	cpi	r24, 0xA7	; 167
     f84:	e1 f7       	brne	.-8      	; 0xf7e <userInteractions+0x1ac>

		Control_ECU_Choice=UART_receiveByte();
     f86:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5b       	subi	r30, 0xB7	; 183
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 83       	st	Z, r24
		if(Control_ECU_Choice == OPEN_DOOR)
     f92:	fe 01       	movw	r30, r28
     f94:	e7 5b       	subi	r30, 0xB7	; 183
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	86 3a       	cpi	r24, 0xA6	; 166
     f9c:	99 f4       	brne	.+38     	; 0xfc4 <userInteractions+0x1f2>
		{
			LCD_clearScreen();
     f9e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
			LCD_displayString("Door Is Opening");
     fa2:	80 e1       	ldi	r24, 0x10	; 16
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
			myDelay(7);
     faa:	87 e0       	ldi	r24, 0x07	; 7
     fac:	0e 94 81 0b 	call	0x1702	; 0x1702 <myDelay>
			LCD_clearScreen();
     fb0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
			LCD_displayString("Door Is Closing");
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
			myDelay(7);
     fbc:	87 e0       	ldi	r24, 0x07	; 7
     fbe:	0e 94 81 0b 	call	0x1702	; 0x1702 <myDelay>
     fc2:	9e c2       	rjmp	.+1340   	; 0x1500 <userInteractions+0x72e>
		}
		else if(Control_ECU_Choice == WRONG_PASSWORD_FOR_OPENNING)
     fc4:	fe 01       	movw	r30, r28
     fc6:	e7 5b       	subi	r30, 0xB7	; 183
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	80 81       	ld	r24, Z
     fcc:	89 3a       	cpi	r24, 0xA9	; 169
     fce:	09 f0       	breq	.+2      	; 0xfd2 <userInteractions+0x200>
     fd0:	97 c2       	rjmp	.+1326   	; 0x1500 <userInteractions+0x72e>
		{
			LCD_clearScreen();
     fd2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
			LCD_displayString("Wrong Password");
     fd6:	80 e3       	ldi	r24, 0x30	; 48
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	aa e7       	ldi	r26, 0x7A	; 122
     fe4:	b4 e4       	ldi	r27, 0x44	; 68
     fe6:	8d ab       	std	Y+53, r24	; 0x35
     fe8:	9e ab       	std	Y+54, r25	; 0x36
     fea:	af ab       	std	Y+55, r26	; 0x37
     fec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	6d a9       	ldd	r22, Y+53	; 0x35
     ff0:	7e a9       	ldd	r23, Y+54	; 0x36
     ff2:	8f a9       	ldd	r24, Y+55	; 0x37
     ff4:	98 ad       	ldd	r25, Y+56	; 0x38
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	4a ef       	ldi	r20, 0xFA	; 250
     ffc:	54 e4       	ldi	r21, 0x44	; 68
     ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	89 ab       	std	Y+49, r24	; 0x31
    1008:	9a ab       	std	Y+50, r25	; 0x32
    100a:	ab ab       	std	Y+51, r26	; 0x33
    100c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    100e:	69 a9       	ldd	r22, Y+49	; 0x31
    1010:	7a a9       	ldd	r23, Y+50	; 0x32
    1012:	8b a9       	ldd	r24, Y+51	; 0x33
    1014:	9c a9       	ldd	r25, Y+52	; 0x34
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1022:	88 23       	and	r24, r24
    1024:	2c f4       	brge	.+10     	; 0x1030 <userInteractions+0x25e>
		__ticks = 1;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	98 ab       	std	Y+48, r25	; 0x30
    102c:	8f a7       	std	Y+47, r24	; 0x2f
    102e:	3f c0       	rjmp	.+126    	; 0x10ae <userInteractions+0x2dc>
	else if (__tmp > 65535)
    1030:	69 a9       	ldd	r22, Y+49	; 0x31
    1032:	7a a9       	ldd	r23, Y+50	; 0x32
    1034:	8b a9       	ldd	r24, Y+51	; 0x33
    1036:	9c a9       	ldd	r25, Y+52	; 0x34
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	4c f5       	brge	.+82     	; 0x109a <userInteractions+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1048:	6d a9       	ldd	r22, Y+53	; 0x35
    104a:	7e a9       	ldd	r23, Y+54	; 0x36
    104c:	8f a9       	ldd	r24, Y+55	; 0x37
    104e:	98 ad       	ldd	r25, Y+56	; 0x38
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e2       	ldi	r20, 0x20	; 32
    1056:	51 e4       	ldi	r21, 0x41	; 65
    1058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	bc 01       	movw	r22, r24
    1062:	cd 01       	movw	r24, r26
    1064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	98 ab       	std	Y+48, r25	; 0x30
    106e:	8f a7       	std	Y+47, r24	; 0x2f
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <userInteractions+0x2be>
    1072:	88 ec       	ldi	r24, 0xC8	; 200
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9e a7       	std	Y+46, r25	; 0x2e
    1078:	8d a7       	std	Y+45, r24	; 0x2d
    107a:	8d a5       	ldd	r24, Y+45	; 0x2d
    107c:	9e a5       	ldd	r25, Y+46	; 0x2e
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <userInteractions+0x2ac>
    1082:	9e a7       	std	Y+46, r25	; 0x2e
    1084:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1086:	8f a5       	ldd	r24, Y+47	; 0x2f
    1088:	98 a9       	ldd	r25, Y+48	; 0x30
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	98 ab       	std	Y+48, r25	; 0x30
    108e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1090:	8f a5       	ldd	r24, Y+47	; 0x2f
    1092:	98 a9       	ldd	r25, Y+48	; 0x30
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	69 f7       	brne	.-38     	; 0x1072 <userInteractions+0x2a0>
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <userInteractions+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109a:	69 a9       	ldd	r22, Y+49	; 0x31
    109c:	7a a9       	ldd	r23, Y+50	; 0x32
    109e:	8b a9       	ldd	r24, Y+51	; 0x33
    10a0:	9c a9       	ldd	r25, Y+52	; 0x34
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	98 ab       	std	Y+48, r25	; 0x30
    10ac:	8f a7       	std	Y+47, r24	; 0x2f
    10ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    10b0:	98 a9       	ldd	r25, Y+48	; 0x30
    10b2:	9c a7       	std	Y+44, r25	; 0x2c
    10b4:	8b a7       	std	Y+43, r24	; 0x2b
    10b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <userInteractions+0x2e8>
    10be:	9c a7       	std	Y+44, r25	; 0x2c
    10c0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			for(passwordErrorCounter=0 ; passwordErrorCounter<WRONG_PASSWORD_COUNTER-1 ; passwordErrorCounter++)
    10c2:	fe 01       	movw	r30, r28
    10c4:	e8 5b       	subi	r30, 0xB8	; 184
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	10 82       	st	Z, r1
    10ca:	eb c0       	rjmp	.+470    	; 0x12a2 <userInteractions+0x4d0>
			{
				while(UART_receiveByte() != SYNCH);
    10cc:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    10d0:	8f 3f       	cpi	r24, 0xFF	; 255
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <userInteractions+0x2fa>
				if(Flag)
    10d4:	fe 01       	movw	r30, r28
    10d6:	e9 5b       	subi	r30, 0xB9	; 185
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 81       	ld	r24, Z
    10dc:	88 23       	and	r24, r24
    10de:	09 f4       	brne	.+2      	; 0x10e2 <userInteractions+0x310>
    10e0:	d7 c0       	rjmp	.+430    	; 0x1290 <userInteractions+0x4be>
				{
					LCD_clearScreen();
    10e2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
					LCD_displayString("Please Re-Enter Password");
    10e6:	8f e3       	ldi	r24, 0x3F	; 63
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
					LCD_goToRowColumn(1,0);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
					getPassword(Old_Password , PASSWORD_SIZE);
    10f6:	ce 01       	movw	r24, r28
    10f8:	85 5b       	subi	r24, 0xB5	; 181
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	65 e0       	ldi	r22, 0x05	; 5
    10fe:	0e 94 8c 0a 	call	0x1518	; 0x1518 <getPassword>
					UART_sendByte(HMI_SEND_OPTIONS);
    1102:	84 ea       	ldi	r24, 0xA4	; 164
    1104:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
					sendPassword(Old_Password , PASSWORD_SIZE);
    1108:	ce 01       	movw	r24, r28
    110a:	85 5b       	subi	r24, 0xB5	; 181
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	65 e0       	ldi	r22, 0x05	; 5
    1110:	0e 94 bb 0a 	call	0x1576	; 0x1576 <sendPassword>
					while(UART_receiveByte() != CONTROL_SEND_OPTIONS);
    1114:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    1118:	87 3a       	cpi	r24, 0xA7	; 167
    111a:	e1 f7       	brne	.-8      	; 0x1114 <userInteractions+0x342>
					Control_ECU_Choice=UART_receiveByte();
    111c:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    1120:	fe 01       	movw	r30, r28
    1122:	e7 5b       	subi	r30, 0xB7	; 183
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 83       	st	Z, r24

					if(Control_ECU_Choice== PASSWORD_CHECKED_TRUE)
    1128:	fe 01       	movw	r30, r28
    112a:	e7 5b       	subi	r30, 0xB7	; 183
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	8a 3a       	cpi	r24, 0xAA	; 170
    1132:	b9 f4       	brne	.+46     	; 0x1162 <userInteractions+0x390>
					{
						LCD_clearScreen();
    1134:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
						LCD_displayString("Door Is Opening");
    1138:	80 e1       	ldi	r24, 0x10	; 16
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
						myDelay(7);
    1140:	87 e0       	ldi	r24, 0x07	; 7
    1142:	0e 94 81 0b 	call	0x1702	; 0x1702 <myDelay>
						LCD_clearScreen();
    1146:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
						LCD_displayString("Door Is Closing");
    114a:	80 e2       	ldi	r24, 0x20	; 32
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
						myDelay(7);
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	0e 94 81 0b 	call	0x1702	; 0x1702 <myDelay>
						Flag=0;
    1158:	fe 01       	movw	r30, r28
    115a:	e9 5b       	subi	r30, 0xB9	; 185
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	10 82       	st	Z, r1
    1160:	97 c0       	rjmp	.+302    	; 0x1290 <userInteractions+0x4be>
					}

					else if(Control_ECU_Choice== PASSWORD_CHECKED_FALSE)
    1162:	fe 01       	movw	r30, r28
    1164:	e7 5b       	subi	r30, 0xB7	; 183
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	80 81       	ld	r24, Z
    116a:	8b 3a       	cpi	r24, 0xAB	; 171
    116c:	09 f0       	breq	.+2      	; 0x1170 <userInteractions+0x39e>
    116e:	90 c0       	rjmp	.+288    	; 0x1290 <userInteractions+0x4be>
					{
						LCD_clearScreen();
    1170:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
						LCD_displayString("Wrong Password");
    1174:	80 e3       	ldi	r24, 0x30	; 48
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	aa ef       	ldi	r26, 0xFA	; 250
    1182:	b3 e4       	ldi	r27, 0x43	; 67
    1184:	8f a3       	std	Y+39, r24	; 0x27
    1186:	98 a7       	std	Y+40, r25	; 0x28
    1188:	a9 a7       	std	Y+41, r26	; 0x29
    118a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6f a1       	ldd	r22, Y+39	; 0x27
    118e:	78 a5       	ldd	r23, Y+40	; 0x28
    1190:	89 a5       	ldd	r24, Y+41	; 0x29
    1192:	9a a5       	ldd	r25, Y+42	; 0x2a
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a ef       	ldi	r20, 0xFA	; 250
    119a:	54 e4       	ldi	r21, 0x44	; 68
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8b a3       	std	Y+35, r24	; 0x23
    11a6:	9c a3       	std	Y+36, r25	; 0x24
    11a8:	ad a3       	std	Y+37, r26	; 0x25
    11aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11ac:	6b a1       	ldd	r22, Y+35	; 0x23
    11ae:	7c a1       	ldd	r23, Y+36	; 0x24
    11b0:	8d a1       	ldd	r24, Y+37	; 0x25
    11b2:	9e a1       	ldd	r25, Y+38	; 0x26
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <userInteractions+0x3fc>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9a a3       	std	Y+34, r25	; 0x22
    11ca:	89 a3       	std	Y+33, r24	; 0x21
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <userInteractions+0x47a>
	else if (__tmp > 65535)
    11ce:	6b a1       	ldd	r22, Y+35	; 0x23
    11d0:	7c a1       	ldd	r23, Y+36	; 0x24
    11d2:	8d a1       	ldd	r24, Y+37	; 0x25
    11d4:	9e a1       	ldd	r25, Y+38	; 0x26
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <userInteractions+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6f a1       	ldd	r22, Y+39	; 0x27
    11e8:	78 a5       	ldd	r23, Y+40	; 0x28
    11ea:	89 a5       	ldd	r24, Y+41	; 0x29
    11ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9a a3       	std	Y+34, r25	; 0x22
    120c:	89 a3       	std	Y+33, r24	; 0x21
    120e:	0f c0       	rjmp	.+30     	; 0x122e <userInteractions+0x45c>
    1210:	88 ec       	ldi	r24, 0xC8	; 200
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	98 a3       	std	Y+32, r25	; 0x20
    1216:	8f 8f       	std	Y+31, r24	; 0x1f
    1218:	8f 8d       	ldd	r24, Y+31	; 0x1f
    121a:	98 a1       	ldd	r25, Y+32	; 0x20
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <userInteractions+0x44a>
    1220:	98 a3       	std	Y+32, r25	; 0x20
    1222:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	89 a1       	ldd	r24, Y+33	; 0x21
    1226:	9a a1       	ldd	r25, Y+34	; 0x22
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9a a3       	std	Y+34, r25	; 0x22
    122c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	89 a1       	ldd	r24, Y+33	; 0x21
    1230:	9a a1       	ldd	r25, Y+34	; 0x22
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <userInteractions+0x43e>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <userInteractions+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6b a1       	ldd	r22, Y+35	; 0x23
    123a:	7c a1       	ldd	r23, Y+36	; 0x24
    123c:	8d a1       	ldd	r24, Y+37	; 0x25
    123e:	9e a1       	ldd	r25, Y+38	; 0x26
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9a a3       	std	Y+34, r25	; 0x22
    124a:	89 a3       	std	Y+33, r24	; 0x21
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	9e 8f       	std	Y+30, r25	; 0x1e
    1252:	8d 8f       	std	Y+29, r24	; 0x1d
    1254:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1256:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <userInteractions+0x486>
    125c:	9e 8f       	std	Y+30, r25	; 0x1e
    125e:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);
						if(passwordErrorCounter==(WRONG_PASSWORD_COUNTER-2))
    1260:	fe 01       	movw	r30, r28
    1262:	e8 5b       	subi	r30, 0xB8	; 184
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	80 81       	ld	r24, Z
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 f4       	brne	.+36     	; 0x1290 <userInteractions+0x4be>
						{
							LCD_clearScreen();
    126c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
							LCD_displayString("		RUUUUN		");
    1270:	88 e5       	ldi	r24, 0x58	; 88
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
							myDelay(1);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	0e 94 81 0b 	call	0x1702	; 0x1702 <myDelay>
							LCD_clearScreen();
    127e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
							LCD_displayString("ALAAAAAARM");
    1282:	83 e6       	ldi	r24, 0x63	; 99
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
							myDelay(27);
    128a:	8b e1       	ldi	r24, 0x1B	; 27
    128c:	0e 94 81 0b 	call	0x1702	; 0x1702 <myDelay>
		else if(Control_ECU_Choice == WRONG_PASSWORD_FOR_OPENNING)
		{
			LCD_clearScreen();
			LCD_displayString("Wrong Password");
			_delay_ms(1000);
			for(passwordErrorCounter=0 ; passwordErrorCounter<WRONG_PASSWORD_COUNTER-1 ; passwordErrorCounter++)
    1290:	de 01       	movw	r26, r28
    1292:	a8 5b       	subi	r26, 0xB8	; 184
    1294:	bf 4f       	sbci	r27, 0xFF	; 255
    1296:	fe 01       	movw	r30, r28
    1298:	e8 5b       	subi	r30, 0xB8	; 184
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	80 81       	ld	r24, Z
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	8c 93       	st	X, r24
    12a2:	fe 01       	movw	r30, r28
    12a4:	e8 5b       	subi	r30, 0xB8	; 184
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <userInteractions+0x4de>
    12ae:	0e cf       	rjmp	.-484    	; 0x10cc <userInteractions+0x2fa>
    12b0:	27 c1       	rjmp	.+590    	; 0x1500 <userInteractions+0x72e>
					}
				}
			}
		}
	}
	else if(userChoice=='#')
    12b2:	fe 01       	movw	r30, r28
    12b4:	e6 5b       	subi	r30, 0xB6	; 182
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	80 81       	ld	r24, Z
    12ba:	83 32       	cpi	r24, 0x23	; 35
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <userInteractions+0x4ee>
    12be:	20 c1       	rjmp	.+576    	; 0x1500 <userInteractions+0x72e>
	{
		LCD_clearScreen();
    12c0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
		LCD_displayString("Enter The Old Password");
    12c4:	8e e6       	ldi	r24, 0x6E	; 110
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
		LCD_goToRowColumn(1,0);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
		UART_sendByte(HMI_SEND_OPTIONS);
    12d4:	84 ea       	ldi	r24, 0xA4	; 164
    12d6:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a0 ea       	ldi	r26, 0xA0	; 160
    12e0:	b0 e4       	ldi	r27, 0x40	; 64
    12e2:	89 8f       	std	Y+25, r24	; 0x19
    12e4:	9a 8f       	std	Y+26, r25	; 0x1a
    12e6:	ab 8f       	std	Y+27, r26	; 0x1b
    12e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ea:	69 8d       	ldd	r22, Y+25	; 0x19
    12ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	4a ef       	ldi	r20, 0xFA	; 250
    12f8:	54 e4       	ldi	r21, 0x44	; 68
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	8d 8b       	std	Y+21, r24	; 0x15
    1304:	9e 8b       	std	Y+22, r25	; 0x16
    1306:	af 8b       	std	Y+23, r26	; 0x17
    1308:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    130a:	6d 89       	ldd	r22, Y+21	; 0x15
    130c:	7e 89       	ldd	r23, Y+22	; 0x16
    130e:	8f 89       	ldd	r24, Y+23	; 0x17
    1310:	98 8d       	ldd	r25, Y+24	; 0x18
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e8       	ldi	r20, 0x80	; 128
    1318:	5f e3       	ldi	r21, 0x3F	; 63
    131a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    131e:	88 23       	and	r24, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <userInteractions+0x55a>
		__ticks = 1;
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	9c 8b       	std	Y+20, r25	; 0x14
    1328:	8b 8b       	std	Y+19, r24	; 0x13
    132a:	3f c0       	rjmp	.+126    	; 0x13aa <userInteractions+0x5d8>
	else if (__tmp > 65535)
    132c:	6d 89       	ldd	r22, Y+21	; 0x15
    132e:	7e 89       	ldd	r23, Y+22	; 0x16
    1330:	8f 89       	ldd	r24, Y+23	; 0x17
    1332:	98 8d       	ldd	r25, Y+24	; 0x18
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	3f ef       	ldi	r19, 0xFF	; 255
    1338:	4f e7       	ldi	r20, 0x7F	; 127
    133a:	57 e4       	ldi	r21, 0x47	; 71
    133c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1340:	18 16       	cp	r1, r24
    1342:	4c f5       	brge	.+82     	; 0x1396 <userInteractions+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1344:	69 8d       	ldd	r22, Y+25	; 0x19
    1346:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1348:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9c 8b       	std	Y+20, r25	; 0x14
    136a:	8b 8b       	std	Y+19, r24	; 0x13
    136c:	0f c0       	rjmp	.+30     	; 0x138c <userInteractions+0x5ba>
    136e:	88 ec       	ldi	r24, 0xC8	; 200
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9a 8b       	std	Y+18, r25	; 0x12
    1374:	89 8b       	std	Y+17, r24	; 0x11
    1376:	89 89       	ldd	r24, Y+17	; 0x11
    1378:	9a 89       	ldd	r25, Y+18	; 0x12
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <userInteractions+0x5a8>
    137e:	9a 8b       	std	Y+18, r25	; 0x12
    1380:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	9c 8b       	std	Y+20, r25	; 0x14
    138a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	8b 89       	ldd	r24, Y+19	; 0x13
    138e:	9c 89       	ldd	r25, Y+20	; 0x14
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f7       	brne	.-38     	; 0x136e <userInteractions+0x59c>
    1394:	14 c0       	rjmp	.+40     	; 0x13be <userInteractions+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1396:	6d 89       	ldd	r22, Y+21	; 0x15
    1398:	7e 89       	ldd	r23, Y+22	; 0x16
    139a:	8f 89       	ldd	r24, Y+23	; 0x17
    139c:	98 8d       	ldd	r25, Y+24	; 0x18
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9c 8b       	std	Y+20, r25	; 0x14
    13a8:	8b 8b       	std	Y+19, r24	; 0x13
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	98 8b       	std	Y+16, r25	; 0x10
    13b0:	8f 87       	std	Y+15, r24	; 0x0f
    13b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b4:	98 89       	ldd	r25, Y+16	; 0x10
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <userInteractions+0x5e4>
    13ba:	98 8b       	std	Y+16, r25	; 0x10
    13bc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		UART_sendByte(CHANGE_PASSWORD);
    13be:	83 ea       	ldi	r24, 0xA3	; 163
    13c0:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
		getPassword(Old_Password , PASSWORD_SIZE);
    13c4:	ce 01       	movw	r24, r28
    13c6:	85 5b       	subi	r24, 0xB5	; 181
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	65 e0       	ldi	r22, 0x05	; 5
    13cc:	0e 94 8c 0a 	call	0x1518	; 0x1518 <getPassword>
		sendPassword(Old_Password , PASSWORD_SIZE);
    13d0:	ce 01       	movw	r24, r28
    13d2:	85 5b       	subi	r24, 0xB5	; 181
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <sendPassword>
		while(UART_receiveByte() != CONTROL_SEND_OPTIONS);
    13dc:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    13e0:	87 3a       	cpi	r24, 0xA7	; 167
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <userInteractions+0x60a>
		Control_ECU_Choice=UART_receiveByte();
    13e4:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    13e8:	fe 01       	movw	r30, r28
    13ea:	e7 5b       	subi	r30, 0xB7	; 183
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
		if(Control_ECU_Choice == EDIT_PASSWORD)
    13f0:	fe 01       	movw	r30, r28
    13f2:	e7 5b       	subi	r30, 0xB7	; 183
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	8c 3a       	cpi	r24, 0xAC	; 172
    13fa:	19 f4       	brne	.+6      	; 0x1402 <userInteractions+0x630>
		{
			sendNewPassword();
    13fc:	0e 94 af 05 	call	0xb5e	; 0xb5e <sendNewPassword>
    1400:	7f c0       	rjmp	.+254    	; 0x1500 <userInteractions+0x72e>
		}
		else if(Control_ECU_Choice == PASSWORD_KEPT)
    1402:	fe 01       	movw	r30, r28
    1404:	e7 5b       	subi	r30, 0xB7	; 183
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	8d 3a       	cpi	r24, 0xAD	; 173
    140c:	09 f0       	breq	.+2      	; 0x1410 <userInteractions+0x63e>
    140e:	78 c0       	rjmp	.+240    	; 0x1500 <userInteractions+0x72e>
		{
			LCD_clearScreen();
    1410:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    1414:	80 e3       	ldi	r24, 0x30	; 48
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	aa e7       	ldi	r26, 0x7A	; 122
    1422:	b4 e4       	ldi	r27, 0x44	; 68
    1424:	8b 87       	std	Y+11, r24	; 0x0b
    1426:	9c 87       	std	Y+12, r25	; 0x0c
    1428:	ad 87       	std	Y+13, r26	; 0x0d
    142a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a ef       	ldi	r20, 0xFA	; 250
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8f 83       	std	Y+7, r24	; 0x07
    1446:	98 87       	std	Y+8, r25	; 0x08
    1448:	a9 87       	std	Y+9, r26	; 0x09
    144a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <userInteractions+0x69c>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <userInteractions+0x71a>
	else if (__tmp > 65535)
    146e:	6f 81       	ldd	r22, Y+7	; 0x07
    1470:	78 85       	ldd	r23, Y+8	; 0x08
    1472:	89 85       	ldd	r24, Y+9	; 0x09
    1474:	9a 85       	ldd	r25, Y+10	; 0x0a
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <userInteractions+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	6b 85       	ldd	r22, Y+11	; 0x0b
    1488:	7c 85       	ldd	r23, Y+12	; 0x0c
    148a:	8d 85       	ldd	r24, Y+13	; 0x0d
    148c:	9e 85       	ldd	r25, Y+14	; 0x0e
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9e 83       	std	Y+6, r25	; 0x06
    14ac:	8d 83       	std	Y+5, r24	; 0x05
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <userInteractions+0x6fc>
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9c 83       	std	Y+4, r25	; 0x04
    14b6:	8b 83       	std	Y+3, r24	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <userInteractions+0x6ea>
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9e 83       	std	Y+6, r25	; 0x06
    14cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <userInteractions+0x6de>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <userInteractions+0x72e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <userInteractions+0x726>
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}

	}
}
    1500:	c1 5b       	subi	r28, 0xB1	; 177
    1502:	df 4f       	sbci	r29, 0xFF	; 255
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <getPassword>:
 *			2- uint8 a_passwordSize: size of the array
 * 	returns:
 * 		no returns(void)
 */
void getPassword(uint8 *Arr , uint8 a_passwordSize)
{
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <getPassword+0xa>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <getPassword+0xc>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9b 83       	std	Y+3, r25	; 0x03
    152a:	8a 83       	std	Y+2, r24	; 0x02
    152c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    152e:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<a_passwordSize;i++)
    1530:	19 82       	std	Y+1, r1	; 0x01
    1532:	14 c0       	rjmp	.+40     	; 0x155c <getPassword+0x44>
	{
		Arr[i]=KEYBAD_GetPressedKey();
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	9b 81       	ldd	r25, Y+3	; 0x03
    153e:	8c 01       	movw	r16, r24
    1540:	02 0f       	add	r16, r18
    1542:	13 1f       	adc	r17, r19
    1544:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <KEYBAD_GetPressedKey>
    1548:	f8 01       	movw	r30, r16
    154a:	80 83       	st	Z, r24
		LCD_displayCharacter('*');  /*Shows the input as "*" */
    154c:	8a e2       	ldi	r24, 0x2A	; 42
    154e:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <LCD_displayCharacter>
		stop();						/*Don't get input till user release the key*/
    1552:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <stop>
 * 		no returns(void)
 */
void getPassword(uint8 *Arr , uint8 a_passwordSize)
{
	uint8 i=0;
	for(i=0;i<a_passwordSize;i++)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	8f 5f       	subi	r24, 0xFF	; 255
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	99 81       	ldd	r25, Y+1	; 0x01
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	98 17       	cp	r25, r24
    1562:	40 f3       	brcs	.-48     	; 0x1534 <getPassword+0x1c>
	{
		Arr[i]=KEYBAD_GetPressedKey();
		LCD_displayCharacter('*');  /*Shows the input as "*" */
		stop();						/*Don't get input till user release the key*/
	}
}
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <sendPassword>:
 *
 * 	returns:
 * 		no returns(void)
 */
void sendPassword(uint8 *Arr,uint8 size)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <sendPassword+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <sendPassword+0x8>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9b 83       	std	Y+3, r25	; 0x03
    1584:	8a 83       	std	Y+2, r24	; 0x02
    1586:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    1588:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(SEND_PASSWORD);
    158a:	81 ea       	ldi	r24, 0xA1	; 161
    158c:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
	for(i=0;i<size;i++)
    1590:	19 82       	std	Y+1, r1	; 0x01
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <sendPassword+0x3a>
	{
		UART_sendByte(Arr[i]);
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	9b 81       	ldd	r25, Y+3	; 0x03
    159e:	fc 01       	movw	r30, r24
    15a0:	e2 0f       	add	r30, r18
    15a2:	f3 1f       	adc	r31, r19
    15a4:	80 81       	ld	r24, Z
    15a6:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
 */
void sendPassword(uint8 *Arr,uint8 size)
{
	uint8 i=0;
	UART_sendByte(SEND_PASSWORD);
	for(i=0;i<size;i++)
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	99 81       	ldd	r25, Y+1	; 0x01
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	98 17       	cp	r25, r24
    15b6:	70 f3       	brcs	.-36     	; 0x1594 <sendPassword+0x1e>
	{
		UART_sendByte(Arr[i]);
	}
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <firstTimeOpeningNewSystem>:
 *
 * 	returns:
 * 		no returns(void)
 */
void firstTimeOpeningNewSystem(void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	61 97       	sbiw	r28, 0x11	; 17
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
	uint8 EEPROM_First_Address_Value , EEPROM_Second_Address_Value ,  Indicator ;
	while(UART_receiveByte() != SYNCH);
    15da:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    15de:	8f 3f       	cpi	r24, 0xFF	; 255
    15e0:	e1 f7       	brne	.-8      	; 0x15da <firstTimeOpeningNewSystem+0x14>
	EEPROM_First_Address_Value = UART_receiveByte();
    15e2:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    15e6:	89 8b       	std	Y+17, r24	; 0x11
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	a0 ea       	ldi	r26, 0xA0	; 160
    15ee:	b0 e4       	ldi	r27, 0x40	; 64
    15f0:	8b 87       	std	Y+11, r24	; 0x0b
    15f2:	9c 87       	std	Y+12, r25	; 0x0c
    15f4:	ad 87       	std	Y+13, r26	; 0x0d
    15f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    15fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	4a ef       	ldi	r20, 0xFA	; 250
    1606:	54 e4       	ldi	r21, 0x44	; 68
    1608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	8f 83       	std	Y+7, r24	; 0x07
    1612:	98 87       	std	Y+8, r25	; 0x08
    1614:	a9 87       	std	Y+9, r26	; 0x09
    1616:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1618:	6f 81       	ldd	r22, Y+7	; 0x07
    161a:	78 85       	ldd	r23, Y+8	; 0x08
    161c:	89 85       	ldd	r24, Y+9	; 0x09
    161e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	2c f4       	brge	.+10     	; 0x163a <firstTimeOpeningNewSystem+0x74>
		__ticks = 1;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9e 83       	std	Y+6, r25	; 0x06
    1636:	8d 83       	std	Y+5, r24	; 0x05
    1638:	3f c0       	rjmp	.+126    	; 0x16b8 <firstTimeOpeningNewSystem+0xf2>
	else if (__tmp > 65535)
    163a:	6f 81       	ldd	r22, Y+7	; 0x07
    163c:	78 85       	ldd	r23, Y+8	; 0x08
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	3f ef       	ldi	r19, 0xFF	; 255
    1646:	4f e7       	ldi	r20, 0x7F	; 127
    1648:	57 e4       	ldi	r21, 0x47	; 71
    164a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    164e:	18 16       	cp	r1, r24
    1650:	4c f5       	brge	.+82     	; 0x16a4 <firstTimeOpeningNewSystem+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 e2       	ldi	r20, 0x20	; 32
    1660:	51 e4       	ldi	r21, 0x41	; 65
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9e 83       	std	Y+6, r25	; 0x06
    1678:	8d 83       	std	Y+5, r24	; 0x05
    167a:	0f c0       	rjmp	.+30     	; 0x169a <firstTimeOpeningNewSystem+0xd4>
    167c:	88 ec       	ldi	r24, 0xC8	; 200
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <firstTimeOpeningNewSystem+0xc2>
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	69 f7       	brne	.-38     	; 0x167c <firstTimeOpeningNewSystem+0xb6>
    16a2:	14 c0       	rjmp	.+40     	; 0x16cc <firstTimeOpeningNewSystem+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <firstTimeOpeningNewSystem+0xfe>
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	EEPROM_Second_Address_Value = UART_receiveByte();
    16cc:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    16d0:	88 8b       	std	Y+16, r24	; 0x10
	if(EEPROM_First_Address_Value==0 && (EEPROM_Second_Address_Value))
    16d2:	89 89       	ldd	r24, Y+17	; 0x11
    16d4:	88 23       	and	r24, r24
    16d6:	29 f4       	brne	.+10     	; 0x16e2 <firstTimeOpeningNewSystem+0x11c>
    16d8:	88 89       	ldd	r24, Y+16	; 0x10
    16da:	88 23       	and	r24, r24
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <firstTimeOpeningNewSystem+0x11c>
	{
		Indicator=0;
    16de:	1f 86       	std	Y+15, r1	; 0x0f
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <firstTimeOpeningNewSystem+0x120>
	}
	else
	{
		Indicator=1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	8f 87       	std	Y+15, r24	; 0x0f
	}
	if(Indicator)
    16e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <firstTimeOpeningNewSystem+0x12a>
	{
		sendNewPassword();
    16ec:	0e 94 af 05 	call	0xb5e	; 0xb5e <sendNewPassword>
	}
}
    16f0:	61 96       	adiw	r28, 0x11	; 17
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <myDelay>:
 *
 * 	returns:
 * 		no returns(void)
 */
void myDelay(uint8 a_delay)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	0f 92       	push	r0
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_resume();
    170e:	0e 94 ae 11 	call	0x235c	; 0x235c <TIMER1_resume>
	oneMinuteCounter=0;
    1712:	10 92 96 01 	sts	0x0196, r1
	while(oneMinuteCounter < a_delay);
    1716:	90 91 96 01 	lds	r25, 0x0196
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	98 17       	cp	r25, r24
    171e:	d8 f3       	brcs	.-10     	; 0x1716 <myDelay+0x14>
	oneMinuteCounter=0;
    1720:	10 92 96 01 	sts	0x0196, r1
	TIMER1_stop();
    1724:	0e 94 a0 11 	call	0x2340	; 0x2340 <TIMER1_stop>
}
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <main>:
 *      Author: ahmed
 */

#include "HMI_Application.h"

int main(void){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	2d 97       	sbiw	r28, 0x0d	; 13
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
	 * 2- Data size: 	  Five , Six , Seven , Eight
	 * 3- Parity: 		  Disabled , Even , Odd
	 * 4- Stop bits:	  One ,  Two
	 * 5- Baude rate
	 */
	UART_Configurations UART_config={Double,Eight,Disabled,One,9600};
    1744:	ce 01       	movw	r24, r28
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	9a 87       	std	Y+10, r25	; 0x0a
    174a:	89 87       	std	Y+9, r24	; 0x09
    174c:	ed e8       	ldi	r30, 0x8D	; 141
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	fc 87       	std	Y+12, r31	; 0x0c
    1752:	eb 87       	std	Y+11, r30	; 0x0b
    1754:	f8 e0       	ldi	r31, 0x08	; 8
    1756:	fd 87       	std	Y+13, r31	; 0x0d
    1758:	eb 85       	ldd	r30, Y+11	; 0x0b
    175a:	fc 85       	ldd	r31, Y+12	; 0x0c
    175c:	00 80       	ld	r0, Z
    175e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1760:	9c 85       	ldd	r25, Y+12	; 0x0c
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	9c 87       	std	Y+12, r25	; 0x0c
    1766:	8b 87       	std	Y+11, r24	; 0x0b
    1768:	e9 85       	ldd	r30, Y+9	; 0x09
    176a:	fa 85       	ldd	r31, Y+10	; 0x0a
    176c:	00 82       	st	Z, r0
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	9a 87       	std	Y+10, r25	; 0x0a
    1776:	89 87       	std	Y+9, r24	; 0x09
    1778:	9d 85       	ldd	r25, Y+13	; 0x0d
    177a:	91 50       	subi	r25, 0x01	; 1
    177c:	9d 87       	std	Y+13, r25	; 0x0d
    177e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1780:	ee 23       	and	r30, r30
    1782:	51 f7       	brne	.-44     	; 0x1758 <main+0x28>
	UART_init(&UART_config);		/*initializing the UART module using the configuration structure*/
    1784:	ce 01       	movw	r24, r28
    1786:	01 96       	adiw	r24, 0x01	; 1
    1788:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <UART_init>
	UART_sendByte(M2_READY);		/*send a byte to enable the two micros synchronization*/
    178c:	80 ea       	ldi	r24, 0xA0	; 160
    178e:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
	LCD_init();						/*initiate the LCD*/
    1792:	0e 94 8d 0c 	call	0x191a	; 0x191a <LCD_init>
	/*Function used to interact with the user only at the first time after buying a the new system(Get the first time password)*/
	firstTimeOpeningNewSystem();
    1796:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <firstTimeOpeningNewSystem>
	SET_BIT(SREG,7);					/*Enable global interrupts*/
    179a:	af e5       	ldi	r26, 0x5F	; 95
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ef e5       	ldi	r30, 0x5F	; 95
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	80 68       	ori	r24, 0x80	; 128
    17a6:	8c 93       	st	X, r24
	TIMER1_init(&Timer1_Routine);		/*initialize the timer and define the function that will be called at the call back request*/
    17a8:	83 ea       	ldi	r24, 0xA3	; 163
    17aa:	95 e0       	ldi	r25, 0x05	; 5
    17ac:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <TIMER1_init>
	TIMER1_stop();						/*Pause the timer until we need to resume it again */
    17b0:	0e 94 a0 11 	call	0x2340	; 0x2340 <TIMER1_stop>


	while(1)
	{
		userInteractions();		/*The function used to perform all the operations of the HMI*/
    17b4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <userInteractions>
    17b8:	fd cf       	rjmp	.-6      	; 0x17b4 <main+0x84>

000017ba <KEYBAD_GetPressedKey>:
 *
 * 	returns:
 * 		uint8 number: the pressed number
 *
 */
uint8 KEYBAD_GetPressedKey(void){
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <KEYBAD_GetPressedKey+0x6>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	while(1)
	{
		for(col=0 ; col < NUMBER_OF_COLUMNS ; col++)
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	4d c0       	rjmp	.+154    	; 0x1862 <KEYBAD_GetPressedKey+0xa8>
		{
			#if(CONNECTION_MODE==1)  /* Internal PULL UP*/
				KEYPAD_PORT_DIR= (0b00010000<<col);
    17c8:	ea e3       	ldi	r30, 0x3A	; 58
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	80 e1       	ldi	r24, 0x10	; 16
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <KEYBAD_GetPressedKey+0x22>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	2a 95       	dec	r18
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <KEYBAD_GetPressedKey+0x1e>
    17e0:	80 83       	st	Z, r24
				KEYPAD_PORT_OUT= ~(0b00010000<<col);
    17e2:	eb e3       	ldi	r30, 0x3B	; 59
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	80 e1       	ldi	r24, 0x10	; 16
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <KEYBAD_GetPressedKey+0x3e>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <KEYBAD_GetPressedKey+0x3a>
    17fc:	80 95       	com	r24
    17fe:	80 83       	st	Z, r24
			#elif(CONNECTION_MODE==3) /* PULL DOWN */
				KEYPAD_PORT_DIR= (0b00010000<<col);
				KEYPAD_PORT_OUT= (0b00010000<<col);
			#endif

			for(row=0 ;  row < NUMBER_OF_ROWS ; row++)
    1800:	1a 82       	std	Y+2, r1	; 0x02
    1802:	29 c0       	rjmp	.+82     	; 0x1856 <KEYBAD_GetPressedKey+0x9c>
						#elif(NUMBER_OF_COLUMNS==4)
							return (keybad_4x4_adjustKeyNumber(row*4+col+1));
						#endif
					}
				#else
					if(BIT_IS_CLEARED(KEYPAD_PORT_IN,row))
    1804:	e9 e3       	ldi	r30, 0x39	; 57
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a9 01       	movw	r20, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <KEYBAD_GetPressedKey+0x62>
    1818:	55 95       	asr	r21
    181a:	47 95       	ror	r20
    181c:	8a 95       	dec	r24
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <KEYBAD_GetPressedKey+0x5e>
    1820:	ca 01       	movw	r24, r20
    1822:	81 70       	andi	r24, 0x01	; 1
    1824:	90 70       	andi	r25, 0x00	; 0
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	99 f4       	brne	.+38     	; 0x1850 <KEYBAD_GetPressedKey+0x96>
					{
						#if(NUMBER_OF_COLUMNS==3)
							return keybad_4x3_adjustKeyNumber((row*NUMBER_OF_COLUMNS)+col+1);
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	c9 01       	movw	r24, r18
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	82 0f       	add	r24, r18
    1838:	93 1f       	adc	r25, r19
    183a:	98 2f       	mov	r25, r24
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	89 0f       	add	r24, r25
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	0e 94 36 0c 	call	0x186c	; 0x186c <keybad_4x3_adjustKeyNumber>
				#endif
			}
		}
	}

}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret
			#elif(CONNECTION_MODE==3) /* PULL DOWN */
				KEYPAD_PORT_DIR= (0b00010000<<col);
				KEYPAD_PORT_OUT= (0b00010000<<col);
			#endif

			for(row=0 ;  row < NUMBER_OF_ROWS ; row++)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	8a 83       	std	Y+2, r24	; 0x02
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	a0 f2       	brcs	.-88     	; 0x1804 <KEYBAD_GetPressedKey+0x4a>
 */
uint8 KEYBAD_GetPressedKey(void){
	uint8 row,col;
	while(1)
	{
		for(col=0 ; col < NUMBER_OF_COLUMNS ; col++)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	08 f4       	brcc	.+2      	; 0x186a <KEYBAD_GetPressedKey+0xb0>
    1868:	af cf       	rjmp	.-162    	; 0x17c8 <KEYBAD_GetPressedKey+0xe>
    186a:	ac cf       	rjmp	.-168    	; 0x17c4 <KEYBAD_GetPressedKey+0xa>

0000186c <keybad_4x3_adjustKeyNumber>:
 *
 * 	returns:
 * 		uint8 number: The corrected number
 *
 */
	static uint8 keybad_4x3_adjustKeyNumber(uint8 a_Button_Number){
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <keybad_4x3_adjustKeyNumber+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <keybad_4x3_adjustKeyNumber+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
		switch(a_Button_Number)
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3c 83       	std	Y+4, r19	; 0x04
    1882:	2b 83       	std	Y+3, r18	; 0x03
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	8a 30       	cpi	r24, 0x0A	; 10
    188a:	91 05       	cpc	r25, r1
    188c:	81 f0       	breq	.+32     	; 0x18ae <keybad_4x3_adjustKeyNumber+0x42>
    188e:	2b 81       	ldd	r18, Y+3	; 0x03
    1890:	3c 81       	ldd	r19, Y+4	; 0x04
    1892:	2a 30       	cpi	r18, 0x0A	; 10
    1894:	31 05       	cpc	r19, r1
    1896:	9c f0       	brlt	.+38     	; 0x18be <keybad_4x3_adjustKeyNumber+0x52>
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	8b 30       	cpi	r24, 0x0B	; 11
    189e:	91 05       	cpc	r25, r1
    18a0:	49 f0       	breq	.+18     	; 0x18b4 <keybad_4x3_adjustKeyNumber+0x48>
    18a2:	2b 81       	ldd	r18, Y+3	; 0x03
    18a4:	3c 81       	ldd	r19, Y+4	; 0x04
    18a6:	2c 30       	cpi	r18, 0x0C	; 12
    18a8:	31 05       	cpc	r19, r1
    18aa:	31 f0       	breq	.+12     	; 0x18b8 <keybad_4x3_adjustKeyNumber+0x4c>
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <keybad_4x3_adjustKeyNumber+0x52>
		{
		case 10:
			return '*';
    18ae:	3a e2       	ldi	r19, 0x2A	; 42
    18b0:	3a 83       	std	Y+2, r19	; 0x02
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <keybad_4x3_adjustKeyNumber+0x56>
			break;
		case 11:
			return 0;
    18b4:	1a 82       	std	Y+2, r1	; 0x02
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <keybad_4x3_adjustKeyNumber+0x56>
			break;
		case 12:
			return '#';
    18b8:	83 e2       	ldi	r24, 0x23	; 35
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <keybad_4x3_adjustKeyNumber+0x56>
			break;
		default:
			return a_Button_Number;
    18be:	99 81       	ldd	r25, Y+1	; 0x01
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
		}
	}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <stop>:
 *
 * 	returns:
 * 		No returns, void
 *
 */
void stop(void){
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	uint8 row;
	while(1)
	{
			for(row=0 ;  row < NUMBER_OF_ROWS ; row++)
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	16 c0       	rjmp	.+44     	; 0x190c <stop+0x3a>
			{
					while(BIT_IS_CLEARED(KEYPAD_PORT_IN,row));
    18e0:	e9 e3       	ldi	r30, 0x39	; 57
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <stop+0x26>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <stop+0x22>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	69 f3       	breq	.-38     	; 0x18e0 <stop+0xe>
 */
void stop(void){
	uint8 row;
	while(1)
	{
			for(row=0 ;  row < NUMBER_OF_ROWS ; row++)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	38 f3       	brcs	.-50     	; 0x18e0 <stop+0xe>
			{
					while(BIT_IS_CLEARED(KEYPAD_PORT_IN,row));
			}
			return;
	}
}
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <LCD_init>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the LCD is initialized
 */
void LCD_init(void){
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62

	LCD_CTRL_PORT_DIR |=(1<<RS) | (1<<RW) | (1<<E);
    1922:	a7 e3       	ldi	r26, 0x37	; 55
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e7 e3       	ldi	r30, 0x37	; 55
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	80 67       	ori	r24, 0x70	; 112
    192e:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |=0x0f;
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); 			/* Switch LCD to bits mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
	#elif(DATA_BITS_MODE==8)
		LCD_DATA_PORT_DIR=0xff;
    1930:	e4 e3       	ldi	r30, 0x34	; 52
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_EIGHT_BITS_MODE);		/* Enable the 2lines and 8bit mode */
    1938:	88 e3       	ldi	r24, 0x38	; 56
    193a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
	#endif
	LCD_sendCommand(CURSOR_OFF);			/* Cursor off */
    193e:	8c e0       	ldi	r24, 0x0C	; 12
    1940:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);			/* clear_display*/
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
}
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <LCD_sendCommand>:
 * 	returns:
 * 		no returns(void), but the LCD will receive the required command
 */

void LCD_sendCommand(uint8 a_command)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	e9 97       	sbiw	r28, 0x39	; 57
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);		/* Clears RS to send Command*/
    1966:	a8 e3       	ldi	r26, 0x38	; 56
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e8 e3       	ldi	r30, 0x38	; 56
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	8f 7e       	andi	r24, 0xEF	; 239
    1972:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);		/* Clears the Read/write pin to write*/
    1974:	a8 e3       	ldi	r26, 0x38	; 56
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e8 e3       	ldi	r30, 0x38	; 56
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7d       	andi	r24, 0xDF	; 223
    1980:	8c 93       	st	X, r24
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	8d ab       	std	Y+53, r24	; 0x35
    198c:	9e ab       	std	Y+54, r25	; 0x36
    198e:	af ab       	std	Y+55, r26	; 0x37
    1990:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6d a9       	ldd	r22, Y+53	; 0x35
    1994:	7e a9       	ldd	r23, Y+54	; 0x36
    1996:	8f a9       	ldd	r24, Y+55	; 0x37
    1998:	98 ad       	ldd	r25, Y+56	; 0x38
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	89 ab       	std	Y+49, r24	; 0x31
    19ac:	9a ab       	std	Y+50, r25	; 0x32
    19ae:	ab ab       	std	Y+51, r26	; 0x33
    19b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19b2:	69 a9       	ldd	r22, Y+49	; 0x31
    19b4:	7a a9       	ldd	r23, Y+50	; 0x32
    19b6:	8b a9       	ldd	r24, Y+51	; 0x33
    19b8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <LCD_sendCommand+0x84>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	98 ab       	std	Y+48, r25	; 0x30
    19d0:	8f a7       	std	Y+47, r24	; 0x2f
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    19d4:	69 a9       	ldd	r22, Y+49	; 0x31
    19d6:	7a a9       	ldd	r23, Y+50	; 0x32
    19d8:	8b a9       	ldd	r24, Y+51	; 0x33
    19da:	9c a9       	ldd	r25, Y+52	; 0x34
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6d a9       	ldd	r22, Y+53	; 0x35
    19ee:	7e a9       	ldd	r23, Y+54	; 0x36
    19f0:	8f a9       	ldd	r24, Y+55	; 0x37
    19f2:	98 ad       	ldd	r25, Y+56	; 0x38
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	98 ab       	std	Y+48, r25	; 0x30
    1a12:	8f a7       	std	Y+47, r24	; 0x2f
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_sendCommand+0xe4>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e a7       	std	Y+46, r25	; 0x2e
    1a1c:	8d a7       	std	Y+45, r24	; 0x2d
    1a1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a20:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_sendCommand+0xd2>
    1a26:	9e a7       	std	Y+46, r25	; 0x2e
    1a28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a36:	98 a9       	ldd	r25, Y+48	; 0x30
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_sendCommand+0xc6>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a40:	7a a9       	ldd	r23, Y+50	; 0x32
    1a42:	8b a9       	ldd	r24, Y+51	; 0x33
    1a44:	9c a9       	ldd	r25, Y+52	; 0x34
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	98 ab       	std	Y+48, r25	; 0x30
    1a50:	8f a7       	std	Y+47, r24	; 0x2f
    1a52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a54:	98 a9       	ldd	r25, Y+48	; 0x30
    1a56:	9c a7       	std	Y+44, r25	; 0x2c
    1a58:	8b a7       	std	Y+43, r24	; 0x2b
    1a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_sendCommand+0x10e>
    1a62:	9c a7       	std	Y+44, r25	; 0x2c
    1a64:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);						/* should be 1 micro but the hardware is not efficent so make it ms */
	SET_BIT(LCD_CTRL_PORT,E);			/* Enables the LCD*/
    1a66:	a8 e3       	ldi	r26, 0x38	; 56
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e8 e3       	ldi	r30, 0x38	; 56
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	80 64       	ori	r24, 0x40	; 64
    1a72:	8c 93       	st	X, r24
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e8       	ldi	r26, 0x80	; 128
    1a7a:	bf e3       	ldi	r27, 0x3F	; 63
    1a7c:	8f a3       	std	Y+39, r24	; 0x27
    1a7e:	98 a7       	std	Y+40, r25	; 0x28
    1a80:	a9 a7       	std	Y+41, r26	; 0x29
    1a82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	6f a1       	ldd	r22, Y+39	; 0x27
    1a86:	78 a5       	ldd	r23, Y+40	; 0x28
    1a88:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a ef       	ldi	r20, 0xFA	; 250
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8b a3       	std	Y+35, r24	; 0x23
    1a9e:	9c a3       	std	Y+36, r25	; 0x24
    1aa0:	ad a3       	std	Y+37, r26	; 0x25
    1aa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <LCD_sendCommand+0x176>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9a a3       	std	Y+34, r25	; 0x22
    1ac2:	89 a3       	std	Y+33, r24	; 0x21
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aca:	8d a1       	ldd	r24, Y+37	; 0x25
    1acc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	4c f5       	brge	.+82     	; 0x1b30 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9a a3       	std	Y+34, r25	; 0x22
    1b04:	89 a3       	std	Y+33, r24	; 0x21
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <LCD_sendCommand+0x1d6>
    1b08:	88 ec       	ldi	r24, 0xC8	; 200
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	98 a3       	std	Y+32, r25	; 0x20
    1b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b12:	98 a1       	ldd	r25, Y+32	; 0x20
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_sendCommand+0x1c4>
    1b18:	98 a3       	std	Y+32, r25	; 0x20
    1b1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	9a a3       	std	Y+34, r25	; 0x22
    1b24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	89 a1       	ldd	r24, Y+33	; 0x21
    1b28:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <LCD_sendCommand+0x1b8>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	6b a1       	ldd	r22, Y+35	; 0x23
    1b32:	7c a1       	ldd	r23, Y+36	; 0x24
    1b34:	8d a1       	ldd	r24, Y+37	; 0x25
    1b36:	9e a1       	ldd	r25, Y+38	; 0x26
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9a a3       	std	Y+34, r25	; 0x22
    1b42:	89 a3       	std	Y+33, r24	; 0x21
    1b44:	89 a1       	ldd	r24, Y+33	; 0x21
    1b46:	9a a1       	ldd	r25, Y+34	; 0x22
    1b48:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_sendCommand+0x200>
    1b54:	9e 8f       	std	Y+30, r25	; 0x1e
    1b56:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);			/* Disable the LCD*/
		_delay_ms(1);
	#elif(DATA_BITS_MODE==8)
		LCD_DATA_PORT=a_command;	/* Send a specific command to the LCD */
    1b58:	e5 e3       	ldi	r30, 0x35	; 53
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b5e:	80 83       	st	Z, r24
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	89 8f       	std	Y+25, r24	; 0x19
    1b6a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b6c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	69 8d       	ldd	r22, Y+25	; 0x19
    1b72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a ef       	ldi	r20, 0xFA	; 250
    1b7e:	54 e4       	ldi	r21, 0x44	; 68
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8d 8b       	std	Y+21, r24	; 0x15
    1b8a:	9e 8b       	std	Y+22, r25	; 0x16
    1b8c:	af 8b       	std	Y+23, r26	; 0x17
    1b8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b90:	6d 89       	ldd	r22, Y+21	; 0x15
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <LCD_sendCommand+0x262>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1bb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	69 8d       	ldd	r22, Y+25	; 0x19
    1bcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9c 8b       	std	Y+20, r25	; 0x14
    1bf0:	8b 8b       	std	Y+19, r24	; 0x13
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <LCD_sendCommand+0x2c2>
    1bf4:	88 ec       	ldi	r24, 0xC8	; 200
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9a 8b       	std	Y+18, r25	; 0x12
    1bfa:	89 8b       	std	Y+17, r24	; 0x11
    1bfc:	89 89       	ldd	r24, Y+17	; 0x11
    1bfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_sendCommand+0x2b0>
    1c04:	9a 8b       	std	Y+18, r25	; 0x12
    1c06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9c 8b       	std	Y+20, r25	; 0x14
    1c10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <LCD_sendCommand+0x2a4>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c20:	8f 89       	ldd	r24, Y+23	; 0x17
    1c22:	98 8d       	ldd	r25, Y+24	; 0x18
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	8b 8b       	std	Y+19, r24	; 0x13
    1c30:	8b 89       	ldd	r24, Y+19	; 0x13
    1c32:	9c 89       	ldd	r25, Y+20	; 0x14
    1c34:	98 8b       	std	Y+16, r25	; 0x10
    1c36:	8f 87       	std	Y+15, r24	; 0x0f
    1c38:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c3a:	98 89       	ldd	r25, Y+16	; 0x10
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_sendCommand+0x2ec>
    1c40:	98 8b       	std	Y+16, r25	; 0x10
    1c42:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);			/* Disable the LCD*/
    1c44:	a8 e3       	ldi	r26, 0x38	; 56
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 7b       	andi	r24, 0xBF	; 191
    1c50:	8c 93       	st	X, r24
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e8       	ldi	r26, 0x80	; 128
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	8b 87       	std	Y+11, r24	; 0x0b
    1c5c:	9c 87       	std	Y+12, r25	; 0x0c
    1c5e:	ad 87       	std	Y+13, r26	; 0x0d
    1c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	54 e4       	ldi	r21, 0x44	; 68
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8f 83       	std	Y+7, r24	; 0x07
    1c7c:	98 87       	std	Y+8, r25	; 0x08
    1c7e:	a9 87       	std	Y+9, r26	; 0x09
    1c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c82:	6f 81       	ldd	r22, Y+7	; 0x07
    1c84:	78 85       	ldd	r23, Y+8	; 0x08
    1c86:	89 85       	ldd	r24, Y+9	; 0x09
    1c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_sendCommand+0x354>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_sendCommand+0x3b4>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	9c 83       	std	Y+4, r25	; 0x04
    1cec:	8b 83       	std	Y+3, r24	; 0x03
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_sendCommand+0x3a2>
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9e 83       	std	Y+6, r25	; 0x06
    1d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_sendCommand+0x396>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_sendCommand+0x3de>
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif
}
    1d36:	e9 96       	adiw	r28, 0x39	; 57
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <LCD_displayCharacter>:
 *
 * 	returns:
 * 		no returns(void), but the LCD will receive the required character and display it
 */

void LCD_displayCharacter(uint8 a_data){
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	e9 97       	sbiw	r28, 0x39	; 57
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	89 af       	std	Y+57, r24	; 0x39

	SET_BIT(LCD_CTRL_PORT,RS);		/* Set RS to send Data*/
    1d5e:	a8 e3       	ldi	r26, 0x38	; 56
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e8 e3       	ldi	r30, 0x38	; 56
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 61       	ori	r24, 0x10	; 16
    1d6a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);		/* Clears the Read/write pin to write*/
    1d6c:	a8 e3       	ldi	r26, 0x38	; 56
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e8 e3       	ldi	r30, 0x38	; 56
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 7d       	andi	r24, 0xDF	; 223
    1d78:	8c 93       	st	X, r24
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	8d ab       	std	Y+53, r24	; 0x35
    1d84:	9e ab       	std	Y+54, r25	; 0x36
    1d86:	af ab       	std	Y+55, r26	; 0x37
    1d88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d90:	98 ad       	ldd	r25, Y+56	; 0x38
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a ef       	ldi	r20, 0xFA	; 250
    1d98:	54 e4       	ldi	r21, 0x44	; 68
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	89 ab       	std	Y+49, r24	; 0x31
    1da4:	9a ab       	std	Y+50, r25	; 0x32
    1da6:	ab ab       	std	Y+51, r26	; 0x33
    1da8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1daa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dac:	7a a9       	ldd	r23, Y+50	; 0x32
    1dae:	8b a9       	ldd	r24, Y+51	; 0x33
    1db0:	9c a9       	ldd	r25, Y+52	; 0x34
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_displayCharacter+0x84>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dce:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6d a9       	ldd	r22, Y+53	; 0x35
    1de6:	7e a9       	ldd	r23, Y+54	; 0x36
    1de8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dea:	98 ad       	ldd	r25, Y+56	; 0x38
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_displayCharacter+0xe4>
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e a7       	std	Y+46, r25	; 0x2e
    1e14:	8d a7       	std	Y+45, r24	; 0x2d
    1e16:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e18:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_displayCharacter+0xd2>
    1e1e:	9e a7       	std	Y+46, r25	; 0x2e
    1e20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_displayCharacter+0xc6>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	69 a9       	ldd	r22, Y+49	; 0x31
    1e38:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
    1e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_displayCharacter+0x10e>
    1e5a:	9c a7       	std	Y+44, r25	; 0x2c
    1e5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);						/* should be 1 micro but the hardware is not efficent so make it ms */
	SET_BIT(LCD_CTRL_PORT,E);			/* Enables the LCD*/
    1e5e:	a8 e3       	ldi	r26, 0x38	; 56
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e8 e3       	ldi	r30, 0x38	; 56
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	80 64       	ori	r24, 0x40	; 64
    1e6a:	8c 93       	st	X, r24
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e8       	ldi	r26, 0x80	; 128
    1e72:	bf e3       	ldi	r27, 0x3F	; 63
    1e74:	8f a3       	std	Y+39, r24	; 0x27
    1e76:	98 a7       	std	Y+40, r25	; 0x28
    1e78:	a9 a7       	std	Y+41, r26	; 0x29
    1e7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e80:	89 a5       	ldd	r24, Y+41	; 0x29
    1e82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4a ef       	ldi	r20, 0xFA	; 250
    1e8a:	54 e4       	ldi	r21, 0x44	; 68
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	8b a3       	std	Y+35, r24	; 0x23
    1e96:	9c a3       	std	Y+36, r25	; 0x24
    1e98:	ad a3       	std	Y+37, r26	; 0x25
    1e9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e8       	ldi	r20, 0x80	; 128
    1eaa:	5f e3       	ldi	r21, 0x3F	; 63
    1eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb0:	88 23       	and	r24, r24
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <LCD_displayCharacter+0x176>
		__ticks = 1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9a a3       	std	Y+34, r25	; 0x22
    1eba:	89 a3       	std	Y+33, r24	; 0x21
    1ebc:	3f c0       	rjmp	.+126    	; 0x1f3c <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1ebe:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	3f ef       	ldi	r19, 0xFF	; 255
    1eca:	4f e7       	ldi	r20, 0x7F	; 127
    1ecc:	57 e4       	ldi	r21, 0x47	; 71
    1ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	4c f5       	brge	.+82     	; 0x1f28 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed8:	78 a5       	ldd	r23, Y+40	; 0x28
    1eda:	89 a5       	ldd	r24, Y+41	; 0x29
    1edc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e2       	ldi	r20, 0x20	; 32
    1ee4:	51 e4       	ldi	r21, 0x41	; 65
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	9a a3       	std	Y+34, r25	; 0x22
    1efc:	89 a3       	std	Y+33, r24	; 0x21
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <LCD_displayCharacter+0x1d6>
    1f00:	88 ec       	ldi	r24, 0xC8	; 200
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	98 a3       	std	Y+32, r25	; 0x20
    1f06:	8f 8f       	std	Y+31, r24	; 0x1f
    1f08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f0a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_displayCharacter+0x1c4>
    1f10:	98 a3       	std	Y+32, r25	; 0x20
    1f12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	89 a1       	ldd	r24, Y+33	; 0x21
    1f16:	9a a1       	ldd	r25, Y+34	; 0x22
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	9a a3       	std	Y+34, r25	; 0x22
    1f1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f20:	9a a1       	ldd	r25, Y+34	; 0x22
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	69 f7       	brne	.-38     	; 0x1f00 <LCD_displayCharacter+0x1b8>
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f28:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9a a3       	std	Y+34, r25	; 0x22
    1f3a:	89 a3       	std	Y+33, r24	; 0x21
    1f3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f40:	9e 8f       	std	Y+30, r25	; 0x1e
    1f42:	8d 8f       	std	Y+29, r24	; 0x1d
    1f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_displayCharacter+0x200>
    1f4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4e:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);			/* Disable the LCD*/
		_delay_ms(1);
	#elif(DATA_BITS_MODE==8)
		LCD_DATA_PORT=a_data;	/* Send a specific command to the LCD */
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	89 ad       	ldd	r24, Y+57	; 0x39
    1f56:	80 83       	st	Z, r24
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 e8       	ldi	r26, 0x80	; 128
    1f5e:	bf e3       	ldi	r27, 0x3F	; 63
    1f60:	89 8f       	std	Y+25, r24	; 0x19
    1f62:	9a 8f       	std	Y+26, r25	; 0x1a
    1f64:	ab 8f       	std	Y+27, r26	; 0x1b
    1f66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a ef       	ldi	r20, 0xFA	; 250
    1f76:	54 e4       	ldi	r21, 0x44	; 68
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	8d 8b       	std	Y+21, r24	; 0x15
    1f82:	9e 8b       	std	Y+22, r25	; 0x16
    1f84:	af 8b       	std	Y+23, r26	; 0x17
    1f86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f88:	6d 89       	ldd	r22, Y+21	; 0x15
    1f8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <LCD_displayCharacter+0x262>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1faa:	6d 89       	ldd	r22, Y+21	; 0x15
    1fac:	7e 89       	ldd	r23, Y+22	; 0x16
    1fae:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9c 8b       	std	Y+20, r25	; 0x14
    1fe8:	8b 8b       	std	Y+19, r24	; 0x13
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_displayCharacter+0x2c2>
    1fec:	88 ec       	ldi	r24, 0xC8	; 200
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9a 8b       	std	Y+18, r25	; 0x12
    1ff2:	89 8b       	std	Y+17, r24	; 0x11
    1ff4:	89 89       	ldd	r24, Y+17	; 0x11
    1ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_displayCharacter+0x2b0>
    1ffc:	9a 8b       	std	Y+18, r25	; 0x12
    1ffe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8b 89       	ldd	r24, Y+19	; 0x13
    2002:	9c 89       	ldd	r25, Y+20	; 0x14
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	9c 8b       	std	Y+20, r25	; 0x14
    2008:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8b 89       	ldd	r24, Y+19	; 0x13
    200c:	9c 89       	ldd	r25, Y+20	; 0x14
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <LCD_displayCharacter+0x2a4>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9c 8b       	std	Y+20, r25	; 0x14
    2026:	8b 8b       	std	Y+19, r24	; 0x13
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	98 8b       	std	Y+16, r25	; 0x10
    202e:	8f 87       	std	Y+15, r24	; 0x0f
    2030:	8f 85       	ldd	r24, Y+15	; 0x0f
    2032:	98 89       	ldd	r25, Y+16	; 0x10
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_displayCharacter+0x2ec>
    2038:	98 8b       	std	Y+16, r25	; 0x10
    203a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);			/* Disable the LCD*/
    203c:	a8 e3       	ldi	r26, 0x38	; 56
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e8 e3       	ldi	r30, 0x38	; 56
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7b       	andi	r24, 0xBF	; 191
    2048:	8c 93       	st	X, r24
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	8b 87       	std	Y+11, r24	; 0x0b
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	ad 87       	std	Y+13, r26	; 0x0d
    2058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8f 83       	std	Y+7, r24	; 0x07
    2074:	98 87       	std	Y+8, r25	; 0x08
    2076:	a9 87       	std	Y+9, r26	; 0x09
    2078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <LCD_displayCharacter+0x354>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	3f c0       	rjmp	.+126    	; 0x211a <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_displayCharacter+0x3b4>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_displayCharacter+0x3a2>
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_displayCharacter+0x396>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_displayCharacter+0x3de>
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif
}
    212e:	e9 96       	adiw	r28, 0x39	; 57
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <LCD_displayString>:
 *
 * 	returns:
 * 		no returns(void), but the LCD will receive the required string and display it
 */

void LCD_displayString(const char *a_str){
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <LCD_displayString+0x6>
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <LCD_displayString+0x24>

	while(*a_str !='\0')
	{
		LCD_displayCharacter(*a_str);
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	80 81       	ld	r24, Z
    2156:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <LCD_displayCharacter>
		a_str++;
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
 * 		no returns(void), but the LCD will receive the required string and display it
 */

void LCD_displayString(const char *a_str){

	while(*a_str !='\0')
    2164:	e9 81       	ldd	r30, Y+1	; 0x01
    2166:	fa 81       	ldd	r31, Y+2	; 0x02
    2168:	80 81       	ld	r24, Z
    216a:	88 23       	and	r24, r24
    216c:	89 f7       	brne	.-30     	; 0x2150 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*a_str);
		a_str++;
	}
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <LCD_goToRowColumn>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the LCD cursor will move to the required location
 */
void LCD_goToRowColumn(uint8 a_row,uint8 a_col){
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <LCD_goToRowColumn+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <LCD_goToRowColumn+0x8>
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	8a 83       	std	Y+2, r24	; 0x02
    2188:	6b 83       	std	Y+3, r22	; 0x03

	uint8 address;		/* Address of the required location */
	switch(a_row)
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	3d 83       	std	Y+5, r19	; 0x05
    2192:	2c 83       	std	Y+4, r18	; 0x04
    2194:	8c 81       	ldd	r24, Y+4	; 0x04
    2196:	9d 81       	ldd	r25, Y+5	; 0x05
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	91 05       	cpc	r25, r1
    219c:	c1 f0       	breq	.+48     	; 0x21ce <LCD_goToRowColumn+0x56>
    219e:	2c 81       	ldd	r18, Y+4	; 0x04
    21a0:	3d 81       	ldd	r19, Y+5	; 0x05
    21a2:	22 30       	cpi	r18, 0x02	; 2
    21a4:	31 05       	cpc	r19, r1
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <LCD_goToRowColumn+0x3a>
    21a8:	8c 81       	ldd	r24, Y+4	; 0x04
    21aa:	9d 81       	ldd	r25, Y+5	; 0x05
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	61 f0       	breq	.+24     	; 0x21c8 <LCD_goToRowColumn+0x50>
    21b0:	19 c0       	rjmp	.+50     	; 0x21e4 <LCD_goToRowColumn+0x6c>
    21b2:	2c 81       	ldd	r18, Y+4	; 0x04
    21b4:	3d 81       	ldd	r19, Y+5	; 0x05
    21b6:	22 30       	cpi	r18, 0x02	; 2
    21b8:	31 05       	cpc	r19, r1
    21ba:	69 f0       	breq	.+26     	; 0x21d6 <LCD_goToRowColumn+0x5e>
    21bc:	8c 81       	ldd	r24, Y+4	; 0x04
    21be:	9d 81       	ldd	r25, Y+5	; 0x05
    21c0:	83 30       	cpi	r24, 0x03	; 3
    21c2:	91 05       	cpc	r25, r1
    21c4:	61 f0       	breq	.+24     	; 0x21de <LCD_goToRowColumn+0x66>
    21c6:	0e c0       	rjmp	.+28     	; 0x21e4 <LCD_goToRowColumn+0x6c>
	{
	case 0:
		address=0x00+a_col;		/*row 0, addresses from 0x00 to 0x0f */
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	0b c0       	rjmp	.+22     	; 0x21e4 <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		address=0x40+a_col;		/*row 1, addresses from 0x40 to 0x4f */
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	80 5c       	subi	r24, 0xC0	; 192
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		address=0x10+a_col;		/*row 2, addresses from 0x10 to 0x1f */
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	80 5f       	subi	r24, 0xF0	; 240
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		address=0x50+a_col;		/*row 3, addresses from 0x50 to 0x5f */
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	80 5b       	subi	r24, 0xB0	; 176
    21e2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(MOVE_CURSOR_LOCATION | address);
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	80 68       	ori	r24, 0x80	; 128
    21e8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_clearScreen>:
 *
 * 	returns:
 * 		no returns(void), but the LCD is cleared
 */

void LCD_clearScreen(void){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);			/* clear_display*/
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	0e 94 a8 0c 	call	0x1950	; 0x1950 <LCD_sendCommand>
	LCD_goToRowColumn(0,0);					/*Locating the cursor at the beginning*/
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
}
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <LCD_integerToString>:
 *
 * 	returns:
 * 		no returns(void), but the number is now a string
 */

void LCD_integerToString(sint16 a_data){
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	62 97       	sbiw	r28, 0x12	; 18
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	9a 8b       	std	Y+18, r25	; 0x12
    222e:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(a_data,buff,10);
    2230:	89 89       	ldd	r24, Y+17	; 0x11
    2232:	9a 89       	ldd	r25, Y+18	; 0x12
    2234:	9e 01       	movw	r18, r28
    2236:	2f 5f       	subi	r18, 0xFF	; 255
    2238:	3f 4f       	sbci	r19, 0xFF	; 255
    223a:	b9 01       	movw	r22, r18
    223c:	4a e0       	ldi	r20, 0x0A	; 10
    223e:	50 e0       	ldi	r21, 0x00	; 0
    2240:	0e 94 8b 13 	call	0x2716	; 0x2716 <itoa>
	LCD_displayString(buff);
    2244:	ce 01       	movw	r24, r28
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
}
    224c:	62 96       	adiw	r28, 0x12	; 18
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <LCD_displayStringRowColumn>:
 * 	returns:
 * 		no returns(void), but the LCD cursor will move to the required location and string will show in this location
 */

void LCD_displayStringRowColumn(uint8 a_row,uint8 a_col,const char *Str)
{
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	00 d0       	rcall	.+0      	; 0x2264 <LCD_displayStringRowColumn+0x6>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <LCD_displayStringRowColumn+0x8>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	6a 83       	std	Y+2, r22	; 0x02
    226e:	5c 83       	std	Y+4, r21	; 0x04
    2270:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(a_row,a_col); 		/* go to to the required LCD position */
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	6a 81       	ldd	r22, Y+2	; 0x02
    2276:	0e 94 bc 10 	call	0x2178	; 0x2178 <LCD_goToRowColumn>
	LCD_displayString(Str); 				/* display the string */
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	0e 94 a0 10 	call	0x2140	; 0x2140 <LCD_displayString>
}
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <__vector_8>:
/*A pointer to function that will carry the function address that will be called after the call back notification*/
static void(*volatile g_Timer1_CallBack)(void)=NULL;

/*Timer1 interrupt service routine*/
ISR(TIMER1_OVF_vect)
{
    2290:	1f 92       	push	r1
    2292:	0f 92       	push	r0
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	0f 92       	push	r0
    2298:	11 24       	eor	r1, r1
    229a:	2f 93       	push	r18
    229c:	3f 93       	push	r19
    229e:	4f 93       	push	r20
    22a0:	5f 93       	push	r21
    22a2:	6f 93       	push	r22
    22a4:	7f 93       	push	r23
    22a6:	8f 93       	push	r24
    22a8:	9f 93       	push	r25
    22aa:	af 93       	push	r26
    22ac:	bf 93       	push	r27
    22ae:	ef 93       	push	r30
    22b0:	ff 93       	push	r31
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_CallBack !=NULL){
    22ba:	80 91 97 01 	lds	r24, 0x0197
    22be:	90 91 98 01 	lds	r25, 0x0198
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <__vector_8+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_CallBack)();
    22c6:	e0 91 97 01 	lds	r30, 0x0197
    22ca:	f0 91 98 01 	lds	r31, 0x0198
    22ce:	09 95       	icall
	}
}
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	ff 91       	pop	r31
    22d6:	ef 91       	pop	r30
    22d8:	bf 91       	pop	r27
    22da:	af 91       	pop	r26
    22dc:	9f 91       	pop	r25
    22de:	8f 91       	pop	r24
    22e0:	7f 91       	pop	r23
    22e2:	6f 91       	pop	r22
    22e4:	5f 91       	pop	r21
    22e6:	4f 91       	pop	r20
    22e8:	3f 91       	pop	r19
    22ea:	2f 91       	pop	r18
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <TIMER1_init>:
 *
 * 	returns:
 * 		no returns(void), but the Timer1 is initialized
 */
void TIMER1_init(void(*const CallBack_ptr_Timer1)(void))
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <TIMER1_init+0x6>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
	/*Configure TCCR1A/B as follows:
	 * 1- WGM13 , WGM12 , WGM11 , WGM10  are cleared to enable the Normal mode
	 * 2- FOC1A/B are set to specify non-PWM mode
	 * 3- CS12 is set , CS11 and CS10 are cleared (Pre-scaler = 256 )
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2304:	ef e4       	ldi	r30, 0x4F	; 79
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	8c e0       	ldi	r24, 0x0C	; 12
    230a:	80 83       	st	Z, r24
	TCCR1B = (1<<CS12);
    230c:	ee e4       	ldi	r30, 0x4E	; 78
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	84 e0       	ldi	r24, 0x04	; 4
    2312:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE1);	/*Enable interrupt at overflow*/
    2314:	a9 e5       	ldi	r26, 0x59	; 89
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e9 e5       	ldi	r30, 0x59	; 89
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	84 60       	ori	r24, 0x04	; 4
    2320:	8c 93       	st	X, r24
	TCNT1 = 0x00; 			/*Starting counting from 0*/
    2322:	ec e4       	ldi	r30, 0x4C	; 76
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	11 82       	std	Z+1, r1	; 0x01
    2328:	10 82       	st	Z, r1
	g_Timer1_CallBack=CallBack_ptr_Timer1;    /*Load the pointer to function with the required call back function*/
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	90 93 98 01 	sts	0x0198, r25
    2332:	80 93 97 01 	sts	0x0197, r24
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <TIMER1_stop>:
 *
 * 	returns:
 * 		no returns(void), but the Timer1 is paused
 */
void TIMER1_stop(void)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00;			/*No clock source*/
    2348:	ee e4       	ldi	r30, 0x4E	; 78
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	10 82       	st	Z, r1
	TCNT1  = 0x00;			/*Set counter to zero */
    234e:	ec e4       	ldi	r30, 0x4C	; 76
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	11 82       	std	Z+1, r1	; 0x01
    2354:	10 82       	st	Z, r1
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <TIMER1_resume>:
 *
 * 	returns:
 * 		no returns(void), but the Timer1 is resumed
 */
void TIMER1_resume(void)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<CS12);			/*256 Pre-scaler*/
    2364:	ee e4       	ldi	r30, 0x4E	; 78
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	84 e0       	ldi	r24, 0x04	; 4
    236a:	80 83       	st	Z, r24
	TCNT1  = 0x00;				/*Set counter to zero */
    236c:	ec e4       	ldi	r30, 0x4C	; 76
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	11 82       	std	Z+1, r1	; 0x01
    2372:	10 82       	st	Z, r1
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <TIMER1_deInit>:
 *
 * 	returns:
 * 		no returns(void), but Timer1 no longer exist
 */
void TIMER1_deInit(void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	/*Reset all the registers and make all values = 0 */
	TCCR1A = 0x00;
    2382:	ef e4       	ldi	r30, 0x4F	; 79
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	10 82       	st	Z, r1
	TCCR1B = 0x00;
    2388:	ee e4       	ldi	r30, 0x4E	; 78
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	10 82       	st	Z, r1
	TIMSK  = 0x00;
    238e:	e9 e5       	ldi	r30, 0x59	; 89
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	10 82       	st	Z, r1
	TCNT1  = 0x00;
    2394:	ec e4       	ldi	r30, 0x4C	; 76
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	11 82       	std	Z+1, r1	; 0x01
    239a:	10 82       	st	Z, r1
}
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <UART_init>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the UART is initialized
 */
void UART_init(UART_Configurations *UART_Config){
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <UART_init+0x12>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01

	/******************************** UCSRA OPTIONS *****************************************
	 * 1-Select the  USART Transmission Speed(Normal or Double)
	 *************************************************************************************/
	UCSRA = (UCSRA & 0xfd) | ((UART_Config ->Speed)<<U2X);
    23bc:	ab e2       	ldi	r26, 0x2B	; 43
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	eb e2       	ldi	r30, 0x2B	; 43
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	28 2f       	mov	r18, r24
    23c8:	2d 7f       	andi	r18, 0xFD	; 253
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	80 81       	ld	r24, Z
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	82 2b       	or	r24, r18
    23da:	8c 93       	st	X, r24
	 * 2- Receiver Enable(Set RXEN)
	 * 3- Transmitter Enable(Set TXEN)
	 * 4- Defining Character size(UCSZ2 takes the 3rd bit from character size)
	 *************************************************************************************/

	UCSRB = (1<<RXEN) | (1<<TXEN) |
    23dc:	aa e2       	ldi	r26, 0x2A	; 42
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	81 81       	ldd	r24, Z+1	; 0x01
    23e6:	84 70       	andi	r24, 0x04	; 4
    23e8:	88 61       	ori	r24, 0x18	; 24
    23ea:	8c 93       	st	X, r24
	 * 2- Selecting Parity Options (UPM0 and UPM1)
	 * 3- Selecting number of stop bits (0 for 1 bit, 1 for 2 bits)
	 * 4- Defining Character size(UCSZ1:0 take the 2rd, 1st bits from character size)
	 *************************************************************************************/

	UCSRC  = (1<<URSEL);
    23ec:	e0 e4       	ldi	r30, 0x40	; 64
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 e8       	ldi	r24, 0x80	; 128
    23f2:	80 83       	st	Z, r24
	UCSRC |= ((UART_Config->Parity)<<UPM0) | /*Parity is 2 bits so it's shifted only to UPM0 and UPM1 is filled by second bit*/
    23f4:	a0 e4       	ldi	r26, 0x40	; 64
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e0 e4       	ldi	r30, 0x40	; 64
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	38 2f       	mov	r19, r24
    2400:	e9 81       	ldd	r30, Y+1	; 0x01
    2402:	fa 81       	ldd	r31, Y+2	; 0x02
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	82 95       	swap	r24
    240c:	92 95       	swap	r25
    240e:	90 7f       	andi	r25, 0xF0	; 240
    2410:	98 27       	eor	r25, r24
    2412:	80 7f       	andi	r24, 0xF0	; 240
    2414:	98 27       	eor	r25, r24
    2416:	28 2f       	mov	r18, r24
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	fa 81       	ldd	r31, Y+2	; 0x02
    241c:	83 81       	ldd	r24, Z+3	; 0x03
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	28 2b       	or	r18, r24
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	81 81       	ldd	r24, Z+1	; 0x01
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	83 70       	andi	r24, 0x03	; 3
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	82 2b       	or	r24, r18
    2444:	83 2b       	or	r24, r19
    2446:	8c 93       	st	X, r24
	/******************************** UBBR OPTIONS *****************************************
	 * 1- Clear URSEL to enable editing the UBBR register
	 * 2- Writing the equation for calculating UBBRL,UBBRH values
	 *************************************************************************************/

	CLEAR_BIT(UCSRC,URSEL);
    2448:	a0 e4       	ldi	r26, 0x40	; 64
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e0 e4       	ldi	r30, 0x40	; 64
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	8f 77       	andi	r24, 0x7F	; 127
    2454:	8c 93       	st	X, r24
	/*
	 * the equation is Fcpu*(1+U2X value)/(16*Baude)-1
	 * if U2x is 0(Normal speed ) the deviser will be 16
	 * if U2x is 1(Double speed ) the deviser will be 8
	 */
	UBRRH=((F_CPU*((UART_Config->Speed)+1))/(16*UART_Config->Baud)-1)>>8;
    2456:	cc 24       	eor	r12, r12
    2458:	dd 24       	eor	r13, r13
    245a:	68 94       	set
    245c:	c6 f8       	bld	r12, 6
    245e:	e9 81       	ldd	r30, Y+1	; 0x01
    2460:	fa 81       	ldd	r31, Y+2	; 0x02
    2462:	80 81       	ld	r24, Z
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	aa 27       	eor	r26, r26
    246c:	97 fd       	sbrc	r25, 7
    246e:	a0 95       	com	r26
    2470:	ba 2f       	mov	r27, r26
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	32 e1       	ldi	r19, 0x12	; 18
    2476:	4a e7       	ldi	r20, 0x7A	; 122
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 13 13 	call	0x2626	; 0x2626 <__mulsi3>
    2482:	7b 01       	movw	r14, r22
    2484:	8c 01       	movw	r16, r24
    2486:	e9 81       	ldd	r30, Y+1	; 0x01
    2488:	fa 81       	ldd	r31, Y+2	; 0x02
    248a:	84 81       	ldd	r24, Z+4	; 0x04
    248c:	95 81       	ldd	r25, Z+5	; 0x05
    248e:	a6 81       	ldd	r26, Z+6	; 0x06
    2490:	b7 81       	ldd	r27, Z+7	; 0x07
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	aa 1f       	adc	r26, r26
    2498:	bb 1f       	adc	r27, r27
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	aa 1f       	adc	r26, r26
    24a0:	bb 1f       	adc	r27, r27
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	aa 1f       	adc	r26, r26
    24a8:	bb 1f       	adc	r27, r27
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	aa 1f       	adc	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	9c 01       	movw	r18, r24
    24b4:	ad 01       	movw	r20, r26
    24b6:	c8 01       	movw	r24, r16
    24b8:	b7 01       	movw	r22, r14
    24ba:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    24be:	da 01       	movw	r26, r20
    24c0:	c9 01       	movw	r24, r18
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	a1 09       	sbc	r26, r1
    24c6:	b1 09       	sbc	r27, r1
    24c8:	89 2f       	mov	r24, r25
    24ca:	9a 2f       	mov	r25, r26
    24cc:	ab 2f       	mov	r26, r27
    24ce:	bb 27       	eor	r27, r27
    24d0:	f6 01       	movw	r30, r12
    24d2:	80 83       	st	Z, r24
	UBRRL=((F_CPU*((UART_Config->Speed)+1))/(16*UART_Config->Baud)-1);
    24d4:	0f 2e       	mov	r0, r31
    24d6:	f9 e2       	ldi	r31, 0x29	; 41
    24d8:	cf 2e       	mov	r12, r31
    24da:	dd 24       	eor	r13, r13
    24dc:	f0 2d       	mov	r31, r0
    24de:	e9 81       	ldd	r30, Y+1	; 0x01
    24e0:	fa 81       	ldd	r31, Y+2	; 0x02
    24e2:	80 81       	ld	r24, Z
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	aa 27       	eor	r26, r26
    24ec:	97 fd       	sbrc	r25, 7
    24ee:	a0 95       	com	r26
    24f0:	ba 2f       	mov	r27, r26
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	32 e1       	ldi	r19, 0x12	; 18
    24f6:	4a e7       	ldi	r20, 0x7A	; 122
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 13 13 	call	0x2626	; 0x2626 <__mulsi3>
    2502:	7b 01       	movw	r14, r22
    2504:	8c 01       	movw	r16, r24
    2506:	e9 81       	ldd	r30, Y+1	; 0x01
    2508:	fa 81       	ldd	r31, Y+2	; 0x02
    250a:	84 81       	ldd	r24, Z+4	; 0x04
    250c:	95 81       	ldd	r25, Z+5	; 0x05
    250e:	a6 81       	ldd	r26, Z+6	; 0x06
    2510:	b7 81       	ldd	r27, Z+7	; 0x07
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	aa 1f       	adc	r26, r26
    2518:	bb 1f       	adc	r27, r27
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	aa 1f       	adc	r26, r26
    2520:	bb 1f       	adc	r27, r27
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	aa 1f       	adc	r26, r26
    2528:	bb 1f       	adc	r27, r27
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	aa 1f       	adc	r26, r26
    2530:	bb 1f       	adc	r27, r27
    2532:	9c 01       	movw	r18, r24
    2534:	ad 01       	movw	r20, r26
    2536:	c8 01       	movw	r24, r16
    2538:	b7 01       	movw	r22, r14
    253a:	0e 94 32 13 	call	0x2664	; 0x2664 <__udivmodsi4>
    253e:	da 01       	movw	r26, r20
    2540:	c9 01       	movw	r24, r18
    2542:	81 50       	subi	r24, 0x01	; 1
    2544:	f6 01       	movw	r30, r12
    2546:	80 83       	st	Z, r24

}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	ef 90       	pop	r14
    2558:	df 90       	pop	r13
    255a:	cf 90       	pop	r12
    255c:	08 95       	ret

0000255e <UART_sendByte>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the data is sent
 */
void UART_sendByte(uint8 a_data){
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEARED(UCSRA,UDRE))
    256a:	eb e2       	ldi	r30, 0x2B	; 43
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	80 72       	andi	r24, 0x20	; 32
    2576:	90 70       	andi	r25, 0x00	; 0
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	b9 f3       	breq	.-18     	; 0x256a <UART_sendByte+0xc>
		/*
		 * Polling
		 * Waiting till the UDR register is empty to send the data
		 */
	}
	UDR=a_data;  /*Loading the UDR with required data*/
    257c:	ec e2       	ldi	r30, 0x2C	; 44
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	80 83       	st	Z, r24
}
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <UART_receiveByte>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the data is received
 */
uint8 UART_receiveByte(void){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62

	while(BIT_IS_CLEARED(UCSRA,RXC))
    2594:	eb e2       	ldi	r30, 0x2B	; 43
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	88 23       	and	r24, r24
    259c:	dc f7       	brge	.-10     	; 0x2594 <UART_receiveByte+0x8>
		 * Polling
		 * Waiting till the RXC is set to be sure that receive is complete
		 */
	}

	return UDR;   /*Read the value of UDR*/
    259e:	ec e2       	ldi	r30, 0x2C	; 44
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
}
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <UART_sendString>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the string is sent
 */
void UART_sendString(uint8 *a_str){
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <UART_sendString+0x6>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	0a c0       	rjmp	.+20     	; 0x25ce <UART_sendString+0x24>

	while(*a_str != '\0')
	{
		UART_sendByte(*a_str);
    25ba:	e9 81       	ldd	r30, Y+1	; 0x01
    25bc:	fa 81       	ldd	r31, Y+2	; 0x02
    25be:	80 81       	ld	r24, Z
    25c0:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
		a_str++;				/*Pointer moves to next character*/
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
 * 	returns:
 * 		no returns(void), but the string is sent
 */
void UART_sendString(uint8 *a_str){

	while(*a_str != '\0')
    25ce:	e9 81       	ldd	r30, Y+1	; 0x01
    25d0:	fa 81       	ldd	r31, Y+2	; 0x02
    25d2:	80 81       	ld	r24, Z
    25d4:	88 23       	and	r24, r24
    25d6:	89 f7       	brne	.-30     	; 0x25ba <UART_sendString+0x10>
	{
		UART_sendByte(*a_str);
		a_str++;				/*Pointer moves to next character*/
	}
}
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <UART_receiveString>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the string is received
 */
void UART_receiveString(uint8 *a_str){
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <UART_receiveString+0x6>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9a 83       	std	Y+2, r25	; 0x02
    25ee:	89 83       	std	Y+1, r24	; 0x01

	do{
		*a_str=UART_receiveByte();
    25f0:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_receiveByte>
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	80 83       	st	Z, r24
		a_str++;				/*Pointer moves to next character*/
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
	}while(*(a_str-1) != '#');	/*Checks for a virtual Null as the real Null can't be send or received*/
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	fc 01       	movw	r30, r24
    260a:	31 97       	sbiw	r30, 0x01	; 1
    260c:	80 81       	ld	r24, Z
    260e:	83 32       	cpi	r24, 0x23	; 35
    2610:	79 f7       	brne	.-34     	; 0x25f0 <UART_receiveString+0xe>
	*(a_str-1)='\0';			/*End your array with Null to be a string*/
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	fc 01       	movw	r30, r24
    2618:	31 97       	sbiw	r30, 0x01	; 1
    261a:	10 82       	st	Z, r1
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <__mulsi3>:
    2626:	62 9f       	mul	r22, r18
    2628:	d0 01       	movw	r26, r0
    262a:	73 9f       	mul	r23, r19
    262c:	f0 01       	movw	r30, r0
    262e:	82 9f       	mul	r24, r18
    2630:	e0 0d       	add	r30, r0
    2632:	f1 1d       	adc	r31, r1
    2634:	64 9f       	mul	r22, r20
    2636:	e0 0d       	add	r30, r0
    2638:	f1 1d       	adc	r31, r1
    263a:	92 9f       	mul	r25, r18
    263c:	f0 0d       	add	r31, r0
    263e:	83 9f       	mul	r24, r19
    2640:	f0 0d       	add	r31, r0
    2642:	74 9f       	mul	r23, r20
    2644:	f0 0d       	add	r31, r0
    2646:	65 9f       	mul	r22, r21
    2648:	f0 0d       	add	r31, r0
    264a:	99 27       	eor	r25, r25
    264c:	72 9f       	mul	r23, r18
    264e:	b0 0d       	add	r27, r0
    2650:	e1 1d       	adc	r30, r1
    2652:	f9 1f       	adc	r31, r25
    2654:	63 9f       	mul	r22, r19
    2656:	b0 0d       	add	r27, r0
    2658:	e1 1d       	adc	r30, r1
    265a:	f9 1f       	adc	r31, r25
    265c:	bd 01       	movw	r22, r26
    265e:	cf 01       	movw	r24, r30
    2660:	11 24       	eor	r1, r1
    2662:	08 95       	ret

00002664 <__udivmodsi4>:
    2664:	a1 e2       	ldi	r26, 0x21	; 33
    2666:	1a 2e       	mov	r1, r26
    2668:	aa 1b       	sub	r26, r26
    266a:	bb 1b       	sub	r27, r27
    266c:	fd 01       	movw	r30, r26
    266e:	0d c0       	rjmp	.+26     	; 0x268a <__udivmodsi4_ep>

00002670 <__udivmodsi4_loop>:
    2670:	aa 1f       	adc	r26, r26
    2672:	bb 1f       	adc	r27, r27
    2674:	ee 1f       	adc	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	a2 17       	cp	r26, r18
    267a:	b3 07       	cpc	r27, r19
    267c:	e4 07       	cpc	r30, r20
    267e:	f5 07       	cpc	r31, r21
    2680:	20 f0       	brcs	.+8      	; 0x268a <__udivmodsi4_ep>
    2682:	a2 1b       	sub	r26, r18
    2684:	b3 0b       	sbc	r27, r19
    2686:	e4 0b       	sbc	r30, r20
    2688:	f5 0b       	sbc	r31, r21

0000268a <__udivmodsi4_ep>:
    268a:	66 1f       	adc	r22, r22
    268c:	77 1f       	adc	r23, r23
    268e:	88 1f       	adc	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	1a 94       	dec	r1
    2694:	69 f7       	brne	.-38     	; 0x2670 <__udivmodsi4_loop>
    2696:	60 95       	com	r22
    2698:	70 95       	com	r23
    269a:	80 95       	com	r24
    269c:	90 95       	com	r25
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	bd 01       	movw	r22, r26
    26a4:	cf 01       	movw	r24, r30
    26a6:	08 95       	ret

000026a8 <__prologue_saves__>:
    26a8:	2f 92       	push	r2
    26aa:	3f 92       	push	r3
    26ac:	4f 92       	push	r4
    26ae:	5f 92       	push	r5
    26b0:	6f 92       	push	r6
    26b2:	7f 92       	push	r7
    26b4:	8f 92       	push	r8
    26b6:	9f 92       	push	r9
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	ca 1b       	sub	r28, r26
    26d2:	db 0b       	sbc	r29, r27
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	09 94       	ijmp

000026e0 <__epilogue_restores__>:
    26e0:	2a 88       	ldd	r2, Y+18	; 0x12
    26e2:	39 88       	ldd	r3, Y+17	; 0x11
    26e4:	48 88       	ldd	r4, Y+16	; 0x10
    26e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    26e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    26ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    26ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    26f2:	b9 84       	ldd	r11, Y+9	; 0x09
    26f4:	c8 84       	ldd	r12, Y+8	; 0x08
    26f6:	df 80       	ldd	r13, Y+7	; 0x07
    26f8:	ee 80       	ldd	r14, Y+6	; 0x06
    26fa:	fd 80       	ldd	r15, Y+5	; 0x05
    26fc:	0c 81       	ldd	r16, Y+4	; 0x04
    26fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2700:	aa 81       	ldd	r26, Y+2	; 0x02
    2702:	b9 81       	ldd	r27, Y+1	; 0x01
    2704:	ce 0f       	add	r28, r30
    2706:	d1 1d       	adc	r29, r1
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	ed 01       	movw	r28, r26
    2714:	08 95       	ret

00002716 <itoa>:
    2716:	fb 01       	movw	r30, r22
    2718:	9f 01       	movw	r18, r30
    271a:	e8 94       	clt
    271c:	42 30       	cpi	r20, 0x02	; 2
    271e:	c4 f0       	brlt	.+48     	; 0x2750 <itoa+0x3a>
    2720:	45 32       	cpi	r20, 0x25	; 37
    2722:	b4 f4       	brge	.+44     	; 0x2750 <itoa+0x3a>
    2724:	4a 30       	cpi	r20, 0x0A	; 10
    2726:	29 f4       	brne	.+10     	; 0x2732 <itoa+0x1c>
    2728:	97 fb       	bst	r25, 7
    272a:	1e f4       	brtc	.+6      	; 0x2732 <itoa+0x1c>
    272c:	90 95       	com	r25
    272e:	81 95       	neg	r24
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	64 2f       	mov	r22, r20
    2734:	77 27       	eor	r23, r23
    2736:	0e 94 bc 13 	call	0x2778	; 0x2778 <__udivmodhi4>
    273a:	80 5d       	subi	r24, 0xD0	; 208
    273c:	8a 33       	cpi	r24, 0x3A	; 58
    273e:	0c f0       	brlt	.+2      	; 0x2742 <itoa+0x2c>
    2740:	89 5d       	subi	r24, 0xD9	; 217
    2742:	81 93       	st	Z+, r24
    2744:	cb 01       	movw	r24, r22
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	a1 f7       	brne	.-24     	; 0x2732 <itoa+0x1c>
    274a:	16 f4       	brtc	.+4      	; 0x2750 <itoa+0x3a>
    274c:	5d e2       	ldi	r21, 0x2D	; 45
    274e:	51 93       	st	Z+, r21
    2750:	10 82       	st	Z, r1
    2752:	c9 01       	movw	r24, r18
    2754:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <strrev>

00002758 <strrev>:
    2758:	dc 01       	movw	r26, r24
    275a:	fc 01       	movw	r30, r24
    275c:	67 2f       	mov	r22, r23
    275e:	71 91       	ld	r23, Z+
    2760:	77 23       	and	r23, r23
    2762:	e1 f7       	brne	.-8      	; 0x275c <strrev+0x4>
    2764:	32 97       	sbiw	r30, 0x02	; 2
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <strrev+0x18>
    2768:	7c 91       	ld	r23, X
    276a:	6d 93       	st	X+, r22
    276c:	70 83       	st	Z, r23
    276e:	62 91       	ld	r22, -Z
    2770:	ae 17       	cp	r26, r30
    2772:	bf 07       	cpc	r27, r31
    2774:	c8 f3       	brcs	.-14     	; 0x2768 <strrev+0x10>
    2776:	08 95       	ret

00002778 <__udivmodhi4>:
    2778:	aa 1b       	sub	r26, r26
    277a:	bb 1b       	sub	r27, r27
    277c:	51 e1       	ldi	r21, 0x11	; 17
    277e:	07 c0       	rjmp	.+14     	; 0x278e <__udivmodhi4_ep>

00002780 <__udivmodhi4_loop>:
    2780:	aa 1f       	adc	r26, r26
    2782:	bb 1f       	adc	r27, r27
    2784:	a6 17       	cp	r26, r22
    2786:	b7 07       	cpc	r27, r23
    2788:	10 f0       	brcs	.+4      	; 0x278e <__udivmodhi4_ep>
    278a:	a6 1b       	sub	r26, r22
    278c:	b7 0b       	sbc	r27, r23

0000278e <__udivmodhi4_ep>:
    278e:	88 1f       	adc	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	5a 95       	dec	r21
    2794:	a9 f7       	brne	.-22     	; 0x2780 <__udivmodhi4_loop>
    2796:	80 95       	com	r24
    2798:	90 95       	com	r25
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	08 95       	ret

000027a0 <_exit>:
    27a0:	f8 94       	cli

000027a2 <__stop_program>:
    27a2:	ff cf       	rjmp	.-2      	; 0x27a2 <__stop_program>
