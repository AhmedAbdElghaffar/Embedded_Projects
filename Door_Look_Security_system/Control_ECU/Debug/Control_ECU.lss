
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000274a  000027de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  000027ee  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001061  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006065  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <main>
      8a:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Routine>:
 * 			No inputs
 *
 * 	returns:
 * 		no returns(void)
 */
void Timer1_Routine(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	oneMinuteCounter++;		/*Need 28 interrupts to complete a minute*/
     b4e:	80 91 70 00 	lds	r24, 0x0070
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 70 00 	sts	0x0070, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <receiveNewPassword>:
 *
 * 	returns:
 * 		no returns(void)
 */
void receiveNewPassword(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	ac 97       	sbiw	r28, 0x2c	; 44
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	uint8 First_Password[PASSWORD_SIZE] , Second_Password[PASSWORD_SIZE] , Saved_Password[PASSWORD_SIZE] ; /*Arrays to carry different passwords*/
	uint8 Password_Check_Flag;	/*Flag used to check password match*/
	while(1)
	{
		UART_receivePassword(First_Password , PASSWORD_SIZE);  /*receiving the first password*/
     b72:	ce 01       	movw	r24, r28
     b74:	4e 96       	adiw	r24, 0x1e	; 30
     b76:	65 e0       	ldi	r22, 0x05	; 5
     b78:	0e 94 ce 0a 	call	0x159c	; 0x159c <UART_receivePassword>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 ea       	ldi	r26, 0xA0	; 160
     b82:	b0 e4       	ldi	r27, 0x40	; 64
     b84:	89 8f       	std	Y+25, r24	; 0x19
     b86:	9a 8f       	std	Y+26, r25	; 0x1a
     b88:	ab 8f       	std	Y+27, r26	; 0x1b
     b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8c:	69 8d       	ldd	r22, Y+25	; 0x19
     b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	4a ef       	ldi	r20, 0xFA	; 250
     b9a:	54 e4       	ldi	r21, 0x44	; 68
     b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	8d 8b       	std	Y+21, r24	; 0x15
     ba6:	9e 8b       	std	Y+22, r25	; 0x16
     ba8:	af 8b       	std	Y+23, r26	; 0x17
     baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bac:	6d 89       	ldd	r22, Y+21	; 0x15
     bae:	7e 89       	ldd	r23, Y+22	; 0x16
     bb0:	8f 89       	ldd	r24, Y+23	; 0x17
     bb2:	98 8d       	ldd	r25, Y+24	; 0x18
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e8       	ldi	r20, 0x80	; 128
     bba:	5f e3       	ldi	r21, 0x3F	; 63
     bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc0:	88 23       	and	r24, r24
     bc2:	2c f4       	brge	.+10     	; 0xbce <receiveNewPassword+0x70>
		__ticks = 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	9c 8b       	std	Y+20, r25	; 0x14
     bca:	8b 8b       	std	Y+19, r24	; 0x13
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <receiveNewPassword+0xee>
	else if (__tmp > 65535)
     bce:	6d 89       	ldd	r22, Y+21	; 0x15
     bd0:	7e 89       	ldd	r23, Y+22	; 0x16
     bd2:	8f 89       	ldd	r24, Y+23	; 0x17
     bd4:	98 8d       	ldd	r25, Y+24	; 0x18
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	4c f5       	brge	.+82     	; 0xc38 <receiveNewPassword+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	69 8d       	ldd	r22, Y+25	; 0x19
     be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	9c 8b       	std	Y+20, r25	; 0x14
     c0c:	8b 8b       	std	Y+19, r24	; 0x13
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <receiveNewPassword+0xd0>
     c10:	88 ec       	ldi	r24, 0xC8	; 200
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	9a 8b       	std	Y+18, r25	; 0x12
     c16:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c18:	89 89       	ldd	r24, Y+17	; 0x11
     c1a:	9a 89       	ldd	r25, Y+18	; 0x12
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <receiveNewPassword+0xbe>
     c20:	9a 8b       	std	Y+18, r25	; 0x12
     c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c24:	8b 89       	ldd	r24, Y+19	; 0x13
     c26:	9c 89       	ldd	r25, Y+20	; 0x14
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	9c 8b       	std	Y+20, r25	; 0x14
     c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2e:	8b 89       	ldd	r24, Y+19	; 0x13
     c30:	9c 89       	ldd	r25, Y+20	; 0x14
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	69 f7       	brne	.-38     	; 0xc10 <receiveNewPassword+0xb2>
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <receiveNewPassword+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c38:	6d 89       	ldd	r22, Y+21	; 0x15
     c3a:	7e 89       	ldd	r23, Y+22	; 0x16
     c3c:	8f 89       	ldd	r24, Y+23	; 0x17
     c3e:	98 8d       	ldd	r25, Y+24	; 0x18
     c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	9c 8b       	std	Y+20, r25	; 0x14
     c4a:	8b 8b       	std	Y+19, r24	; 0x13
     c4c:	8b 89       	ldd	r24, Y+19	; 0x13
     c4e:	9c 89       	ldd	r25, Y+20	; 0x14
     c50:	98 8b       	std	Y+16, r25	; 0x10
     c52:	8f 87       	std	Y+15, r24	; 0x0f
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	98 89       	ldd	r25, Y+16	; 0x10
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <receiveNewPassword+0xfa>
     c5c:	98 8b       	std	Y+16, r25	; 0x10
     c5e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		UART_receivePassword(Second_Password , PASSWORD_SIZE); /*receiving the second password*/
     c60:	ce 01       	movw	r24, r28
     c62:	83 96       	adiw	r24, 0x23	; 35
     c64:	65 e0       	ldi	r22, 0x05	; 5
     c66:	0e 94 ce 0a 	call	0x159c	; 0x159c <UART_receivePassword>

		Password_Check_Flag = checkPassword(First_Password ,Second_Password , PASSWORD_SIZE);
     c6a:	ce 01       	movw	r24, r28
     c6c:	4e 96       	adiw	r24, 0x1e	; 30
     c6e:	9e 01       	movw	r18, r28
     c70:	2d 5d       	subi	r18, 0xDD	; 221
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	b9 01       	movw	r22, r18
     c76:	45 e0       	ldi	r20, 0x05	; 5
     c78:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <checkPassword>
     c7c:	8d 8f       	std	Y+29, r24	; 0x1d

		if(Password_Check_Flag)
     c7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c80:	88 23       	and	r24, r24
     c82:	09 f4       	brne	.+2      	; 0xc86 <receiveNewPassword+0x128>
     c84:	88 c0       	rjmp	.+272    	; 0xd96 <receiveNewPassword+0x238>
		{
			EEPROM_savePassword(First_Password , PASSWORD_SIZE);   /*saving the new password in the EEPROM*/
     c86:	ce 01       	movw	r24, r28
     c88:	4e 96       	adiw	r24, 0x1e	; 30
     c8a:	65 e0       	ldi	r22, 0x05	; 5
     c8c:	0e 94 37 0b 	call	0x166e	; 0x166e <EEPROM_savePassword>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e2       	ldi	r26, 0x20	; 32
     c96:	b1 e4       	ldi	r27, 0x41	; 65
     c98:	8b 87       	std	Y+11, r24	; 0x0b
     c9a:	9c 87       	std	Y+12, r25	; 0x0c
     c9c:	ad 87       	std	Y+13, r26	; 0x0d
     c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	4a ef       	ldi	r20, 0xFA	; 250
     cae:	54 e4       	ldi	r21, 0x44	; 68
     cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	8f 83       	std	Y+7, r24	; 0x07
     cba:	98 87       	std	Y+8, r25	; 0x08
     cbc:	a9 87       	std	Y+9, r26	; 0x09
     cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc0:	6f 81       	ldd	r22, Y+7	; 0x07
     cc2:	78 85       	ldd	r23, Y+8	; 0x08
     cc4:	89 85       	ldd	r24, Y+9	; 0x09
     cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e8       	ldi	r20, 0x80	; 128
     cce:	5f e3       	ldi	r21, 0x3F	; 63
     cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd4:	88 23       	and	r24, r24
     cd6:	2c f4       	brge	.+10     	; 0xce2 <receiveNewPassword+0x184>
		__ticks = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	3f c0       	rjmp	.+126    	; 0xd60 <receiveNewPassword+0x202>
	else if (__tmp > 65535)
     ce2:	6f 81       	ldd	r22, Y+7	; 0x07
     ce4:	78 85       	ldd	r23, Y+8	; 0x08
     ce6:	89 85       	ldd	r24, Y+9	; 0x09
     ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	3f ef       	ldi	r19, 0xFF	; 255
     cee:	4f e7       	ldi	r20, 0x7F	; 127
     cf0:	57 e4       	ldi	r21, 0x47	; 71
     cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf6:	18 16       	cp	r1, r24
     cf8:	4c f5       	brge	.+82     	; 0xd4c <receiveNewPassword+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     d00:	9e 85       	ldd	r25, Y+14	; 0x0e
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e2       	ldi	r20, 0x20	; 32
     d08:	51 e4       	ldi	r21, 0x41	; 65
     d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <receiveNewPassword+0x1e4>
     d24:	88 ec       	ldi	r24, 0xC8	; 200
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9c 83       	std	Y+4, r25	; 0x04
     d2a:	8b 83       	std	Y+3, r24	; 0x03
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <receiveNewPassword+0x1d2>
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	69 f7       	brne	.-38     	; 0xd24 <receiveNewPassword+0x1c6>
     d4a:	14 c0       	rjmp	.+40     	; 0xd74 <receiveNewPassword+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d4c:	6f 81       	ldd	r22, Y+7	; 0x07
     d4e:	78 85       	ldd	r23, Y+8	; 0x08
     d50:	89 85       	ldd	r24, Y+9	; 0x09
     d52:	9a 85       	ldd	r25, Y+10	; 0x0a
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	9a 83       	std	Y+2, r25	; 0x02
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <receiveNewPassword+0x20e>
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			EEPROM_readPassword(Saved_Password , PASSWORD_SIZE);   /*reading the password from the EEPROM*/
     d74:	ce 01       	movw	r24, r28
     d76:	88 96       	adiw	r24, 0x28	; 40
     d78:	65 e0       	ldi	r22, 0x05	; 5
     d7a:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <EEPROM_readPassword>
			UART_sendByte(PASSWORD_SAVED);
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
		{
			UART_sendByte(PASSWORD_NOT_SAVED);
		}
	}

}
     d84:	ac 96       	adiw	r28, 0x2c	; 44
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret
			UART_sendByte(PASSWORD_SAVED);
			return;
		}
		else
		{
			UART_sendByte(PASSWORD_NOT_SAVED);
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
     d9c:	ea ce       	rjmp	.-556    	; 0xb72 <receiveNewPassword+0x14>

00000d9e <controlEcuOptions>:
 *
 * 	returns:
 * 		no returns(void)
 */
void controlEcuOptions(void)
{
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	c2 56       	subi	r28, 0x62	; 98
     dac:	d0 40       	sbci	r29, 0x00	; 0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
	uint8 Compare_Password[PASSWORD_SIZE] , Saved_Password[PASSWORD_SIZE];
	uint8 Options , Password_Check_flag , passwordErrorCounter , Flag=1 ;
     db8:	fe 01       	movw	r30, r28
     dba:	eb 5a       	subi	r30, 0xAB	; 171
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 83       	st	Z, r24

	EEPROM_readPassword(Saved_Password,PASSWORD_SIZE);
     dc2:	ce 01       	movw	r24, r28
     dc4:	82 5a       	subi	r24, 0xA2	; 162
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	65 e0       	ldi	r22, 0x05	; 5
     dca:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <EEPROM_readPassword>

	while(UART_receiveByte() != HMI_SEND_OPTIONS);   /*Polling tell HMI send options*/
     dce:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
     dd2:	84 3a       	cpi	r24, 0xA4	; 164
     dd4:	e1 f7       	brne	.-8      	; 0xdce <controlEcuOptions+0x30>

	Options=UART_receiveByte();
     dd6:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
     dda:	fe 01       	movw	r30, r28
     ddc:	e8 5a       	subi	r30, 0xA8	; 168
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 83       	st	Z, r24
	if(Options == CHANGE_PASSWORD)   	/* "#" is pressed in the HMI(change password) */
     de2:	fe 01       	movw	r30, r28
     de4:	e8 5a       	subi	r30, 0xA8	; 168
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	83 3a       	cpi	r24, 0xA3	; 163
     dec:	09 f0       	breq	.+2      	; 0xdf0 <controlEcuOptions+0x52>
     dee:	63 c1       	rjmp	.+710    	; 0x10b6 <controlEcuOptions+0x318>
	{
		UART_receivePassword(Compare_Password,PASSWORD_SIZE);
     df0:	ce 01       	movw	r24, r28
     df2:	87 5a       	subi	r24, 0xA7	; 167
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	65 e0       	ldi	r22, 0x05	; 5
     df8:	0e 94 ce 0a 	call	0x159c	; 0x159c <UART_receivePassword>
		Password_Check_flag = checkPassword(Compare_Password ,Saved_Password , PASSWORD_SIZE);
     dfc:	ce 01       	movw	r24, r28
     dfe:	87 5a       	subi	r24, 0xA7	; 167
     e00:	9f 4f       	sbci	r25, 0xFF	; 255
     e02:	9e 01       	movw	r18, r28
     e04:	22 5a       	subi	r18, 0xA2	; 162
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	b9 01       	movw	r22, r18
     e0a:	45 e0       	ldi	r20, 0x05	; 5
     e0c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <checkPassword>
     e10:	fe 01       	movw	r30, r28
     e12:	e9 5a       	subi	r30, 0xA9	; 169
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	80 83       	st	Z, r24
		if(Password_Check_flag) 		/*Password matched*/
     e18:	fe 01       	movw	r30, r28
     e1a:	e9 5a       	subi	r30, 0xA9	; 169
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <controlEcuOptions+0x88>
     e24:	bc c0       	rjmp	.+376    	; 0xf9e <controlEcuOptions+0x200>
		{
			UART_sendByte(CONTROL_SEND_OPTIONS);
     e26:	87 ea       	ldi	r24, 0xA7	; 167
     e28:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
     e2c:	fe 01       	movw	r30, r28
     e2e:	ef 5a       	subi	r30, 0xAF	; 175
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 ea       	ldi	r26, 0xA0	; 160
     e38:	b0 e4       	ldi	r27, 0x40	; 64
     e3a:	80 83       	st	Z, r24
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	a2 83       	std	Z+2, r26	; 0x02
     e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	8e 01       	movw	r16, r28
     e44:	03 5b       	subi	r16, 0xB3	; 179
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	fe 01       	movw	r30, r28
     e4a:	ef 5a       	subi	r30, 0xAF	; 175
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a ef       	ldi	r20, 0xFA	; 250
     e5c:	54 e4       	ldi	r21, 0x44	; 68
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	f8 01       	movw	r30, r16
     e68:	80 83       	st	Z, r24
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	a2 83       	std	Z+2, r26	; 0x02
     e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e70:	fe 01       	movw	r30, r28
     e72:	e3 5b       	subi	r30, 0xB3	; 179
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	5f e3       	ldi	r21, 0x3F	; 63
     e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	44 f4       	brge	.+16     	; 0xe9e <controlEcuOptions+0x100>
		__ticks = 1;
     e8e:	fe 01       	movw	r30, r28
     e90:	e5 5b       	subi	r30, 0xB5	; 181
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
     e9c:	64 c0       	rjmp	.+200    	; 0xf66 <controlEcuOptions+0x1c8>
	else if (__tmp > 65535)
     e9e:	fe 01       	movw	r30, r28
     ea0:	e3 5b       	subi	r30, 0xB3	; 179
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	0c f0       	brlt	.+2      	; 0xebe <controlEcuOptions+0x120>
     ebc:	43 c0       	rjmp	.+134    	; 0xf44 <controlEcuOptions+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	fe 01       	movw	r30, r28
     ec0:	ef 5a       	subi	r30, 0xAF	; 175
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	8e 01       	movw	r16, r28
     ede:	05 5b       	subi	r16, 0xB5	; 181
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	f8 01       	movw	r30, r16
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
     ef4:	1f c0       	rjmp	.+62     	; 0xf34 <controlEcuOptions+0x196>
     ef6:	fe 01       	movw	r30, r28
     ef8:	e7 5b       	subi	r30, 0xB7	; 183
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	88 ec       	ldi	r24, 0xC8	; 200
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
     f04:	fe 01       	movw	r30, r28
     f06:	e7 5b       	subi	r30, 0xB7	; 183
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <controlEcuOptions+0x170>
     f12:	fe 01       	movw	r30, r28
     f14:	e7 5b       	subi	r30, 0xB7	; 183
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1c:	de 01       	movw	r26, r28
     f1e:	a5 5b       	subi	r26, 0xB5	; 181
     f20:	bf 4f       	sbci	r27, 0xFF	; 255
     f22:	fe 01       	movw	r30, r28
     f24:	e5 5b       	subi	r30, 0xB5	; 181
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	9c 93       	st	X, r25
     f32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	fe 01       	movw	r30, r28
     f36:	e5 5b       	subi	r30, 0xB5	; 181
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	d1 f6       	brne	.-76     	; 0xef6 <controlEcuOptions+0x158>
     f42:	27 c0       	rjmp	.+78     	; 0xf92 <controlEcuOptions+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	8e 01       	movw	r16, r28
     f46:	05 5b       	subi	r16, 0xB5	; 181
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	fe 01       	movw	r30, r28
     f4c:	e3 5b       	subi	r30, 0xB3	; 179
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	de 01       	movw	r26, r28
     f68:	a9 5b       	subi	r26, 0xB9	; 185
     f6a:	bf 4f       	sbci	r27, 0xFF	; 255
     f6c:	fe 01       	movw	r30, r28
     f6e:	e5 5b       	subi	r30, 0xB5	; 181
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	8d 93       	st	X+, r24
     f78:	9c 93       	st	X, r25
     f7a:	fe 01       	movw	r30, r28
     f7c:	e9 5b       	subi	r30, 0xB9	; 185
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <controlEcuOptions+0x1e6>
     f88:	fe 01       	movw	r30, r28
     f8a:	e9 5b       	subi	r30, 0xB9	; 185
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
			_delay_ms(5);
			UART_sendByte(EDIT_PASSWORD);
     f92:	8c ea       	ldi	r24, 0xAC	; 172
     f94:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
			receiveNewPassword();		/*Call the function of receiving the new password*/
     f98:	0e 94 af 05 	call	0xb5e	; 0xb5e <receiveNewPassword>
     f9c:	f3 c2       	rjmp	.+1510   	; 0x1584 <controlEcuOptions+0x7e6>
		}
		else
		{
			UART_sendByte(CONTROL_SEND_OPTIONS);
     f9e:	87 ea       	ldi	r24, 0xA7	; 167
     fa0:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
     fa4:	fe 01       	movw	r30, r28
     fa6:	ed 5b       	subi	r30, 0xBD	; 189
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 ea       	ldi	r26, 0xA0	; 160
     fb0:	b0 e4       	ldi	r27, 0x40	; 64
     fb2:	80 83       	st	Z, r24
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	a2 83       	std	Z+2, r26	; 0x02
     fb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fba:	8e 01       	movw	r16, r28
     fbc:	01 5c       	subi	r16, 0xC1	; 193
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	fe 01       	movw	r30, r28
     fc2:	ed 5b       	subi	r30, 0xBD	; 189
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a ef       	ldi	r20, 0xFA	; 250
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	f8 01       	movw	r30, r16
     fe0:	80 83       	st	Z, r24
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	a2 83       	std	Z+2, r26	; 0x02
     fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fe8:	fe 01       	movw	r30, r28
     fea:	ff 96       	adiw	r30, 0x3f	; 63
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1000:	88 23       	and	r24, r24
    1002:	2c f4       	brge	.+10     	; 0x100e <controlEcuOptions+0x270>
		__ticks = 1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9e af       	std	Y+62, r25	; 0x3e
    100a:	8d af       	std	Y+61, r24	; 0x3d
    100c:	46 c0       	rjmp	.+140    	; 0x109a <controlEcuOptions+0x2fc>
	else if (__tmp > 65535)
    100e:	fe 01       	movw	r30, r28
    1010:	ff 96       	adiw	r30, 0x3f	; 63
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	64 f5       	brge	.+88     	; 0x1082 <controlEcuOptions+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	fe 01       	movw	r30, r28
    102c:	ed 5b       	subi	r30, 0xBD	; 189
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	bc 01       	movw	r22, r24
    104a:	cd 01       	movw	r24, r26
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9e af       	std	Y+62, r25	; 0x3e
    1056:	8d af       	std	Y+61, r24	; 0x3d
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <controlEcuOptions+0x2da>
    105a:	88 ec       	ldi	r24, 0xC8	; 200
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c af       	std	Y+60, r25	; 0x3c
    1060:	8b af       	std	Y+59, r24	; 0x3b
    1062:	8b ad       	ldd	r24, Y+59	; 0x3b
    1064:	9c ad       	ldd	r25, Y+60	; 0x3c
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <controlEcuOptions+0x2c8>
    106a:	9c af       	std	Y+60, r25	; 0x3c
    106c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1070:	9e ad       	ldd	r25, Y+62	; 0x3e
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9e af       	std	Y+62, r25	; 0x3e
    1076:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1078:	8d ad       	ldd	r24, Y+61	; 0x3d
    107a:	9e ad       	ldd	r25, Y+62	; 0x3e
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	69 f7       	brne	.-38     	; 0x105a <controlEcuOptions+0x2bc>
    1080:	16 c0       	rjmp	.+44     	; 0x10ae <controlEcuOptions+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1082:	fe 01       	movw	r30, r28
    1084:	ff 96       	adiw	r30, 0x3f	; 63
    1086:	60 81       	ld	r22, Z
    1088:	71 81       	ldd	r23, Z+1	; 0x01
    108a:	82 81       	ldd	r24, Z+2	; 0x02
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e af       	std	Y+62, r25	; 0x3e
    1098:	8d af       	std	Y+61, r24	; 0x3d
    109a:	8d ad       	ldd	r24, Y+61	; 0x3d
    109c:	9e ad       	ldd	r25, Y+62	; 0x3e
    109e:	9a af       	std	Y+58, r25	; 0x3a
    10a0:	89 af       	std	Y+57, r24	; 0x39
    10a2:	89 ad       	ldd	r24, Y+57	; 0x39
    10a4:	9a ad       	ldd	r25, Y+58	; 0x3a
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <controlEcuOptions+0x308>
    10aa:	9a af       	std	Y+58, r25	; 0x3a
    10ac:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(5);
			UART_sendByte(PASSWORD_KEPT);
    10ae:	8d ea       	ldi	r24, 0xAD	; 173
    10b0:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    10b4:	67 c2       	rjmp	.+1230   	; 0x1584 <controlEcuOptions+0x7e6>
		}
	}
	else if (Options == SEND_OLD_PASSWORD)		/* "*" is pressed in the HMI(Open door) */
    10b6:	fe 01       	movw	r30, r28
    10b8:	e8 5a       	subi	r30, 0xA8	; 168
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	80 81       	ld	r24, Z
    10be:	85 3a       	cpi	r24, 0xA5	; 165
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <controlEcuOptions+0x326>
    10c2:	60 c2       	rjmp	.+1216   	; 0x1584 <controlEcuOptions+0x7e6>
	{
		UART_receivePassword(Compare_Password,PASSWORD_SIZE);
    10c4:	ce 01       	movw	r24, r28
    10c6:	87 5a       	subi	r24, 0xA7	; 167
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	65 e0       	ldi	r22, 0x05	; 5
    10cc:	0e 94 ce 0a 	call	0x159c	; 0x159c <UART_receivePassword>
		Password_Check_flag = checkPassword(Compare_Password ,Saved_Password , PASSWORD_SIZE);
    10d0:	ce 01       	movw	r24, r28
    10d2:	87 5a       	subi	r24, 0xA7	; 167
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	9e 01       	movw	r18, r28
    10d8:	22 5a       	subi	r18, 0xA2	; 162
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	b9 01       	movw	r22, r18
    10de:	45 e0       	ldi	r20, 0x05	; 5
    10e0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <checkPassword>
    10e4:	fe 01       	movw	r30, r28
    10e6:	e9 5a       	subi	r30, 0xA9	; 169
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	80 83       	st	Z, r24

		if(Password_Check_flag)
    10ec:	fe 01       	movw	r30, r28
    10ee:	e9 5a       	subi	r30, 0xA9	; 169
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <controlEcuOptions+0x35c>
    10f8:	85 c0       	rjmp	.+266    	; 0x1204 <controlEcuOptions+0x466>
		{
			/*Opening Door*/
			UART_sendByte(CONTROL_SEND_OPTIONS);
    10fa:	87 ea       	ldi	r24, 0xA7	; 167
    10fc:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e2       	ldi	r26, 0x20	; 32
    1106:	b1 e4       	ldi	r27, 0x41	; 65
    1108:	8d ab       	std	Y+53, r24	; 0x35
    110a:	9e ab       	std	Y+54, r25	; 0x36
    110c:	af ab       	std	Y+55, r26	; 0x37
    110e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6d a9       	ldd	r22, Y+53	; 0x35
    1112:	7e a9       	ldd	r23, Y+54	; 0x36
    1114:	8f a9       	ldd	r24, Y+55	; 0x37
    1116:	98 ad       	ldd	r25, Y+56	; 0x38
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a ef       	ldi	r20, 0xFA	; 250
    111e:	54 e4       	ldi	r21, 0x44	; 68
    1120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	89 ab       	std	Y+49, r24	; 0x31
    112a:	9a ab       	std	Y+50, r25	; 0x32
    112c:	ab ab       	std	Y+51, r26	; 0x33
    112e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1130:	69 a9       	ldd	r22, Y+49	; 0x31
    1132:	7a a9       	ldd	r23, Y+50	; 0x32
    1134:	8b a9       	ldd	r24, Y+51	; 0x33
    1136:	9c a9       	ldd	r25, Y+52	; 0x34
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <controlEcuOptions+0x3b4>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	98 ab       	std	Y+48, r25	; 0x30
    114e:	8f a7       	std	Y+47, r24	; 0x2f
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <controlEcuOptions+0x432>
	else if (__tmp > 65535)
    1152:	69 a9       	ldd	r22, Y+49	; 0x31
    1154:	7a a9       	ldd	r23, Y+50	; 0x32
    1156:	8b a9       	ldd	r24, Y+51	; 0x33
    1158:	9c a9       	ldd	r25, Y+52	; 0x34
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <controlEcuOptions+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6d a9       	ldd	r22, Y+53	; 0x35
    116c:	7e a9       	ldd	r23, Y+54	; 0x36
    116e:	8f a9       	ldd	r24, Y+55	; 0x37
    1170:	98 ad       	ldd	r25, Y+56	; 0x38
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	98 ab       	std	Y+48, r25	; 0x30
    1190:	8f a7       	std	Y+47, r24	; 0x2f
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <controlEcuOptions+0x414>
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9e a7       	std	Y+46, r25	; 0x2e
    119a:	8d a7       	std	Y+45, r24	; 0x2d
    119c:	8d a5       	ldd	r24, Y+45	; 0x2d
    119e:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <controlEcuOptions+0x402>
    11a4:	9e a7       	std	Y+46, r25	; 0x2e
    11a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11aa:	98 a9       	ldd	r25, Y+48	; 0x30
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <controlEcuOptions+0x3f6>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <controlEcuOptions+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	69 a9       	ldd	r22, Y+49	; 0x31
    11be:	7a a9       	ldd	r23, Y+50	; 0x32
    11c0:	8b a9       	ldd	r24, Y+51	; 0x33
    11c2:	9c a9       	ldd	r25, Y+52	; 0x34
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	98 ab       	std	Y+48, r25	; 0x30
    11ce:	8f a7       	std	Y+47, r24	; 0x2f
    11d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d2:	98 a9       	ldd	r25, Y+48	; 0x30
    11d4:	9c a7       	std	Y+44, r25	; 0x2c
    11d6:	8b a7       	std	Y+43, r24	; 0x2b
    11d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11da:	9c a5       	ldd	r25, Y+44	; 0x2c
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <controlEcuOptions+0x43e>
    11e0:	9c a7       	std	Y+44, r25	; 0x2c
    11e2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			UART_sendByte(OPEN_DOOR);
    11e4:	86 ea       	ldi	r24, 0xA6	; 166
    11e6:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>

			MOTOR_CW();
    11ea:	0e 94 79 10 	call	0x20f2	; 0x20f2 <MOTOR_CW>
			myDelay(7);
    11ee:	87 e0       	ldi	r24, 0x07	; 7
    11f0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <myDelay>
			MOTOR_ACW();
    11f4:	0e 94 8e 10 	call	0x211c	; 0x211c <MOTOR_ACW>
			myDelay(7);
    11f8:	87 e0       	ldi	r24, 0x07	; 7
    11fa:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <myDelay>
			MOTOR_STOP();
    11fe:	0e 94 a3 10 	call	0x2146	; 0x2146 <MOTOR_STOP>
    1202:	c0 c1       	rjmp	.+896    	; 0x1584 <controlEcuOptions+0x7e6>

		}
		else
		{
			/*Password is wrong and there are 2 trials only left*/
			UART_sendByte(CONTROL_SEND_OPTIONS);
    1204:	87 ea       	ldi	r24, 0xA7	; 167
    1206:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 ea       	ldi	r26, 0xA0	; 160
    1210:	b0 e4       	ldi	r27, 0x40	; 64
    1212:	8f a3       	std	Y+39, r24	; 0x27
    1214:	98 a7       	std	Y+40, r25	; 0x28
    1216:	a9 a7       	std	Y+41, r26	; 0x29
    1218:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	6f a1       	ldd	r22, Y+39	; 0x27
    121c:	78 a5       	ldd	r23, Y+40	; 0x28
    121e:	89 a5       	ldd	r24, Y+41	; 0x29
    1220:	9a a5       	ldd	r25, Y+42	; 0x2a
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8b a3       	std	Y+35, r24	; 0x23
    1234:	9c a3       	std	Y+36, r25	; 0x24
    1236:	ad a3       	std	Y+37, r26	; 0x25
    1238:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    123a:	6b a1       	ldd	r22, Y+35	; 0x23
    123c:	7c a1       	ldd	r23, Y+36	; 0x24
    123e:	8d a1       	ldd	r24, Y+37	; 0x25
    1240:	9e a1       	ldd	r25, Y+38	; 0x26
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <controlEcuOptions+0x4be>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9a a3       	std	Y+34, r25	; 0x22
    1258:	89 a3       	std	Y+33, r24	; 0x21
    125a:	3f c0       	rjmp	.+126    	; 0x12da <controlEcuOptions+0x53c>
	else if (__tmp > 65535)
    125c:	6b a1       	ldd	r22, Y+35	; 0x23
    125e:	7c a1       	ldd	r23, Y+36	; 0x24
    1260:	8d a1       	ldd	r24, Y+37	; 0x25
    1262:	9e a1       	ldd	r25, Y+38	; 0x26
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <controlEcuOptions+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	6f a1       	ldd	r22, Y+39	; 0x27
    1276:	78 a5       	ldd	r23, Y+40	; 0x28
    1278:	89 a5       	ldd	r24, Y+41	; 0x29
    127a:	9a a5       	ldd	r25, Y+42	; 0x2a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9a a3       	std	Y+34, r25	; 0x22
    129a:	89 a3       	std	Y+33, r24	; 0x21
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <controlEcuOptions+0x51e>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
    12a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a8:	98 a1       	ldd	r25, Y+32	; 0x20
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <controlEcuOptions+0x50c>
    12ae:	98 a3       	std	Y+32, r25	; 0x20
    12b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	89 a1       	ldd	r24, Y+33	; 0x21
    12b4:	9a a1       	ldd	r25, Y+34	; 0x22
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9a a3       	std	Y+34, r25	; 0x22
    12ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	89 a1       	ldd	r24, Y+33	; 0x21
    12be:	9a a1       	ldd	r25, Y+34	; 0x22
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <controlEcuOptions+0x500>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <controlEcuOptions+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6b a1       	ldd	r22, Y+35	; 0x23
    12c8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ca:	8d a1       	ldd	r24, Y+37	; 0x25
    12cc:	9e a1       	ldd	r25, Y+38	; 0x26
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a a3       	std	Y+34, r25	; 0x22
    12d8:	89 a3       	std	Y+33, r24	; 0x21
    12da:	89 a1       	ldd	r24, Y+33	; 0x21
    12dc:	9a a1       	ldd	r25, Y+34	; 0x22
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
    12e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <controlEcuOptions+0x548>
    12ea:	9e 8f       	std	Y+30, r25	; 0x1e
    12ec:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);
			UART_sendByte(WRONG_PASSWORD_FOR_OPENNING);
    12ee:	89 ea       	ldi	r24, 0xA9	; 169
    12f0:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>

			/*For loop used to check the password 2 times and if it's wrong the buzzer will fire*/
			for(passwordErrorCounter=0 ; passwordErrorCounter< WRONG_PASSWORD_COUNTER-1 ; passwordErrorCounter++)
    12f4:	fe 01       	movw	r30, r28
    12f6:	ea 5a       	subi	r30, 0xAA	; 170
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	10 82       	st	Z, r1
    12fc:	3c c1       	rjmp	.+632    	; 0x1576 <controlEcuOptions+0x7d8>
			{
				UART_sendByte(SYNCH);
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
				if(Flag)   /*general Flag used to check if the password is right in the second or third trials*/
    1304:	fe 01       	movw	r30, r28
    1306:	eb 5a       	subi	r30, 0xAB	; 171
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <controlEcuOptions+0x574>
    1310:	29 c1       	rjmp	.+594    	; 0x1564 <controlEcuOptions+0x7c6>
				{
					while(UART_receiveByte() != HMI_SEND_OPTIONS);		/*Polling tell HMI send options*/
    1312:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
    1316:	84 3a       	cpi	r24, 0xA4	; 164
    1318:	e1 f7       	brne	.-8      	; 0x1312 <controlEcuOptions+0x574>
					UART_receivePassword(Compare_Password,PASSWORD_SIZE);
    131a:	ce 01       	movw	r24, r28
    131c:	87 5a       	subi	r24, 0xA7	; 167
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	65 e0       	ldi	r22, 0x05	; 5
    1322:	0e 94 ce 0a 	call	0x159c	; 0x159c <UART_receivePassword>
					Password_Check_flag = checkPassword(Compare_Password ,Saved_Password , PASSWORD_SIZE);
    1326:	ce 01       	movw	r24, r28
    1328:	87 5a       	subi	r24, 0xA7	; 167
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	9e 01       	movw	r18, r28
    132e:	22 5a       	subi	r18, 0xA2	; 162
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	b9 01       	movw	r22, r18
    1334:	45 e0       	ldi	r20, 0x05	; 5
    1336:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <checkPassword>
    133a:	fe 01       	movw	r30, r28
    133c:	e9 5a       	subi	r30, 0xA9	; 169
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 83       	st	Z, r24
					if(Password_Check_flag)
    1342:	fe 01       	movw	r30, r28
    1344:	e9 5a       	subi	r30, 0xA9	; 169
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <controlEcuOptions+0x5b2>
    134e:	89 c0       	rjmp	.+274    	; 0x1462 <controlEcuOptions+0x6c4>
					{
						/*Opening Door*/
						UART_sendByte(CONTROL_SEND_OPTIONS);
    1350:	87 ea       	ldi	r24, 0xA7	; 167
    1352:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 ea       	ldi	r26, 0xA0	; 160
    135c:	b0 e4       	ldi	r27, 0x40	; 64
    135e:	89 8f       	std	Y+25, r24	; 0x19
    1360:	9a 8f       	std	Y+26, r25	; 0x1a
    1362:	ab 8f       	std	Y+27, r26	; 0x1b
    1364:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	69 8d       	ldd	r22, Y+25	; 0x19
    1368:	7a 8d       	ldd	r23, Y+26	; 0x1a
    136a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a ef       	ldi	r20, 0xFA	; 250
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	8d 8b       	std	Y+21, r24	; 0x15
    1380:	9e 8b       	std	Y+22, r25	; 0x16
    1382:	af 8b       	std	Y+23, r26	; 0x17
    1384:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1386:	6d 89       	ldd	r22, Y+21	; 0x15
    1388:	7e 89       	ldd	r23, Y+22	; 0x16
    138a:	8f 89       	ldd	r24, Y+23	; 0x17
    138c:	98 8d       	ldd	r25, Y+24	; 0x18
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <controlEcuOptions+0x60a>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9c 8b       	std	Y+20, r25	; 0x14
    13a4:	8b 8b       	std	Y+19, r24	; 0x13
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <controlEcuOptions+0x688>
	else if (__tmp > 65535)
    13a8:	6d 89       	ldd	r22, Y+21	; 0x15
    13aa:	7e 89       	ldd	r23, Y+22	; 0x16
    13ac:	8f 89       	ldd	r24, Y+23	; 0x17
    13ae:	98 8d       	ldd	r25, Y+24	; 0x18
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	4c f5       	brge	.+82     	; 0x1412 <controlEcuOptions+0x674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	69 8d       	ldd	r22, Y+25	; 0x19
    13c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9c 8b       	std	Y+20, r25	; 0x14
    13e6:	8b 8b       	std	Y+19, r24	; 0x13
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <controlEcuOptions+0x66a>
    13ea:	88 ec       	ldi	r24, 0xC8	; 200
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9a 8b       	std	Y+18, r25	; 0x12
    13f0:	89 8b       	std	Y+17, r24	; 0x11
    13f2:	89 89       	ldd	r24, Y+17	; 0x11
    13f4:	9a 89       	ldd	r25, Y+18	; 0x12
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <controlEcuOptions+0x658>
    13fa:	9a 8b       	std	Y+18, r25	; 0x12
    13fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1400:	9c 89       	ldd	r25, Y+20	; 0x14
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <controlEcuOptions+0x64c>
    1410:	14 c0       	rjmp	.+40     	; 0x143a <controlEcuOptions+0x69c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	6d 89       	ldd	r22, Y+21	; 0x15
    1414:	7e 89       	ldd	r23, Y+22	; 0x16
    1416:	8f 89       	ldd	r24, Y+23	; 0x17
    1418:	98 8d       	ldd	r25, Y+24	; 0x18
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	8b 89       	ldd	r24, Y+19	; 0x13
    1428:	9c 89       	ldd	r25, Y+20	; 0x14
    142a:	98 8b       	std	Y+16, r25	; 0x10
    142c:	8f 87       	std	Y+15, r24	; 0x0f
    142e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1430:	98 89       	ldd	r25, Y+16	; 0x10
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <controlEcuOptions+0x694>
    1436:	98 8b       	std	Y+16, r25	; 0x10
    1438:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(5);
						UART_sendByte(PASSWORD_CHECKED_TRUE);
    143a:	8a ea       	ldi	r24, 0xAA	; 170
    143c:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
						MOTOR_CW();				/*rotate motor clock wise*/
    1440:	0e 94 79 10 	call	0x20f2	; 0x20f2 <MOTOR_CW>
						myDelay(7);				/*15 seconds delay (every 1 count = 2.09 seconds)*/
    1444:	87 e0       	ldi	r24, 0x07	; 7
    1446:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <myDelay>
						MOTOR_ACW();			/*rotate motor anti clock wise*/
    144a:	0e 94 8e 10 	call	0x211c	; 0x211c <MOTOR_ACW>
						myDelay(7);				/*15 seconds delay (every 1 count = 2.09 seconds)*/
    144e:	87 e0       	ldi	r24, 0x07	; 7
    1450:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <myDelay>
						MOTOR_STOP();			/* Stop motor*/
    1454:	0e 94 a3 10 	call	0x2146	; 0x2146 <MOTOR_STOP>
						Flag=0;
    1458:	fe 01       	movw	r30, r28
    145a:	eb 5a       	subi	r30, 0xAB	; 171
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	10 82       	st	Z, r1
    1460:	81 c0       	rjmp	.+258    	; 0x1564 <controlEcuOptions+0x7c6>
					}
					else
					{	/*Pass is wrong*/
						UART_sendByte(CONTROL_SEND_OPTIONS);
    1462:	87 ea       	ldi	r24, 0xA7	; 167
    1464:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 ea       	ldi	r26, 0xA0	; 160
    146e:	b0 e4       	ldi	r27, 0x40	; 64
    1470:	8b 87       	std	Y+11, r24	; 0x0b
    1472:	9c 87       	std	Y+12, r25	; 0x0c
    1474:	ad 87       	std	Y+13, r26	; 0x0d
    1476:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1478:	6b 85       	ldd	r22, Y+11	; 0x0b
    147a:	7c 85       	ldd	r23, Y+12	; 0x0c
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	4a ef       	ldi	r20, 0xFA	; 250
    1486:	54 e4       	ldi	r21, 0x44	; 68
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	8f 83       	std	Y+7, r24	; 0x07
    1492:	98 87       	std	Y+8, r25	; 0x08
    1494:	a9 87       	std	Y+9, r26	; 0x09
    1496:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	2c f4       	brge	.+10     	; 0x14ba <controlEcuOptions+0x71c>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <controlEcuOptions+0x79a>
	else if (__tmp > 65535)
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	3f ef       	ldi	r19, 0xFF	; 255
    14c6:	4f e7       	ldi	r20, 0x7F	; 127
    14c8:	57 e4       	ldi	r21, 0x47	; 71
    14ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ce:	18 16       	cp	r1, r24
    14d0:	4c f5       	brge	.+82     	; 0x1524 <controlEcuOptions+0x786>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e2       	ldi	r20, 0x20	; 32
    14e0:	51 e4       	ldi	r21, 0x41	; 65
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <controlEcuOptions+0x77c>
    14fc:	88 ec       	ldi	r24, 0xC8	; 200
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <controlEcuOptions+0x76a>
    150c:	9c 83       	std	Y+4, r25	; 0x04
    150e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	69 f7       	brne	.-38     	; 0x14fc <controlEcuOptions+0x75e>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <controlEcuOptions+0x7ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <controlEcuOptions+0x7a6>
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(5);
						UART_sendByte(PASSWORD_CHECKED_FALSE);
    154c:	8b ea       	ldi	r24, 0xAB	; 171
    154e:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>

						if(passwordErrorCounter==(WRONG_PASSWORD_COUNTER-2))
    1552:	fe 01       	movw	r30, r28
    1554:	ea 5a       	subi	r30, 0xAA	; 170
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	19 f4       	brne	.+6      	; 0x1564 <controlEcuOptions+0x7c6>
						{
							Buzzer(28);			/*Fire the buzzer for 1 minute(2.09 seconds = 1 in the input of Buzzer function)*/
    155e:	8c e1       	ldi	r24, 0x1C	; 28
    1560:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Buzzer>
			UART_sendByte(CONTROL_SEND_OPTIONS);
			_delay_ms(5);
			UART_sendByte(WRONG_PASSWORD_FOR_OPENNING);

			/*For loop used to check the password 2 times and if it's wrong the buzzer will fire*/
			for(passwordErrorCounter=0 ; passwordErrorCounter< WRONG_PASSWORD_COUNTER-1 ; passwordErrorCounter++)
    1564:	de 01       	movw	r26, r28
    1566:	aa 5a       	subi	r26, 0xAA	; 170
    1568:	bf 4f       	sbci	r27, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	ea 5a       	subi	r30, 0xAA	; 170
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	8c 93       	st	X, r24
    1576:	fe 01       	movw	r30, r28
    1578:	ea 5a       	subi	r30, 0xAA	; 170
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	08 f4       	brcc	.+2      	; 0x1584 <controlEcuOptions+0x7e6>
    1582:	bd ce       	rjmp	.-646    	; 0x12fe <controlEcuOptions+0x560>
				}
			}
		}

	}
}
    1584:	ce 59       	subi	r28, 0x9E	; 158
    1586:	df 4f       	sbci	r29, 0xFF	; 255
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	08 95       	ret

0000159c <UART_receivePassword>:
 *			2- uint8 size: size of the array
 * 	returns:
 * 		no returns(void)
 */
void UART_receivePassword(uint8 *Arr,uint8 size)
{
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <UART_receivePassword+0xa>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <UART_receivePassword+0xc>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9b 83       	std	Y+3, r25	; 0x03
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    15b2:	19 82       	std	Y+1, r1	; 0x01
	while(UART_receiveByte() != SEND_PASSWORD ); /*Polling tell the HMI sends the password*/
    15b4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
    15b8:	81 3a       	cpi	r24, 0xA1	; 161
    15ba:	e1 f7       	brne	.-8      	; 0x15b4 <UART_receivePassword+0x18>
	for(i=0;i<size;i++)
    15bc:	19 82       	std	Y+1, r1	; 0x01
    15be:	0f c0       	rjmp	.+30     	; 0x15de <UART_receivePassword+0x42>
	{
		Arr[i]=UART_receiveByte();
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	8c 01       	movw	r16, r24
    15cc:	02 0f       	add	r16, r18
    15ce:	13 1f       	adc	r17, r19
    15d0:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
    15d4:	f8 01       	movw	r30, r16
    15d6:	80 83       	st	Z, r24
 */
void UART_receivePassword(uint8 *Arr,uint8 size)
{
	uint8 i=0;
	while(UART_receiveByte() != SEND_PASSWORD ); /*Polling tell the HMI sends the password*/
	for(i=0;i<size;i++)
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	99 81       	ldd	r25, Y+1	; 0x01
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	98 17       	cp	r25, r24
    15e4:	68 f3       	brcs	.-38     	; 0x15c0 <UART_receivePassword+0x24>
	{
		Arr[i]=UART_receiveByte();
	}
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	08 95       	ret

000015f8 <checkPassword>:
 *			3- uint8 size: size of the array
 * 	returns:
 * 		uint8, return 1 if the passwords are matched
 */
uint8 checkPassword(uint8 *Arr1 , uint8 *Arr2 ,uint8 size)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	27 97       	sbiw	r28, 0x07	; 7
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	8a 83       	std	Y+2, r24	; 0x02
    1610:	7d 83       	std	Y+5, r23	; 0x05
    1612:	6c 83       	std	Y+4, r22	; 0x04
    1614:	4e 83       	std	Y+6, r20	; 0x06
	uint8 i=0;
    1616:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<size;i++)
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	19 c0       	rjmp	.+50     	; 0x164e <checkPassword+0x56>
	{
		if(Arr1[i] != Arr2[i])
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	9b 81       	ldd	r25, Y+3	; 0x03
    1626:	fc 01       	movw	r30, r24
    1628:	e2 0f       	add	r30, r18
    162a:	f3 1f       	adc	r31, r19
    162c:	40 81       	ld	r20, Z
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	fc 01       	movw	r30, r24
    163a:	e2 0f       	add	r30, r18
    163c:	f3 1f       	adc	r31, r19
    163e:	80 81       	ld	r24, Z
    1640:	48 17       	cp	r20, r24
    1642:	11 f0       	breq	.+4      	; 0x1648 <checkPassword+0x50>
		{
			return 0;
    1644:	1f 82       	std	Y+7, r1	; 0x07
    1646:	09 c0       	rjmp	.+18     	; 0x165a <checkPassword+0x62>
 * 		uint8, return 1 if the passwords are matched
 */
uint8 checkPassword(uint8 *Arr1 , uint8 *Arr2 ,uint8 size)
{
	uint8 i=0;
	for(i=0;i<size;i++)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	99 81       	ldd	r25, Y+1	; 0x01
    1650:	8e 81       	ldd	r24, Y+6	; 0x06
    1652:	98 17       	cp	r25, r24
    1654:	18 f3       	brcs	.-58     	; 0x161c <checkPassword+0x24>
		if(Arr1[i] != Arr2[i])
		{
			return 0;
		}
	}
	return 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	8f 83       	std	Y+7, r24	; 0x07
    165a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    165c:	27 96       	adiw	r28, 0x07	; 7
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <EEPROM_savePassword>:
 *			2- uint8 size: size of the array
 * 	returns:
 * 		no returns(void)
 */
void EEPROM_savePassword(uint8 *Arr , uint8 size)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	62 97       	sbiw	r28, 0x12	; 18
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	99 8b       	std	Y+17, r25	; 0x11
    1684:	88 8b       	std	Y+16, r24	; 0x10
    1686:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i=0;
    1688:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<size;i++)
    168a:	1f 86       	std	Y+15, r1	; 0x0f
    168c:	88 c0       	rjmp	.+272    	; 0x179e <EEPROM_savePassword+0x130>
	{
		EEPROM_write((0x0311 + i),Arr[i]);
    168e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1690:	88 2f       	mov	r24, r24
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	8f 5e       	subi	r24, 0xEF	; 239
    1696:	9c 4f       	sbci	r25, 0xFC	; 252
    1698:	ac 01       	movw	r20, r24
    169a:	8f 85       	ldd	r24, Y+15	; 0x0f
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	88 89       	ldd	r24, Y+16	; 0x10
    16a2:	99 89       	ldd	r25, Y+17	; 0x11
    16a4:	fc 01       	movw	r30, r24
    16a6:	e2 0f       	add	r30, r18
    16a8:	f3 1f       	adc	r31, r19
    16aa:	20 81       	ld	r18, Z
    16ac:	ca 01       	movw	r24, r20
    16ae:	62 2f       	mov	r22, r18
    16b0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <EEPROM_write>
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e2       	ldi	r26, 0x20	; 32
    16ba:	b1 e4       	ldi	r27, 0x41	; 65
    16bc:	8b 87       	std	Y+11, r24	; 0x0b
    16be:	9c 87       	std	Y+12, r25	; 0x0c
    16c0:	ad 87       	std	Y+13, r26	; 0x0d
    16c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a ef       	ldi	r20, 0xFA	; 250
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8f 83       	std	Y+7, r24	; 0x07
    16de:	98 87       	std	Y+8, r25	; 0x08
    16e0:	a9 87       	std	Y+9, r26	; 0x09
    16e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	2c f4       	brge	.+10     	; 0x1706 <EEPROM_savePassword+0x98>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	3f c0       	rjmp	.+126    	; 0x1784 <EEPROM_savePassword+0x116>
	else if (__tmp > 65535)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	57 e4       	ldi	r21, 0x47	; 71
    1716:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	4c f5       	brge	.+82     	; 0x1770 <EEPROM_savePassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1720:	7c 85       	ldd	r23, Y+12	; 0x0c
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <EEPROM_savePassword+0xf8>
    1748:	88 ec       	ldi	r24, 0xC8	; 200
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <EEPROM_savePassword+0xe6>
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f7       	brne	.-38     	; 0x1748 <EEPROM_savePassword+0xda>
    176e:	14 c0       	rjmp	.+40     	; 0x1798 <EEPROM_savePassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	6f 81       	ldd	r22, Y+7	; 0x07
    1772:	78 85       	ldd	r23, Y+8	; 0x08
    1774:	89 85       	ldd	r24, Y+9	; 0x09
    1776:	9a 85       	ldd	r25, Y+10	; 0x0a
    1778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <EEPROM_savePassword+0x122>
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
 * 		no returns(void)
 */
void EEPROM_savePassword(uint8 *Arr , uint8 size)
{
	uint8 i=0;
	for(i=0;i<size;i++)
    1798:	8f 85       	ldd	r24, Y+15	; 0x0f
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	8f 87       	std	Y+15, r24	; 0x0f
    179e:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a0:	8a 89       	ldd	r24, Y+18	; 0x12
    17a2:	98 17       	cp	r25, r24
    17a4:	08 f4       	brcc	.+2      	; 0x17a8 <EEPROM_savePassword+0x13a>
    17a6:	73 cf       	rjmp	.-282    	; 0x168e <EEPROM_savePassword+0x20>
	{
		EEPROM_write((0x0311 + i),Arr[i]);
		_delay_ms(10);
	}
}
    17a8:	62 96       	adiw	r28, 0x12	; 18
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <EEPROM_readPassword>:
 *			2- uint8 size: size of the array
 * 	returns:
 * 		no returns(void)
 */
void EEPROM_readPassword(uint8 *Arr , uint8 size)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	62 97       	sbiw	r28, 0x12	; 18
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	99 8b       	std	Y+17, r25	; 0x11
    17d0:	88 8b       	std	Y+16, r24	; 0x10
    17d2:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i=0;
    17d4:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<size;i++)
    17d6:	1f 86       	std	Y+15, r1	; 0x0f
    17d8:	86 c0       	rjmp	.+268    	; 0x18e6 <EEPROM_readPassword+0x12c>
	{
		EEPROM_read((0x0311 + i),&Arr[i]);
    17da:	8f 85       	ldd	r24, Y+15	; 0x0f
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	8f 5e       	subi	r24, 0xEF	; 239
    17e2:	9c 4f       	sbci	r25, 0xFC	; 252
    17e4:	ac 01       	movw	r20, r24
    17e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	88 89       	ldd	r24, Y+16	; 0x10
    17ee:	99 89       	ldd	r25, Y+17	; 0x11
    17f0:	28 0f       	add	r18, r24
    17f2:	39 1f       	adc	r19, r25
    17f4:	ca 01       	movw	r24, r20
    17f6:	b9 01       	movw	r22, r18
    17f8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <EEPROM_read>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e2       	ldi	r26, 0x20	; 32
    1802:	b1 e4       	ldi	r27, 0x41	; 65
    1804:	8b 87       	std	Y+11, r24	; 0x0b
    1806:	9c 87       	std	Y+12, r25	; 0x0c
    1808:	ad 87       	std	Y+13, r26	; 0x0d
    180a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180c:	6b 85       	ldd	r22, Y+11	; 0x0b
    180e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1810:	8d 85       	ldd	r24, Y+13	; 0x0d
    1812:	9e 85       	ldd	r25, Y+14	; 0x0e
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a ef       	ldi	r20, 0xFA	; 250
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8f 83       	std	Y+7, r24	; 0x07
    1826:	98 87       	std	Y+8, r25	; 0x08
    1828:	a9 87       	std	Y+9, r26	; 0x09
    182a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	2c f4       	brge	.+10     	; 0x184e <EEPROM_readPassword+0x94>
		__ticks = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	3f c0       	rjmp	.+126    	; 0x18cc <EEPROM_readPassword+0x112>
	else if (__tmp > 65535)
    184e:	6f 81       	ldd	r22, Y+7	; 0x07
    1850:	78 85       	ldd	r23, Y+8	; 0x08
    1852:	89 85       	ldd	r24, Y+9	; 0x09
    1854:	9a 85       	ldd	r25, Y+10	; 0x0a
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	3f ef       	ldi	r19, 0xFF	; 255
    185a:	4f e7       	ldi	r20, 0x7F	; 127
    185c:	57 e4       	ldi	r21, 0x47	; 71
    185e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1862:	18 16       	cp	r1, r24
    1864:	4c f5       	brge	.+82     	; 0x18b8 <EEPROM_readPassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1866:	6b 85       	ldd	r22, Y+11	; 0x0b
    1868:	7c 85       	ldd	r23, Y+12	; 0x0c
    186a:	8d 85       	ldd	r24, Y+13	; 0x0d
    186c:	9e 85       	ldd	r25, Y+14	; 0x0e
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	40 e2       	ldi	r20, 0x20	; 32
    1874:	51 e4       	ldi	r21, 0x41	; 65
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
    188e:	0f c0       	rjmp	.+30     	; 0x18ae <EEPROM_readPassword+0xf4>
    1890:	88 ec       	ldi	r24, 0xC8	; 200
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <EEPROM_readPassword+0xe2>
    18a0:	9c 83       	std	Y+4, r25	; 0x04
    18a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	9e 83       	std	Y+6, r25	; 0x06
    18ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	8d 81       	ldd	r24, Y+5	; 0x05
    18b0:	9e 81       	ldd	r25, Y+6	; 0x06
    18b2:	00 97       	sbiw	r24, 0x00	; 0
    18b4:	69 f7       	brne	.-38     	; 0x1890 <EEPROM_readPassword+0xd6>
    18b6:	14 c0       	rjmp	.+40     	; 0x18e0 <EEPROM_readPassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ba:	78 85       	ldd	r23, Y+8	; 0x08
    18bc:	89 85       	ldd	r24, Y+9	; 0x09
    18be:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	9e 83       	std	Y+6, r25	; 0x06
    18ca:	8d 83       	std	Y+5, r24	; 0x05
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	f1 f7       	brne	.-4      	; 0x18d8 <EEPROM_readPassword+0x11e>
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
 * 		no returns(void)
 */
void EEPROM_readPassword(uint8 *Arr , uint8 size)
{
	uint8 i=0;
	for(i=0;i<size;i++)
    18e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	8f 87       	std	Y+15, r24	; 0x0f
    18e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    18e8:	8a 89       	ldd	r24, Y+18	; 0x12
    18ea:	98 17       	cp	r25, r24
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <EEPROM_readPassword+0x136>
    18ee:	75 cf       	rjmp	.-278    	; 0x17da <EEPROM_readPassword+0x20>
	{
		EEPROM_read((0x0311 + i),&Arr[i]);
		_delay_ms(10);
	}
}
    18f0:	62 96       	adiw	r28, 0x12	; 18
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <firstTimeOpeningNewSystem>:
 *
 * 	returns:
 * 		no returns(void)
 */
void firstTimeOpeningNewSystem(void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	eb 97       	sbiw	r28, 0x3b	; 59
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
	uint8 EEPROM_First_Address_Value , EEPROM_Second_Address_Value ,Indicator ;

	EEPROM_read(0x0000 , &EEPROM_First_Address_Value);
    1916:	9e 01       	movw	r18, r28
    1918:	26 5c       	subi	r18, 0xC6	; 198
    191a:	3f 4f       	sbci	r19, 0xFF	; 255
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	b9 01       	movw	r22, r18
    1922:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <EEPROM_read>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a0 ea       	ldi	r26, 0xA0	; 160
    192c:	b0 e4       	ldi	r27, 0x40	; 64
    192e:	8d ab       	std	Y+53, r24	; 0x35
    1930:	9e ab       	std	Y+54, r25	; 0x36
    1932:	af ab       	std	Y+55, r26	; 0x37
    1934:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	6d a9       	ldd	r22, Y+53	; 0x35
    1938:	7e a9       	ldd	r23, Y+54	; 0x36
    193a:	8f a9       	ldd	r24, Y+55	; 0x37
    193c:	98 ad       	ldd	r25, Y+56	; 0x38
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a ef       	ldi	r20, 0xFA	; 250
    1944:	54 e4       	ldi	r21, 0x44	; 68
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	89 ab       	std	Y+49, r24	; 0x31
    1950:	9a ab       	std	Y+50, r25	; 0x32
    1952:	ab ab       	std	Y+51, r26	; 0x33
    1954:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1956:	69 a9       	ldd	r22, Y+49	; 0x31
    1958:	7a a9       	ldd	r23, Y+50	; 0x32
    195a:	8b a9       	ldd	r24, Y+51	; 0x33
    195c:	9c a9       	ldd	r25, Y+52	; 0x34
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <firstTimeOpeningNewSystem+0x76>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	98 ab       	std	Y+48, r25	; 0x30
    1974:	8f a7       	std	Y+47, r24	; 0x2f
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <firstTimeOpeningNewSystem+0xf4>
	else if (__tmp > 65535)
    1978:	69 a9       	ldd	r22, Y+49	; 0x31
    197a:	7a a9       	ldd	r23, Y+50	; 0x32
    197c:	8b a9       	ldd	r24, Y+51	; 0x33
    197e:	9c a9       	ldd	r25, Y+52	; 0x34
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <firstTimeOpeningNewSystem+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	6d a9       	ldd	r22, Y+53	; 0x35
    1992:	7e a9       	ldd	r23, Y+54	; 0x36
    1994:	8f a9       	ldd	r24, Y+55	; 0x37
    1996:	98 ad       	ldd	r25, Y+56	; 0x38
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	98 ab       	std	Y+48, r25	; 0x30
    19b6:	8f a7       	std	Y+47, r24	; 0x2f
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <firstTimeOpeningNewSystem+0xd6>
    19ba:	88 ec       	ldi	r24, 0xC8	; 200
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9e a7       	std	Y+46, r25	; 0x2e
    19c0:	8d a7       	std	Y+45, r24	; 0x2d
    19c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <firstTimeOpeningNewSystem+0xc4>
    19ca:	9e a7       	std	Y+46, r25	; 0x2e
    19cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d0:	98 a9       	ldd	r25, Y+48	; 0x30
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	98 ab       	std	Y+48, r25	; 0x30
    19d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19da:	98 a9       	ldd	r25, Y+48	; 0x30
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <firstTimeOpeningNewSystem+0xb8>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <firstTimeOpeningNewSystem+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	69 a9       	ldd	r22, Y+49	; 0x31
    19e4:	7a a9       	ldd	r23, Y+50	; 0x32
    19e6:	8b a9       	ldd	r24, Y+51	; 0x33
    19e8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	98 ab       	std	Y+48, r25	; 0x30
    19f4:	8f a7       	std	Y+47, r24	; 0x2f
    19f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f8:	98 a9       	ldd	r25, Y+48	; 0x30
    19fa:	9c a7       	std	Y+44, r25	; 0x2c
    19fc:	8b a7       	std	Y+43, r24	; 0x2b
    19fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <firstTimeOpeningNewSystem+0x100>
    1a06:	9c a7       	std	Y+44, r25	; 0x2c
    1a08:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	EEPROM_read(0x0001 , &EEPROM_Second_Address_Value);
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	25 5c       	subi	r18, 0xC5	; 197
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	b9 01       	movw	r22, r18
    1a16:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <EEPROM_read>
	UART_sendByte(SYNCH);
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 ea       	ldi	r26, 0xA0	; 160
    1a26:	b0 e4       	ldi	r27, 0x40	; 64
    1a28:	8f a3       	std	Y+39, r24	; 0x27
    1a2a:	98 a7       	std	Y+40, r25	; 0x28
    1a2c:	a9 a7       	std	Y+41, r26	; 0x29
    1a2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a30:	6f a1       	ldd	r22, Y+39	; 0x27
    1a32:	78 a5       	ldd	r23, Y+40	; 0x28
    1a34:	89 a5       	ldd	r24, Y+41	; 0x29
    1a36:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a ef       	ldi	r20, 0xFA	; 250
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8b a3       	std	Y+35, r24	; 0x23
    1a4a:	9c a3       	std	Y+36, r25	; 0x24
    1a4c:	ad a3       	std	Y+37, r26	; 0x25
    1a4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a50:	6b a1       	ldd	r22, Y+35	; 0x23
    1a52:	7c a1       	ldd	r23, Y+36	; 0x24
    1a54:	8d a1       	ldd	r24, Y+37	; 0x25
    1a56:	9e a1       	ldd	r25, Y+38	; 0x26
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <firstTimeOpeningNewSystem+0x170>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9a a3       	std	Y+34, r25	; 0x22
    1a6e:	89 a3       	std	Y+33, r24	; 0x21
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <firstTimeOpeningNewSystem+0x1ee>
	else if (__tmp > 65535)
    1a72:	6b a1       	ldd	r22, Y+35	; 0x23
    1a74:	7c a1       	ldd	r23, Y+36	; 0x24
    1a76:	8d a1       	ldd	r24, Y+37	; 0x25
    1a78:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <firstTimeOpeningNewSystem+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9a a3       	std	Y+34, r25	; 0x22
    1ab0:	89 a3       	std	Y+33, r24	; 0x21
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <firstTimeOpeningNewSystem+0x1d0>
    1ab4:	88 ec       	ldi	r24, 0xC8	; 200
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	98 a3       	std	Y+32, r25	; 0x20
    1aba:	8f 8f       	std	Y+31, r24	; 0x1f
    1abc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abe:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <firstTimeOpeningNewSystem+0x1be>
    1ac4:	98 a3       	std	Y+32, r25	; 0x20
    1ac6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aca:	9a a1       	ldd	r25, Y+34	; 0x22
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9a a3       	std	Y+34, r25	; 0x22
    1ad0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <firstTimeOpeningNewSystem+0x1b2>
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <firstTimeOpeningNewSystem+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ade:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9a a3       	std	Y+34, r25	; 0x22
    1aee:	89 a3       	std	Y+33, r24	; 0x21
    1af0:	89 a1       	ldd	r24, Y+33	; 0x21
    1af2:	9a a1       	ldd	r25, Y+34	; 0x22
    1af4:	9e 8f       	std	Y+30, r25	; 0x1e
    1af6:	8d 8f       	std	Y+29, r24	; 0x1d
    1af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1afa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <firstTimeOpeningNewSystem+0x1fa>
    1b00:	9e 8f       	std	Y+30, r25	; 0x1e
    1b02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	UART_sendByte(EEPROM_First_Address_Value);
    1b04:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b06:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b10:	b0 e4       	ldi	r27, 0x40	; 64
    1b12:	89 8f       	std	Y+25, r24	; 0x19
    1b14:	9a 8f       	std	Y+26, r25	; 0x1a
    1b16:	ab 8f       	std	Y+27, r26	; 0x1b
    1b18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a ef       	ldi	r20, 0xFA	; 250
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8d 8b       	std	Y+21, r24	; 0x15
    1b34:	9e 8b       	std	Y+22, r25	; 0x16
    1b36:	af 8b       	std	Y+23, r26	; 0x17
    1b38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	40 e8       	ldi	r20, 0x80	; 128
    1b48:	5f e3       	ldi	r21, 0x3F	; 63
    1b4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4e:	88 23       	and	r24, r24
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <firstTimeOpeningNewSystem+0x25a>
		__ticks = 1;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	3f c0       	rjmp	.+126    	; 0x1bda <firstTimeOpeningNewSystem+0x2d8>
	else if (__tmp > 65535)
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	3f ef       	ldi	r19, 0xFF	; 255
    1b68:	4f e7       	ldi	r20, 0x7F	; 127
    1b6a:	57 e4       	ldi	r21, 0x47	; 71
    1b6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b70:	18 16       	cp	r1, r24
    1b72:	4c f5       	brge	.+82     	; 0x1bc6 <firstTimeOpeningNewSystem+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b74:	69 8d       	ldd	r22, Y+25	; 0x19
    1b76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e2       	ldi	r20, 0x20	; 32
    1b82:	51 e4       	ldi	r21, 0x41	; 65
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
    1b9c:	0f c0       	rjmp	.+30     	; 0x1bbc <firstTimeOpeningNewSystem+0x2ba>
    1b9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9a 8b       	std	Y+18, r25	; 0x12
    1ba4:	89 8b       	std	Y+17, r24	; 0x11
    1ba6:	89 89       	ldd	r24, Y+17	; 0x11
    1ba8:	9a 89       	ldd	r25, Y+18	; 0x12
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <firstTimeOpeningNewSystem+0x2a8>
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	69 f7       	brne	.-38     	; 0x1b9e <firstTimeOpeningNewSystem+0x29c>
    1bc4:	14 c0       	rjmp	.+40     	; 0x1bee <firstTimeOpeningNewSystem+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bca:	8f 89       	ldd	r24, Y+23	; 0x17
    1bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	8b 89       	ldd	r24, Y+19	; 0x13
    1bdc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bde:	98 8b       	std	Y+16, r25	; 0x10
    1be0:	8f 87       	std	Y+15, r24	; 0x0f
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	98 89       	ldd	r25, Y+16	; 0x10
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <firstTimeOpeningNewSystem+0x2e4>
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	UART_sendByte(EEPROM_Second_Address_Value);
    1bee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bf0:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
	if(EEPROM_First_Address_Value==0 && (EEPROM_Second_Address_Value))
    1bf4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bf6:	88 23       	and	r24, r24
    1bf8:	29 f4       	brne	.+10     	; 0x1c04 <firstTimeOpeningNewSystem+0x302>
    1bfa:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bfc:	88 23       	and	r24, r24
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <firstTimeOpeningNewSystem+0x302>
	{
		Indicator=0;
    1c00:	19 ae       	std	Y+57, r1	; 0x39
    1c02:	7e c0       	rjmp	.+252    	; 0x1d00 <firstTimeOpeningNewSystem+0x3fe>
	}
	else
	{
		Indicator=1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	89 af       	std	Y+57, r24	; 0x39
		EEPROM_write(0x0000,0x00);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <EEPROM_write>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e2       	ldi	r26, 0x20	; 32
    1c18:	b1 e4       	ldi	r27, 0x41	; 65
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a ef       	ldi	r20, 0xFA	; 250
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <firstTimeOpeningNewSystem+0x362>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <firstTimeOpeningNewSystem+0x3e0>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <firstTimeOpeningNewSystem+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <firstTimeOpeningNewSystem+0x3c2>
    1ca6:	88 ec       	ldi	r24, 0xC8	; 200
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <firstTimeOpeningNewSystem+0x3b0>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <firstTimeOpeningNewSystem+0x3a4>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <firstTimeOpeningNewSystem+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <firstTimeOpeningNewSystem+0x3ec>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		EEPROM_write(0x0001 + (uint16)1,0x01);
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <EEPROM_write>
	}
	if(Indicator)
    1d00:	89 ad       	ldd	r24, Y+57	; 0x39
    1d02:	88 23       	and	r24, r24
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <firstTimeOpeningNewSystem+0x408>
	{
		receiveNewPassword();
    1d06:	0e 94 af 05 	call	0xb5e	; 0xb5e <receiveNewPassword>
	}
}
    1d0a:	eb 96       	adiw	r28, 0x3b	; 59
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <myDelay>:
 *
 * 	returns:
 * 		no returns(void)
 */
void myDelay(uint8 a_delay)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_resume();
    1d28:	0e 94 ba 11 	call	0x2374	; 0x2374 <TIMER1_resume>
	oneMinuteCounter=0;
    1d2c:	10 92 70 00 	sts	0x0070, r1
	while(oneMinuteCounter < a_delay);
    1d30:	90 91 70 00 	lds	r25, 0x0070
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	98 17       	cp	r25, r24
    1d38:	d8 f3       	brcs	.-10     	; 0x1d30 <myDelay+0x14>
	oneMinuteCounter=0;
    1d3a:	10 92 70 00 	sts	0x0070, r1
	TIMER1_stop();
    1d3e:	0e 94 ac 11 	call	0x2358	; 0x2358 <TIMER1_stop>
}
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <Buzzer>:
 *
 * 	returns:
 * 		no returns(void)
 */
void Buzzer(uint8 a_delay)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	2f 97       	sbiw	r28, 0x0f	; 15
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	8f 87       	std	Y+15, r24	; 0x0f

	SET_BIT(BUZZER_CONTROL_DIRECTION,BUZZER_PIN);
    1d60:	a1 e3       	ldi	r26, 0x31	; 49
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e1 e3       	ldi	r30, 0x31	; 49
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 68       	ori	r24, 0x80	; 128
    1d6c:	8c 93       	st	X, r24
	TIMER1_resume();
    1d6e:	0e 94 ba 11 	call	0x2374	; 0x2374 <TIMER1_resume>
	oneMinuteCounter=0;
    1d72:	10 92 70 00 	sts	0x0070, r1
    1d76:	7a c0       	rjmp	.+244    	; 0x1e6c <Buzzer+0x122>
	while(oneMinuteCounter < a_delay )
	{
		TOGGLE_BIT(BUZZER_CONTROL_PORT,BUZZER_PIN);
    1d78:	a2 e3       	ldi	r26, 0x32	; 50
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e2 e3       	ldi	r30, 0x32	; 50
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	90 81       	ld	r25, Z
    1d82:	80 e8       	ldi	r24, 0x80	; 128
    1d84:	89 27       	eor	r24, r25
    1d86:	8c 93       	st	X, r24
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	aa ef       	ldi	r26, 0xFA	; 250
    1d8e:	b3 e4       	ldi	r27, 0x43	; 67
    1d90:	8b 87       	std	Y+11, r24	; 0x0b
    1d92:	9c 87       	std	Y+12, r25	; 0x0c
    1d94:	ad 87       	std	Y+13, r26	; 0x0d
    1d96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a ef       	ldi	r20, 0xFA	; 250
    1da6:	54 e4       	ldi	r21, 0x44	; 68
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8f 83       	std	Y+7, r24	; 0x07
    1db2:	98 87       	std	Y+8, r25	; 0x08
    1db4:	a9 87       	std	Y+9, r26	; 0x09
    1db6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dba:	78 85       	ldd	r23, Y+8	; 0x08
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <Buzzer+0x90>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <Buzzer+0x10e>
	else if (__tmp > 65535)
    1dda:	6f 81       	ldd	r22, Y+7	; 0x07
    1ddc:	78 85       	ldd	r23, Y+8	; 0x08
    1dde:	89 85       	ldd	r24, Y+9	; 0x09
    1de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <Buzzer+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <Buzzer+0xf0>
    1e1c:	88 ec       	ldi	r24, 0xC8	; 200
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9c 83       	std	Y+4, r25	; 0x04
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <Buzzer+0xde>
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	9e 83       	std	Y+6, r25	; 0x06
    1e38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <Buzzer+0xd2>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <Buzzer+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	6f 81       	ldd	r22, Y+7	; 0x07
    1e46:	78 85       	ldd	r23, Y+8	; 0x08
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e 83       	std	Y+6, r25	; 0x06
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	9a 83       	std	Y+2, r25	; 0x02
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	9a 81       	ldd	r25, Y+2	; 0x02
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <Buzzer+0x11a>
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
{

	SET_BIT(BUZZER_CONTROL_DIRECTION,BUZZER_PIN);
	TIMER1_resume();
	oneMinuteCounter=0;
	while(oneMinuteCounter < a_delay )
    1e6c:	90 91 70 00 	lds	r25, 0x0070
    1e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e72:	98 17       	cp	r25, r24
    1e74:	08 f4       	brcc	.+2      	; 0x1e78 <Buzzer+0x12e>
    1e76:	80 cf       	rjmp	.-256    	; 0x1d78 <Buzzer+0x2e>
	{
		TOGGLE_BIT(BUZZER_CONTROL_PORT,BUZZER_PIN);
		_delay_ms(500);
	}
	CLEAR_BIT(BUZZER_CONTROL_PORT,BUZZER_PIN);
    1e78:	a2 e3       	ldi	r26, 0x32	; 50
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e2 e3       	ldi	r30, 0x32	; 50
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 77       	andi	r24, 0x7F	; 127
    1e84:	8c 93       	st	X, r24
	oneMinuteCounter=0;
    1e86:	10 92 70 00 	sts	0x0070, r1
	TIMER1_stop();
    1e8a:	0e 94 ac 11 	call	0x2358	; 0x2358 <TIMER1_stop>
}
    1e8e:	2f 96       	adiw	r28, 0x0f	; 15
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <main>:
 *************************************************************************/

#include "Control_Application.h"


int main(void){
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	2d 97       	sbiw	r28, 0x0d	; 13
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
	 * 2- Data size: 	  Five , Six , Seven , Eight
	 * 3- Parity: 		  Disabled , Even , Odd
	 * 4- Stop bits:	  One ,  Two
	 * 5- Baude rate
	 */
	UART_Configurations UART_Config={Double,Eight,Disabled,One,9600};
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	9a 87       	std	Y+10, r25	; 0x0a
    1eba:	89 87       	std	Y+9, r24	; 0x09
    1ebc:	e8 e6       	ldi	r30, 0x68	; 104
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	fc 87       	std	Y+12, r31	; 0x0c
    1ec2:	eb 87       	std	Y+11, r30	; 0x0b
    1ec4:	f8 e0       	ldi	r31, 0x08	; 8
    1ec6:	fd 87       	std	Y+13, r31	; 0x0d
    1ec8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1eca:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ecc:	00 80       	ld	r0, Z
    1ece:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ed0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	9c 87       	std	Y+12, r25	; 0x0c
    1ed6:	8b 87       	std	Y+11, r24	; 0x0b
    1ed8:	e9 85       	ldd	r30, Y+9	; 0x09
    1eda:	fa 85       	ldd	r31, Y+10	; 0x0a
    1edc:	00 82       	st	Z, r0
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	01 96       	adiw	r24, 0x01	; 1
    1ee4:	9a 87       	std	Y+10, r25	; 0x0a
    1ee6:	89 87       	std	Y+9, r24	; 0x09
    1ee8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1eea:	91 50       	subi	r25, 0x01	; 1
    1eec:	9d 87       	std	Y+13, r25	; 0x0d
    1eee:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ef0:	ee 23       	and	r30, r30
    1ef2:	51 f7       	brne	.-44     	; 0x1ec8 <main+0x28>


	UART_init(&UART_Config);				/*initializing the UART module using the configuration structure*/
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <UART_init>
	while(UART_receiveByte() != M2_READY);	/*Polling untill a specific bit is sent for synchronization between the 2 micro-controllers*/
    1efc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
    1f00:	80 3a       	cpi	r24, 0xA0	; 160
    1f02:	e1 f7       	brne	.-8      	; 0x1efc <main+0x5c>
	EEPROM_init(400000);					/*initialize the EEPROM to transmit/receive data with a 400000 transfer rate*/
    1f04:	60 e8       	ldi	r22, 0x80	; 128
    1f06:	7a e1       	ldi	r23, 0x1A	; 26
    1f08:	86 e0       	ldi	r24, 0x06	; 6
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <EEPROM_init>

	/*Function used to interact with the user only at the first time after buying a the new system(Get the first time password)*/
	firstTimeOpeningNewSystem();
    1f10:	0e 94 81 0c 	call	0x1902	; 0x1902 <firstTimeOpeningNewSystem>

	SET_BIT(SREG,7);   					/*Enable global interrupts*/
    1f14:	af e5       	ldi	r26, 0x5F	; 95
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	ef e5       	ldi	r30, 0x5F	; 95
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 68       	ori	r24, 0x80	; 128
    1f20:	8c 93       	st	X, r24

	TIMER1_init(&Timer1_Routine);		/*initialize the timer and define the function that will be called at the call back request*/
    1f22:	83 ea       	ldi	r24, 0xA3	; 163
    1f24:	95 e0       	ldi	r25, 0x05	; 5
    1f26:	0e 94 87 11 	call	0x230e	; 0x230e <TIMER1_init>
	TIMER1_stop();						/*Pause the timer until we need to resume it again */
    1f2a:	0e 94 ac 11 	call	0x2358	; 0x2358 <TIMER1_stop>
	MOTOR_init();						/*Initialize the motor driver*/
    1f2e:	0e 94 56 10 	call	0x20ac	; 0x20ac <MOTOR_init>

	while(1)
	{
		controlEcuOptions();			/*The function used to perform all the operations of the Control ECU*/
    1f32:	0e 94 cf 06 	call	0xd9e	; 0xd9e <controlEcuOptions>
    1f36:	fd cf       	rjmp	.-6      	; 0x1f32 <main+0x92>

00001f38 <EEPROM_init>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the EEPROM is initialized
 */
void EEPROM_init(uint32 Baud){
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <EEPROM_init+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <EEPROM_init+0x8>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	69 83       	std	Y+1, r22	; 0x01
    1f46:	7a 83       	std	Y+2, r23	; 0x02
    1f48:	8b 83       	std	Y+3, r24	; 0x03
    1f4a:	9c 83       	std	Y+4, r25	; 0x04

	I2C_init(Baud);   /*initializing the EEPROM module by initializing the I2C serial communication*/
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f50:	ab 81       	ldd	r26, Y+3	; 0x03
    1f52:	bc 81       	ldd	r27, Y+4	; 0x04
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 b8 10 	call	0x2170	; 0x2170 <I2C_init>

}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <EEPROM_write>:
 * 				The required datat to be written
 *
 * 	returns:
 * 		uint8 Success/Failure condition: tells if the operations succeeded or not
 */
uint8 EEPROM_write(uint16 a_address ,uint8 a_data){
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <EEPROM_write+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <EEPROM_write+0x8>
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	6b 83       	std	Y+3, r22	; 0x03

	I2C_start();    					/*Send the start bit*/
    1f7c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <I2C_start>

	if( I2C_getStatus() != TWI_START )  /*Check that the start bit is sent*/
    1f80:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    1f84:	88 30       	cpi	r24, 0x08	; 8
    1f86:	11 f0       	breq	.+4      	; 0x1f8c <EEPROM_write+0x22>
	{
		return ERROR;
    1f88:	1c 82       	std	Y+4, r1	; 0x04
    1f8a:	28 c0       	rjmp	.+80     	; 0x1fdc <EEPROM_write+0x72>
	}

	I2C_write((uint8)(((a_address & 0x0700)>>7) | (0x00A0)));  /*Send the most significant 3 bits of the address + write bit*/
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	80 70       	andi	r24, 0x00	; 0
    1f92:	97 70       	andi	r25, 0x07	; 7
    1f94:	88 0f       	add	r24, r24
    1f96:	89 2f       	mov	r24, r25
    1f98:	88 1f       	adc	r24, r24
    1f9a:	99 0b       	sbc	r25, r25
    1f9c:	91 95       	neg	r25
    1f9e:	80 6a       	ori	r24, 0xA0	; 160
    1fa0:	0e 94 0c 11 	call	0x2218	; 0x2218 <I2C_write>
	if( I2C_getStatus() != TWI_MT_SLA_W_ACK )  					/*Check that the address is written to the slave and an ack received*/
    1fa4:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    1fa8:	88 31       	cpi	r24, 0x18	; 24
    1faa:	11 f0       	breq	.+4      	; 0x1fb0 <EEPROM_write+0x46>
	{
		return ERROR;
    1fac:	1c 82       	std	Y+4, r1	; 0x04
    1fae:	16 c0       	rjmp	.+44     	; 0x1fdc <EEPROM_write+0x72>
	}

	I2C_write((uint8)(a_address));					/*Send the least significant 8 bits of the address*/
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	0e 94 0c 11 	call	0x2218	; 0x2218 <I2C_write>
	if( I2C_getStatus() != TWI_MT_DATA_ACK )		/*Check that the address(Data) is written to the slave and an ack received*/
    1fb6:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    1fba:	88 32       	cpi	r24, 0x28	; 40
    1fbc:	11 f0       	breq	.+4      	; 0x1fc2 <EEPROM_write+0x58>
	{
		return ERROR;
    1fbe:	1c 82       	std	Y+4, r1	; 0x04
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <EEPROM_write+0x72>
	}

	I2C_write(a_data);							/*Send the required data to the required address*/
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	0e 94 0c 11 	call	0x2218	; 0x2218 <I2C_write>
	if( I2C_getStatus() != TWI_MT_DATA_ACK )	/*Check that the data is written and an ack is received*/
    1fc8:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    1fcc:	88 32       	cpi	r24, 0x28	; 40
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <EEPROM_write+0x6a>
	{
		return ERROR;
    1fd0:	1c 82       	std	Y+4, r1	; 0x04
    1fd2:	04 c0       	rjmp	.+8      	; 0x1fdc <EEPROM_write+0x72>
	}

	I2C_stop();				/*Send a stop bit to end the I2C frame*/
    1fd4:	0e 94 01 11 	call	0x2202	; 0x2202 <I2C_stop>

	return SUCCESS;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	8c 83       	std	Y+4, r24	; 0x04
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <EEPROM_read>:
 * 				variable passed by reference to carry the value in the required address of the EEPROM
 *
 * 	returns:
 * 		uint8 Success/Failure condition: tells if the operations succeeded or not
 */
uint8 EEPROM_read(uint16 a_address ,uint8 *a_data){
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <EEPROM_read+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <EEPROM_read+0x8>
    1ff4:	0f 92       	push	r0
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	7c 83       	std	Y+4, r23	; 0x04
    2000:	6b 83       	std	Y+3, r22	; 0x03


	I2C_start();							/*Send the start bit*/
    2002:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <I2C_start>
	if( I2C_getStatus() != TWI_START )		/*Check that the start bit is sent*/
    2006:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    200a:	88 30       	cpi	r24, 0x08	; 8
    200c:	11 f0       	breq	.+4      	; 0x2012 <EEPROM_read+0x26>
	{
		return ERROR;
    200e:	1d 82       	std	Y+5, r1	; 0x05
    2010:	44 c0       	rjmp	.+136    	; 0x209a <EEPROM_read+0xae>
	}

	I2C_write((uint8)(((a_address & 0x0700)>>7) | (0xA0)));			/*Send the most significant 3 bits of the address + write bit*/
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	80 70       	andi	r24, 0x00	; 0
    2018:	97 70       	andi	r25, 0x07	; 7
    201a:	88 0f       	add	r24, r24
    201c:	89 2f       	mov	r24, r25
    201e:	88 1f       	adc	r24, r24
    2020:	99 0b       	sbc	r25, r25
    2022:	91 95       	neg	r25
    2024:	80 6a       	ori	r24, 0xA0	; 160
    2026:	0e 94 0c 11 	call	0x2218	; 0x2218 <I2C_write>
	if( I2C_getStatus() != TWI_MT_SLA_W_ACK )						/*Check that the address is written to the slave and an ack received*/
    202a:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    202e:	88 31       	cpi	r24, 0x18	; 24
    2030:	11 f0       	breq	.+4      	; 0x2036 <EEPROM_read+0x4a>
	{
		return ERROR;
    2032:	1d 82       	std	Y+5, r1	; 0x05
    2034:	32 c0       	rjmp	.+100    	; 0x209a <EEPROM_read+0xae>
	}

	I2C_write((uint8)(a_address));						/*Send the least significant 8 bits of the address*/
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	0e 94 0c 11 	call	0x2218	; 0x2218 <I2C_write>
	if( I2C_getStatus() != TWI_MT_DATA_ACK )			/*Check that the address(Data) is written to the slave and an ack received*/
    203c:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    2040:	88 32       	cpi	r24, 0x28	; 40
    2042:	11 f0       	breq	.+4      	; 0x2048 <EEPROM_read+0x5c>
	{
		return ERROR;
    2044:	1d 82       	std	Y+5, r1	; 0x05
    2046:	29 c0       	rjmp	.+82     	; 0x209a <EEPROM_read+0xae>
	}

	I2C_start();										/*sEND A REPEATED START BIT*/
    2048:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <I2C_start>
	if( I2C_getStatus() != TWI_REP_START )				/*Check that the repeated start bit is sent*/
    204c:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    2050:	80 31       	cpi	r24, 0x10	; 16
    2052:	11 f0       	breq	.+4      	; 0x2058 <EEPROM_read+0x6c>
	{
		return ERROR;
    2054:	1d 82       	std	Y+5, r1	; 0x05
    2056:	21 c0       	rjmp	.+66     	; 0x209a <EEPROM_read+0xae>
	}

	I2C_write((uint8)(((a_address & 0x0700)>>7) | (0xA1)));		/*Send the most significant 3 bits of the required data to read data from and send a read bit */
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	80 70       	andi	r24, 0x00	; 0
    205e:	97 70       	andi	r25, 0x07	; 7
    2060:	88 0f       	add	r24, r24
    2062:	89 2f       	mov	r24, r25
    2064:	88 1f       	adc	r24, r24
    2066:	99 0b       	sbc	r25, r25
    2068:	91 95       	neg	r25
    206a:	81 6a       	ori	r24, 0xA1	; 161
    206c:	0e 94 0c 11 	call	0x2218	; 0x2218 <I2C_write>
	if( I2C_getStatus() != TWI_MT_SLA_R_ACK )					/*Check that the address is sent and a read bit is sent*/
    2070:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    2074:	80 34       	cpi	r24, 0x40	; 64
    2076:	11 f0       	breq	.+4      	; 0x207c <EEPROM_read+0x90>
	{
		return ERROR;
    2078:	1d 82       	std	Y+5, r1	; 0x05
    207a:	0f c0       	rjmp	.+30     	; 0x209a <EEPROM_read+0xae>
	}


	*a_data = I2C_readWithNACK();					/*read data with negative ack to state that this is the last byte to be read*/
    207c:	0e 94 36 11 	call	0x226c	; 0x226c <I2C_readWithNACK>
    2080:	eb 81       	ldd	r30, Y+3	; 0x03
    2082:	fc 81       	ldd	r31, Y+4	; 0x04
    2084:	80 83       	st	Z, r24
	if( I2C_getStatus() != TWI_MR_DATA_NACK )		/*Check that Master received data but doesn't send ACK to slave*/
    2086:	0e 94 49 11 	call	0x2292	; 0x2292 <I2C_getStatus>
    208a:	88 35       	cpi	r24, 0x58	; 88
    208c:	11 f0       	breq	.+4      	; 0x2092 <EEPROM_read+0xa6>
	{
		return ERROR;
    208e:	1d 82       	std	Y+5, r1	; 0x05
    2090:	04 c0       	rjmp	.+8      	; 0x209a <EEPROM_read+0xae>
	}

	I2C_stop();				/*Send a stop bit to end the I2C frame*/
    2092:	0e 94 01 11 	call	0x2202	; 0x2202 <I2C_stop>


	return SUCCESS;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <MOTOR_init>:
 *
 * 	returns:
 * 		no returns(void), but the Motor pins are initialized
 */
void MOTOR_init(void)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	/*Make the motor pins output pins*/
	SET_BIT(MOTOR_DIRECTION_PORT, FIRST_OUTPUT_PIN);
    20b4:	a7 e3       	ldi	r26, 0x37	; 55
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e7 e3       	ldi	r30, 0x37	; 55
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	81 60       	ori	r24, 0x01	; 1
    20c0:	8c 93       	st	X, r24
	SET_BIT(MOTOR_DIRECTION_PORT, SECOND_OUTPUT_PIN);
    20c2:	a7 e3       	ldi	r26, 0x37	; 55
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e3       	ldi	r30, 0x37	; 55
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	82 60       	ori	r24, 0x02	; 2
    20ce:	8c 93       	st	X, r24

	/*Set the initial output of the motor pin to be zero*/
	CLEAR_BIT(MOTOR_CONTROL_PORT, FIRST_OUTPUT_PIN);
    20d0:	a8 e3       	ldi	r26, 0x38	; 56
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e8 e3       	ldi	r30, 0x38	; 56
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	8e 7f       	andi	r24, 0xFE	; 254
    20dc:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_CONTROL_PORT, SECOND_OUTPUT_PIN);
    20de:	a8 e3       	ldi	r26, 0x38	; 56
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e8 e3       	ldi	r30, 0x38	; 56
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8d 7f       	andi	r24, 0xFD	; 253
    20ea:	8c 93       	st	X, r24
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <MOTOR_CW>:
 *
 * 	returns:
 * 		no returns(void), but the Motor rotates Clock Wise
 */
void MOTOR_CW(void)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_CONTROL_PORT, SECOND_OUTPUT_PIN);
    20fa:	a8 e3       	ldi	r26, 0x38	; 56
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e8 e3       	ldi	r30, 0x38	; 56
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	8d 7f       	andi	r24, 0xFD	; 253
    2106:	8c 93       	st	X, r24
	SET_BIT(MOTOR_CONTROL_PORT, FIRST_OUTPUT_PIN);
    2108:	a8 e3       	ldi	r26, 0x38	; 56
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e8 e3       	ldi	r30, 0x38	; 56
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	81 60       	ori	r24, 0x01	; 1
    2114:	8c 93       	st	X, r24
}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <MOTOR_ACW>:
 *
 * 	returns:
 * 		no returns(void), but the Motor rotates anti Clock Wise
 */
void MOTOR_ACW(void)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MOTOR_CONTROL_PORT, SECOND_OUTPUT_PIN);
    2124:	a8 e3       	ldi	r26, 0x38	; 56
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	82 60       	ori	r24, 0x02	; 2
    2130:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_CONTROL_PORT, FIRST_OUTPUT_PIN);
    2132:	a8 e3       	ldi	r26, 0x38	; 56
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e8 e3       	ldi	r30, 0x38	; 56
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8e 7f       	andi	r24, 0xFE	; 254
    213e:	8c 93       	st	X, r24

}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <MOTOR_STOP>:
 *
 * 	returns:
 * 		no returns(void), but the Motor stops
 */
void MOTOR_STOP(void)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(MOTOR_CONTROL_PORT, FIRST_OUTPUT_PIN);
    214e:	a8 e3       	ldi	r26, 0x38	; 56
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e8 e3       	ldi	r30, 0x38	; 56
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8e 7f       	andi	r24, 0xFE	; 254
    215a:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_CONTROL_PORT, SECOND_OUTPUT_PIN);
    215c:	a8 e3       	ldi	r26, 0x38	; 56
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e8 e3       	ldi	r30, 0x38	; 56
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	8d 7f       	andi	r24, 0xFD	; 253
    2168:	8c 93       	st	X, r24
}
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <I2C_init>:
 *
 * 	returns:
 * 		no returns(void), but the I2C module is initialized
 */

void I2C_init(uint32 Baud){
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <I2C_init+0x6>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <I2C_init+0x8>
    2178:	00 d0       	rcall	.+0      	; 0x217a <I2C_init+0xa>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	6b 83       	std	Y+3, r22	; 0x03
    2180:	7c 83       	std	Y+4, r23	; 0x04
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	9e 83       	std	Y+6, r25	; 0x06
	 * 1- Select the TWBR value to select the transfer rate
	 * 2- Select the prescaler to be zero (TWSR = 0 )
	 * 3- Select the MC address in case that in master wants to call my device (address = 0x01 <<1)
	 * 4- Enable the TWI by setting TWEN in the TWCR register
	 *************************************************************************/
	TWBR_eqn_num=((F_CPU/Baud)-16);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	92 e1       	ldi	r25, 0x12	; 18
    218a:	aa e7       	ldi	r26, 0x7A	; 122
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	2b 81       	ldd	r18, Y+3	; 0x03
    2190:	3c 81       	ldd	r19, Y+4	; 0x04
    2192:	4d 81       	ldd	r20, Y+5	; 0x05
    2194:	5e 81       	ldd	r21, Y+6	; 0x06
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
    219e:	da 01       	movw	r26, r20
    21a0:	c9 01       	movw	r24, r18
    21a2:	80 51       	subi	r24, 0x10	; 16
    21a4:	8a 83       	std	Y+2, r24	; 0x02
	TWBR_eqn_den=2;
    21a6:	82 e0       	ldi	r24, 0x02	; 2
    21a8:	89 83       	std	Y+1, r24	; 0x01
	TWBR=TWBR_eqn_num/TWBR_eqn_den;
    21aa:	e0 e2       	ldi	r30, 0x20	; 32
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	99 81       	ldd	r25, Y+1	; 0x01
    21b2:	69 2f       	mov	r22, r25
    21b4:	0e 94 3e 13 	call	0x267c	; 0x267c <__udivmodqi4>
    21b8:	80 83       	st	Z, r24
	TWSR = 0x00;
    21ba:	e1 e2       	ldi	r30, 0x21	; 33
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	10 82       	st	Z, r1
	TWAR=0x02;
    21c0:	e2 e2       	ldi	r30, 0x22	; 34
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	80 83       	st	Z, r24
	TWCR=(1<<TWEN);
    21c8:	e6 e5       	ldi	r30, 0x56	; 86
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	80 83       	st	Z, r24
}
    21d0:	26 96       	adiw	r28, 0x06	; 6
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <I2C_start>:
 *
 * 	returns:
 * 		no returns(void), but the start bit is sent
 */

void I2C_start(void){
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	/*********************** Specify TWCR registers as follows ***************
	 * 1- Clear the TWINT flag by writing a logical 1
	 * 2- Enable the TWI module
	 * 3- Enable sending the start bit by setting TWSTA
	 *************************************************************************/
	TWCR=(1<<TWINT) | (1<<TWEN) | (1<<TWSTA);
    21ea:	e6 e5       	ldi	r30, 0x56	; 86
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	84 ea       	ldi	r24, 0xA4	; 164
    21f0:	80 83       	st	Z, r24
	while(BIT_IS_CLEARED(TWCR,TWINT))
    21f2:	e6 e5       	ldi	r30, 0x56	; 86
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 23       	and	r24, r24
    21fa:	dc f7       	brge	.-10     	; 0x21f2 <I2C_start+0x10>
	{
		/*Polling*/
	}
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <I2C_stop>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the stop bit is sent
 */
void I2C_stop(void){
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
	/*********************** Specify TWCR registers as follows ***************
	 * 1- Clear the TWINT flag by writing a logical 1
	 * 2- Enable the TWI module
	 * 3- Enable sending the stop bit by setting TWSTO
	 *************************************************************************/
	TWCR=(1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    220a:	e6 e5       	ldi	r30, 0x56	; 86
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	84 e9       	ldi	r24, 0x94	; 148
    2210:	80 83       	st	Z, r24
}
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <I2C_write>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the data is written in the frame
 */
void I2C_write(uint8 a_data){
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    2222:	89 83       	std	Y+1, r24	; 0x01

	TWDR=a_data;			/*Load the TWDR with the data*/
    2224:	e3 e2       	ldi	r30, 0x23	; 35
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	80 83       	st	Z, r24

	/*********************** Specify TWCR registers as follows ***************
	 * 1- Clear the TWINT flag by writing a logical 1
	 * 2- Enable the TWI module
	 *************************************************************************/
	TWCR=(1<<TWINT) | (1<<TWEN);
    222c:	e6 e5       	ldi	r30, 0x56	; 86
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	84 e8       	ldi	r24, 0x84	; 132
    2232:	80 83       	st	Z, r24
	while(BIT_IS_CLEARED(TWCR,TWINT))
    2234:	e6 e5       	ldi	r30, 0x56	; 86
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	88 23       	and	r24, r24
    223c:	dc f7       	brge	.-10     	; 0x2234 <I2C_write+0x1c>
	{
		/*Polling*/
	}
}
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <I2C_readWithACK>:
 * 			1-1-No inputs (void)

 * 	returns:
 * 		returns the TWDR value which represents the data to be read
 */
uint8 I2C_readWithACK(void){
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
	/*********************** Specify TWCR registers as follows ***************
	 * 1- Clear the TWINT flag by writing a logical 1
	 * 2- Enable the TWI module
	 * 3- Enable sending the ACK by setting TWEA
	 *************************************************************************/
	TWCR=(1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    224e:	e6 e5       	ldi	r30, 0x56	; 86
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	84 ec       	ldi	r24, 0xC4	; 196
    2254:	80 83       	st	Z, r24
	while(BIT_IS_CLEARED(TWCR,TWINT))
    2256:	e6 e5       	ldi	r30, 0x56	; 86
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	88 23       	and	r24, r24
    225e:	dc f7       	brge	.-10     	; 0x2256 <I2C_readWithACK+0x10>
	{
		/*Polling*/
	}
	return TWDR;			/* Read the data from the TWDR*/
    2260:	e3 e2       	ldi	r30, 0x23	; 35
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <I2C_readWithNACK>:
 * 			1-No inputs (void)

 * 	returns:
 * 		returns the TWDR value which represents the last data to be read
 */
uint8 I2C_readWithNACK(void){
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
	/*********************** Specify TWCR registers as follows ***************
	 * 1- Clear the TWINT flag by writing a logical 1
	 * 2- Enable the TWI module
	 * 3- Enable sending the Negative ACK by clearing the TWEA
	 *************************************************************************/
	TWCR=(1<<TWINT) | (1<<TWEN);
    2274:	e6 e5       	ldi	r30, 0x56	; 86
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	84 e8       	ldi	r24, 0x84	; 132
    227a:	80 83       	st	Z, r24
	while(BIT_IS_CLEARED(TWCR,TWINT))
    227c:	e6 e5       	ldi	r30, 0x56	; 86
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	88 23       	and	r24, r24
    2284:	dc f7       	brge	.-10     	; 0x227c <I2C_readWithNACK+0x10>
	{
		/*Polling*/
	}
	return TWDR;			/* Read the data from the TWDR*/
    2286:	e3 e2       	ldi	r30, 0x23	; 35
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
}
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <I2C_getStatus>:
 * 			1-1-No inputs (void)

 * 	returns:
 * 		returns the TWDR value which represents the data to be read
 */
uint8 I2C_getStatus(void){
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62

	return (TWSR & 0xf8);    /*Return the Most significant 5 bits from the TWSR*/
    229a:	e1 e2       	ldi	r30, 0x21	; 33
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 7f       	andi	r24, 0xF8	; 248
}
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <__vector_8>:
/*A pointer to function that will carry the function address that will be called after the call back notification*/
static void(*volatile g_Timer1_CallBack)(void)=NULL;

/*Timer1 interrupt service routine*/
ISR(TIMER1_OVF_vect)
{
    22a8:	1f 92       	push	r1
    22aa:	0f 92       	push	r0
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	0f 92       	push	r0
    22b0:	11 24       	eor	r1, r1
    22b2:	2f 93       	push	r18
    22b4:	3f 93       	push	r19
    22b6:	4f 93       	push	r20
    22b8:	5f 93       	push	r21
    22ba:	6f 93       	push	r22
    22bc:	7f 93       	push	r23
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	af 93       	push	r26
    22c4:	bf 93       	push	r27
    22c6:	ef 93       	push	r30
    22c8:	ff 93       	push	r31
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_CallBack !=NULL){
    22d2:	80 91 71 00 	lds	r24, 0x0071
    22d6:	90 91 72 00 	lds	r25, 0x0072
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	29 f0       	breq	.+10     	; 0x22e8 <__vector_8+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_CallBack)();
    22de:	e0 91 71 00 	lds	r30, 0x0071
    22e2:	f0 91 72 00 	lds	r31, 0x0072
    22e6:	09 95       	icall
	}
}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	ff 91       	pop	r31
    22ee:	ef 91       	pop	r30
    22f0:	bf 91       	pop	r27
    22f2:	af 91       	pop	r26
    22f4:	9f 91       	pop	r25
    22f6:	8f 91       	pop	r24
    22f8:	7f 91       	pop	r23
    22fa:	6f 91       	pop	r22
    22fc:	5f 91       	pop	r21
    22fe:	4f 91       	pop	r20
    2300:	3f 91       	pop	r19
    2302:	2f 91       	pop	r18
    2304:	0f 90       	pop	r0
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	0f 90       	pop	r0
    230a:	1f 90       	pop	r1
    230c:	18 95       	reti

0000230e <TIMER1_init>:
 *
 * 	returns:
 * 		no returns(void), but the Timer1 is initialized
 */
void TIMER1_init(void(*const CallBack_ptr_Timer1)(void))
{
    230e:	df 93       	push	r29
    2310:	cf 93       	push	r28
    2312:	00 d0       	rcall	.+0      	; 0x2314 <TIMER1_init+0x6>
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
	/*Configure TCCR1A/B as follows:
	 * 1- WGM13 , WGM12 , WGM11 , WGM10  are cleared to enable the Normal mode
	 * 2- FOC1A/B are set to specify non-PWM mode
	 * 3- CS12 is set , CS11 and CS10 are cleared (Pre-scaler = 256 )
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    231c:	ef e4       	ldi	r30, 0x4F	; 79
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	8c e0       	ldi	r24, 0x0C	; 12
    2322:	80 83       	st	Z, r24
	TCCR1B = (1<<CS12);
    2324:	ee e4       	ldi	r30, 0x4E	; 78
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	80 83       	st	Z, r24
	TIMSK |= (1<<TOIE1);	/*Enable interrupt at overflow*/
    232c:	a9 e5       	ldi	r26, 0x59	; 89
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e9 e5       	ldi	r30, 0x59	; 89
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	84 60       	ori	r24, 0x04	; 4
    2338:	8c 93       	st	X, r24
	TCNT1 = 0x00; 			/*Starting counting from 0*/
    233a:	ec e4       	ldi	r30, 0x4C	; 76
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	11 82       	std	Z+1, r1	; 0x01
    2340:	10 82       	st	Z, r1
	g_Timer1_CallBack=CallBack_ptr_Timer1;    /*Load the pointer to function with the required call back function*/
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	90 93 72 00 	sts	0x0072, r25
    234a:	80 93 71 00 	sts	0x0071, r24
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <TIMER1_stop>:
 *
 * 	returns:
 * 		no returns(void), but the Timer1 is paused
 */
void TIMER1_stop(void)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00;			/*No clock source*/
    2360:	ee e4       	ldi	r30, 0x4E	; 78
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	10 82       	st	Z, r1
	TCNT1  = 0x00;			/*Set counter to zero */
    2366:	ec e4       	ldi	r30, 0x4C	; 76
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	11 82       	std	Z+1, r1	; 0x01
    236c:	10 82       	st	Z, r1
}
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <TIMER1_resume>:
 *
 * 	returns:
 * 		no returns(void), but the Timer1 is resumed
 */
void TIMER1_resume(void)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<CS12);			/*256 Pre-scaler*/
    237c:	ee e4       	ldi	r30, 0x4E	; 78
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	84 e0       	ldi	r24, 0x04	; 4
    2382:	80 83       	st	Z, r24
	TCNT1  = 0x00;				/*Set counter to zero */
    2384:	ec e4       	ldi	r30, 0x4C	; 76
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	11 82       	std	Z+1, r1	; 0x01
    238a:	10 82       	st	Z, r1
}
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret

00002392 <TIMER1_deInit>:
 *
 * 	returns:
 * 		no returns(void), but Timer1 no longer exist
 */
void TIMER1_deInit(void)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
	/*Reset all the registers and make all values = 0 */
	TCCR1A = 0x00;
    239a:	ef e4       	ldi	r30, 0x4F	; 79
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	10 82       	st	Z, r1
	TCCR1B = 0x00;
    23a0:	ee e4       	ldi	r30, 0x4E	; 78
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	10 82       	st	Z, r1
	TIMSK  = 0x00;
    23a6:	e9 e5       	ldi	r30, 0x59	; 89
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	10 82       	st	Z, r1
	TCNT1  = 0x00;
    23ac:	ec e4       	ldi	r30, 0x4C	; 76
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	11 82       	std	Z+1, r1	; 0x01
    23b2:	10 82       	st	Z, r1
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <UART_init>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the UART is initialized
 */
void UART_init(UART_Configurations *UART_Config){
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <UART_init+0x12>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01

	/******************************** UCSRA OPTIONS *****************************************
	 * 1-Select the  USART Transmission Speed(Normal or Double)
	 *************************************************************************************/
	UCSRA = (UCSRA & 0xfd) | ((UART_Config ->Speed)<<U2X);
    23d4:	ab e2       	ldi	r26, 0x2B	; 43
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	eb e2       	ldi	r30, 0x2B	; 43
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	28 2f       	mov	r18, r24
    23e0:	2d 7f       	andi	r18, 0xFD	; 253
    23e2:	e9 81       	ldd	r30, Y+1	; 0x01
    23e4:	fa 81       	ldd	r31, Y+2	; 0x02
    23e6:	80 81       	ld	r24, Z
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	82 2b       	or	r24, r18
    23f2:	8c 93       	st	X, r24
	 * 2- Receiver Enable(Set RXEN)
	 * 3- Transmitter Enable(Set TXEN)
	 * 4- Defining Character size(UCSZ2 takes the 3rd bit from character size)
	 *************************************************************************************/

	UCSRB = (1<<RXEN) | (1<<TXEN) |
    23f4:	aa e2       	ldi	r26, 0x2A	; 42
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	81 81       	ldd	r24, Z+1	; 0x01
    23fe:	84 70       	andi	r24, 0x04	; 4
    2400:	88 61       	ori	r24, 0x18	; 24
    2402:	8c 93       	st	X, r24
	 * 2- Selecting Parity Options (UPM0 and UPM1)
	 * 3- Selecting number of stop bits (0 for 1 bit, 1 for 2 bits)
	 * 4- Defining Character size(UCSZ1:0 take the 2rd, 1st bits from character size)
	 *************************************************************************************/

	UCSRC  = (1<<URSEL);
    2404:	e0 e4       	ldi	r30, 0x40	; 64
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 e8       	ldi	r24, 0x80	; 128
    240a:	80 83       	st	Z, r24
	UCSRC |= ((UART_Config->Parity)<<UPM0) | /*Parity is 2 bits so it's shifted only to UPM0 and UPM1 is filled by second bit*/
    240c:	a0 e4       	ldi	r26, 0x40	; 64
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e0 e4       	ldi	r30, 0x40	; 64
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	38 2f       	mov	r19, r24
    2418:	e9 81       	ldd	r30, Y+1	; 0x01
    241a:	fa 81       	ldd	r31, Y+2	; 0x02
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	88 2f       	mov	r24, r24
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	82 95       	swap	r24
    2424:	92 95       	swap	r25
    2426:	90 7f       	andi	r25, 0xF0	; 240
    2428:	98 27       	eor	r25, r24
    242a:	80 7f       	andi	r24, 0xF0	; 240
    242c:	98 27       	eor	r25, r24
    242e:	28 2f       	mov	r18, r24
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	83 81       	ldd	r24, Z+3	; 0x03
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	28 2b       	or	r18, r24
    2448:	e9 81       	ldd	r30, Y+1	; 0x01
    244a:	fa 81       	ldd	r31, Y+2	; 0x02
    244c:	81 81       	ldd	r24, Z+1	; 0x01
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	83 70       	andi	r24, 0x03	; 3
    2454:	90 70       	andi	r25, 0x00	; 0
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	82 2b       	or	r24, r18
    245c:	83 2b       	or	r24, r19
    245e:	8c 93       	st	X, r24
	/******************************** UBBR OPTIONS *****************************************
	 * 1- Clear URSEL to enable editing the UBBR register
	 * 2- Writing the equation for calculating UBBRL,UBBRH values
	 *************************************************************************************/

	CLEAR_BIT(UCSRC,URSEL);
    2460:	a0 e4       	ldi	r26, 0x40	; 64
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e0 e4       	ldi	r30, 0x40	; 64
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	8f 77       	andi	r24, 0x7F	; 127
    246c:	8c 93       	st	X, r24
	/*
	 * the equation is Fcpu*(1+U2X value)/(16*Baude)-1
	 * if U2x is 0(Normal speed ) the deviser will be 16
	 * if U2x is 1(Double speed ) the deviser will be 8
	 */
	UBRRH=((F_CPU*((UART_Config->Speed)+1))/(16*UART_Config->Baud)-1)>>8;
    246e:	cc 24       	eor	r12, r12
    2470:	dd 24       	eor	r13, r13
    2472:	68 94       	set
    2474:	c6 f8       	bld	r12, 6
    2476:	e9 81       	ldd	r30, Y+1	; 0x01
    2478:	fa 81       	ldd	r31, Y+2	; 0x02
    247a:	80 81       	ld	r24, Z
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	aa 27       	eor	r26, r26
    2484:	97 fd       	sbrc	r25, 7
    2486:	a0 95       	com	r26
    2488:	ba 2f       	mov	r27, r26
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	32 e1       	ldi	r19, 0x12	; 18
    248e:	4a e7       	ldi	r20, 0x7A	; 122
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsi3>
    249a:	7b 01       	movw	r14, r22
    249c:	8c 01       	movw	r16, r24
    249e:	e9 81       	ldd	r30, Y+1	; 0x01
    24a0:	fa 81       	ldd	r31, Y+2	; 0x02
    24a2:	84 81       	ldd	r24, Z+4	; 0x04
    24a4:	95 81       	ldd	r25, Z+5	; 0x05
    24a6:	a6 81       	ldd	r26, Z+6	; 0x06
    24a8:	b7 81       	ldd	r27, Z+7	; 0x07
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	aa 1f       	adc	r26, r26
    24b0:	bb 1f       	adc	r27, r27
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	aa 1f       	adc	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	88 0f       	add	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	aa 1f       	adc	r26, r26
    24c0:	bb 1f       	adc	r27, r27
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	9c 01       	movw	r18, r24
    24cc:	ad 01       	movw	r20, r26
    24ce:	c8 01       	movw	r24, r16
    24d0:	b7 01       	movw	r22, r14
    24d2:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
    24d6:	da 01       	movw	r26, r20
    24d8:	c9 01       	movw	r24, r18
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	a1 09       	sbc	r26, r1
    24de:	b1 09       	sbc	r27, r1
    24e0:	89 2f       	mov	r24, r25
    24e2:	9a 2f       	mov	r25, r26
    24e4:	ab 2f       	mov	r26, r27
    24e6:	bb 27       	eor	r27, r27
    24e8:	f6 01       	movw	r30, r12
    24ea:	80 83       	st	Z, r24
	UBRRL=((F_CPU*((UART_Config->Speed)+1))/(16*UART_Config->Baud)-1);
    24ec:	0f 2e       	mov	r0, r31
    24ee:	f9 e2       	ldi	r31, 0x29	; 41
    24f0:	cf 2e       	mov	r12, r31
    24f2:	dd 24       	eor	r13, r13
    24f4:	f0 2d       	mov	r31, r0
    24f6:	e9 81       	ldd	r30, Y+1	; 0x01
    24f8:	fa 81       	ldd	r31, Y+2	; 0x02
    24fa:	80 81       	ld	r24, Z
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	01 96       	adiw	r24, 0x01	; 1
    2502:	aa 27       	eor	r26, r26
    2504:	97 fd       	sbrc	r25, 7
    2506:	a0 95       	com	r26
    2508:	ba 2f       	mov	r27, r26
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	32 e1       	ldi	r19, 0x12	; 18
    250e:	4a e7       	ldi	r20, 0x7A	; 122
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 1f 13 	call	0x263e	; 0x263e <__mulsi3>
    251a:	7b 01       	movw	r14, r22
    251c:	8c 01       	movw	r16, r24
    251e:	e9 81       	ldd	r30, Y+1	; 0x01
    2520:	fa 81       	ldd	r31, Y+2	; 0x02
    2522:	84 81       	ldd	r24, Z+4	; 0x04
    2524:	95 81       	ldd	r25, Z+5	; 0x05
    2526:	a6 81       	ldd	r26, Z+6	; 0x06
    2528:	b7 81       	ldd	r27, Z+7	; 0x07
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	aa 1f       	adc	r26, r26
    2530:	bb 1f       	adc	r27, r27
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	aa 1f       	adc	r26, r26
    2538:	bb 1f       	adc	r27, r27
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	aa 1f       	adc	r26, r26
    2540:	bb 1f       	adc	r27, r27
    2542:	88 0f       	add	r24, r24
    2544:	99 1f       	adc	r25, r25
    2546:	aa 1f       	adc	r26, r26
    2548:	bb 1f       	adc	r27, r27
    254a:	9c 01       	movw	r18, r24
    254c:	ad 01       	movw	r20, r26
    254e:	c8 01       	movw	r24, r16
    2550:	b7 01       	movw	r22, r14
    2552:	0e 94 4a 13 	call	0x2694	; 0x2694 <__udivmodsi4>
    2556:	da 01       	movw	r26, r20
    2558:	c9 01       	movw	r24, r18
    255a:	81 50       	subi	r24, 0x01	; 1
    255c:	f6 01       	movw	r30, r12
    255e:	80 83       	st	Z, r24

}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	08 95       	ret

00002576 <UART_sendByte>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the data is sent
 */
void UART_sendByte(uint8 a_data){
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	0f 92       	push	r0
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEARED(UCSRA,UDRE))
    2582:	eb e2       	ldi	r30, 0x2B	; 43
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	80 72       	andi	r24, 0x20	; 32
    258e:	90 70       	andi	r25, 0x00	; 0
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	b9 f3       	breq	.-18     	; 0x2582 <UART_sendByte+0xc>
		/*
		 * Polling
		 * Waiting till the UDR register is empty to send the data
		 */
	}
	UDR=a_data;  /*Loading the UDR with required data*/
    2594:	ec e2       	ldi	r30, 0x2C	; 44
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	80 83       	st	Z, r24
}
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <UART_receiveByte>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the data is received
 */
uint8 UART_receiveByte(void){
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62

	while(BIT_IS_CLEARED(UCSRA,RXC))
    25ac:	eb e2       	ldi	r30, 0x2B	; 43
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	88 23       	and	r24, r24
    25b4:	dc f7       	brge	.-10     	; 0x25ac <UART_receiveByte+0x8>
		 * Polling
		 * Waiting till the RXC is set to be sure that receive is complete
		 */
	}

	return UDR;   /*Read the value of UDR*/
    25b6:	ec e2       	ldi	r30, 0x2C	; 44
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
}
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <UART_sendString>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the string is sent
 */
void UART_sendString(uint8 *a_str){
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <UART_sendString+0x6>
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	0a c0       	rjmp	.+20     	; 0x25e6 <UART_sendString+0x24>

	while(*a_str != '\0')
	{
		UART_sendByte(*a_str);
    25d2:	e9 81       	ldd	r30, Y+1	; 0x01
    25d4:	fa 81       	ldd	r31, Y+2	; 0x02
    25d6:	80 81       	ld	r24, Z
    25d8:	0e 94 bb 12 	call	0x2576	; 0x2576 <UART_sendByte>
		a_str++;				/*Pointer moves to next character*/
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
 * 	returns:
 * 		no returns(void), but the string is sent
 */
void UART_sendString(uint8 *a_str){

	while(*a_str != '\0')
    25e6:	e9 81       	ldd	r30, Y+1	; 0x01
    25e8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	89 f7       	brne	.-30     	; 0x25d2 <UART_sendString+0x10>
	{
		UART_sendByte(*a_str);
		a_str++;				/*Pointer moves to next character*/
	}
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <UART_receiveString>:
 * 		Outputs:
 *
 * 	returns:
 * 		no returns(void), but the string is received
 */
void UART_receiveString(uint8 *a_str){
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <UART_receiveString+0x6>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01

	do{
		*a_str=UART_receiveByte();
    2608:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <UART_receiveByte>
    260c:	e9 81       	ldd	r30, Y+1	; 0x01
    260e:	fa 81       	ldd	r31, Y+2	; 0x02
    2610:	80 83       	st	Z, r24
		a_str++;				/*Pointer moves to next character*/
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
	}while(*(a_str-1) != '#');	/*Checks for a virtual Null as the real Null can't be send or received*/
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	fc 01       	movw	r30, r24
    2622:	31 97       	sbiw	r30, 0x01	; 1
    2624:	80 81       	ld	r24, Z
    2626:	83 32       	cpi	r24, 0x23	; 35
    2628:	79 f7       	brne	.-34     	; 0x2608 <UART_receiveString+0xe>
	*(a_str-1)='\0';			/*End your array with Null to be a string*/
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	fc 01       	movw	r30, r24
    2630:	31 97       	sbiw	r30, 0x01	; 1
    2632:	10 82       	st	Z, r1
}
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <__mulsi3>:
    263e:	62 9f       	mul	r22, r18
    2640:	d0 01       	movw	r26, r0
    2642:	73 9f       	mul	r23, r19
    2644:	f0 01       	movw	r30, r0
    2646:	82 9f       	mul	r24, r18
    2648:	e0 0d       	add	r30, r0
    264a:	f1 1d       	adc	r31, r1
    264c:	64 9f       	mul	r22, r20
    264e:	e0 0d       	add	r30, r0
    2650:	f1 1d       	adc	r31, r1
    2652:	92 9f       	mul	r25, r18
    2654:	f0 0d       	add	r31, r0
    2656:	83 9f       	mul	r24, r19
    2658:	f0 0d       	add	r31, r0
    265a:	74 9f       	mul	r23, r20
    265c:	f0 0d       	add	r31, r0
    265e:	65 9f       	mul	r22, r21
    2660:	f0 0d       	add	r31, r0
    2662:	99 27       	eor	r25, r25
    2664:	72 9f       	mul	r23, r18
    2666:	b0 0d       	add	r27, r0
    2668:	e1 1d       	adc	r30, r1
    266a:	f9 1f       	adc	r31, r25
    266c:	63 9f       	mul	r22, r19
    266e:	b0 0d       	add	r27, r0
    2670:	e1 1d       	adc	r30, r1
    2672:	f9 1f       	adc	r31, r25
    2674:	bd 01       	movw	r22, r26
    2676:	cf 01       	movw	r24, r30
    2678:	11 24       	eor	r1, r1
    267a:	08 95       	ret

0000267c <__udivmodqi4>:
    267c:	99 1b       	sub	r25, r25
    267e:	79 e0       	ldi	r23, 0x09	; 9
    2680:	04 c0       	rjmp	.+8      	; 0x268a <__udivmodqi4_ep>

00002682 <__udivmodqi4_loop>:
    2682:	99 1f       	adc	r25, r25
    2684:	96 17       	cp	r25, r22
    2686:	08 f0       	brcs	.+2      	; 0x268a <__udivmodqi4_ep>
    2688:	96 1b       	sub	r25, r22

0000268a <__udivmodqi4_ep>:
    268a:	88 1f       	adc	r24, r24
    268c:	7a 95       	dec	r23
    268e:	c9 f7       	brne	.-14     	; 0x2682 <__udivmodqi4_loop>
    2690:	80 95       	com	r24
    2692:	08 95       	ret

00002694 <__udivmodsi4>:
    2694:	a1 e2       	ldi	r26, 0x21	; 33
    2696:	1a 2e       	mov	r1, r26
    2698:	aa 1b       	sub	r26, r26
    269a:	bb 1b       	sub	r27, r27
    269c:	fd 01       	movw	r30, r26
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <__udivmodsi4_ep>

000026a0 <__udivmodsi4_loop>:
    26a0:	aa 1f       	adc	r26, r26
    26a2:	bb 1f       	adc	r27, r27
    26a4:	ee 1f       	adc	r30, r30
    26a6:	ff 1f       	adc	r31, r31
    26a8:	a2 17       	cp	r26, r18
    26aa:	b3 07       	cpc	r27, r19
    26ac:	e4 07       	cpc	r30, r20
    26ae:	f5 07       	cpc	r31, r21
    26b0:	20 f0       	brcs	.+8      	; 0x26ba <__udivmodsi4_ep>
    26b2:	a2 1b       	sub	r26, r18
    26b4:	b3 0b       	sbc	r27, r19
    26b6:	e4 0b       	sbc	r30, r20
    26b8:	f5 0b       	sbc	r31, r21

000026ba <__udivmodsi4_ep>:
    26ba:	66 1f       	adc	r22, r22
    26bc:	77 1f       	adc	r23, r23
    26be:	88 1f       	adc	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	1a 94       	dec	r1
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <__udivmodsi4_loop>
    26c6:	60 95       	com	r22
    26c8:	70 95       	com	r23
    26ca:	80 95       	com	r24
    26cc:	90 95       	com	r25
    26ce:	9b 01       	movw	r18, r22
    26d0:	ac 01       	movw	r20, r24
    26d2:	bd 01       	movw	r22, r26
    26d4:	cf 01       	movw	r24, r30
    26d6:	08 95       	ret

000026d8 <__prologue_saves__>:
    26d8:	2f 92       	push	r2
    26da:	3f 92       	push	r3
    26dc:	4f 92       	push	r4
    26de:	5f 92       	push	r5
    26e0:	6f 92       	push	r6
    26e2:	7f 92       	push	r7
    26e4:	8f 92       	push	r8
    26e6:	9f 92       	push	r9
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	ca 1b       	sub	r28, r26
    2702:	db 0b       	sbc	r29, r27
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	09 94       	ijmp

00002710 <__epilogue_restores__>:
    2710:	2a 88       	ldd	r2, Y+18	; 0x12
    2712:	39 88       	ldd	r3, Y+17	; 0x11
    2714:	48 88       	ldd	r4, Y+16	; 0x10
    2716:	5f 84       	ldd	r5, Y+15	; 0x0f
    2718:	6e 84       	ldd	r6, Y+14	; 0x0e
    271a:	7d 84       	ldd	r7, Y+13	; 0x0d
    271c:	8c 84       	ldd	r8, Y+12	; 0x0c
    271e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2720:	aa 84       	ldd	r10, Y+10	; 0x0a
    2722:	b9 84       	ldd	r11, Y+9	; 0x09
    2724:	c8 84       	ldd	r12, Y+8	; 0x08
    2726:	df 80       	ldd	r13, Y+7	; 0x07
    2728:	ee 80       	ldd	r14, Y+6	; 0x06
    272a:	fd 80       	ldd	r15, Y+5	; 0x05
    272c:	0c 81       	ldd	r16, Y+4	; 0x04
    272e:	1b 81       	ldd	r17, Y+3	; 0x03
    2730:	aa 81       	ldd	r26, Y+2	; 0x02
    2732:	b9 81       	ldd	r27, Y+1	; 0x01
    2734:	ce 0f       	add	r28, r30
    2736:	d1 1d       	adc	r29, r1
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	ed 01       	movw	r28, r26
    2744:	08 95       	ret

00002746 <_exit>:
    2746:	f8 94       	cli

00002748 <__stop_program>:
    2748:	ff cf       	rjmp	.-2      	; 0x2748 <__stop_program>
